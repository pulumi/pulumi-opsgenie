// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package opsgenie

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a Maintenance within Opsgenie.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-opsgenie/sdk/go/opsgenie"
// 	"github.com/pulumi/pulumi-opsgenie/sdk/go/opsgenie/"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := opsgenie.NewMaintenance(ctx, "test", &opsgenie.MaintenanceArgs{
// 			Description: pulumi.String(fmt.Sprintf("%v%v%v", "geniemaintenance-", "%", "s")),
// 			Rules: opsgenie.MaintenanceRuleArray{
// 				&opsgenie.MaintenanceRuleArgs{
// 					Entities: opsgenie.MaintenanceRuleEntityArray{
// 						&opsgenie.MaintenanceRuleEntityArgs{
// 							Id:   pulumi.Any(opsgenie_email_integration.Test.Id),
// 							Type: pulumi.String("integration"),
// 						},
// 					},
// 					State: pulumi.String("enabled"),
// 				},
// 			},
// 			Times: opsgenie.MaintenanceTimeArray{
// 				&opsgenie.MaintenanceTimeArgs{
// 					EndDate:   pulumi.String(fmt.Sprintf("%v%v%v", "2019-06-", "%", "dT17:50:00Z")),
// 					StartDate: pulumi.String("2019-06-20T17:45:00Z"),
// 					Type:      pulumi.String("schedule"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Maintenance policies can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import opsgenie:index/maintenance:Maintenance test 812be1a1-32c8-4666-a7fb-03ecc385106c`
// ```
type Maintenance struct {
	pulumi.CustomResourceState

	// Description for the maintenance.
	Description pulumi.StringOutput `pulumi:"description"`
	// Rules of maintenance, which takes a list of rule objects and defines the maintenance rules over integrations and policies.
	Rules MaintenanceRuleArrayOutput `pulumi:"rules"`
	// Time configuration of maintenance. It takes a time object which has type, startDate and endDate fields
	Times MaintenanceTimeArrayOutput `pulumi:"times"`
}

// NewMaintenance registers a new resource with the given unique name, arguments, and options.
func NewMaintenance(ctx *pulumi.Context,
	name string, args *MaintenanceArgs, opts ...pulumi.ResourceOption) (*Maintenance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.Rules == nil {
		return nil, errors.New("invalid value for required argument 'Rules'")
	}
	var resource Maintenance
	err := ctx.RegisterResource("opsgenie:index/maintenance:Maintenance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMaintenance gets an existing Maintenance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMaintenance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MaintenanceState, opts ...pulumi.ResourceOption) (*Maintenance, error) {
	var resource Maintenance
	err := ctx.ReadResource("opsgenie:index/maintenance:Maintenance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Maintenance resources.
type maintenanceState struct {
	// Description for the maintenance.
	Description *string `pulumi:"description"`
	// Rules of maintenance, which takes a list of rule objects and defines the maintenance rules over integrations and policies.
	Rules []MaintenanceRule `pulumi:"rules"`
	// Time configuration of maintenance. It takes a time object which has type, startDate and endDate fields
	Times []MaintenanceTime `pulumi:"times"`
}

type MaintenanceState struct {
	// Description for the maintenance.
	Description pulumi.StringPtrInput
	// Rules of maintenance, which takes a list of rule objects and defines the maintenance rules over integrations and policies.
	Rules MaintenanceRuleArrayInput
	// Time configuration of maintenance. It takes a time object which has type, startDate and endDate fields
	Times MaintenanceTimeArrayInput
}

func (MaintenanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*maintenanceState)(nil)).Elem()
}

type maintenanceArgs struct {
	// Description for the maintenance.
	Description string `pulumi:"description"`
	// Rules of maintenance, which takes a list of rule objects and defines the maintenance rules over integrations and policies.
	Rules []MaintenanceRule `pulumi:"rules"`
	// Time configuration of maintenance. It takes a time object which has type, startDate and endDate fields
	Times []MaintenanceTime `pulumi:"times"`
}

// The set of arguments for constructing a Maintenance resource.
type MaintenanceArgs struct {
	// Description for the maintenance.
	Description pulumi.StringInput
	// Rules of maintenance, which takes a list of rule objects and defines the maintenance rules over integrations and policies.
	Rules MaintenanceRuleArrayInput
	// Time configuration of maintenance. It takes a time object which has type, startDate and endDate fields
	Times MaintenanceTimeArrayInput
}

func (MaintenanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*maintenanceArgs)(nil)).Elem()
}

type MaintenanceInput interface {
	pulumi.Input

	ToMaintenanceOutput() MaintenanceOutput
	ToMaintenanceOutputWithContext(ctx context.Context) MaintenanceOutput
}

func (*Maintenance) ElementType() reflect.Type {
	return reflect.TypeOf((*Maintenance)(nil))
}

func (i *Maintenance) ToMaintenanceOutput() MaintenanceOutput {
	return i.ToMaintenanceOutputWithContext(context.Background())
}

func (i *Maintenance) ToMaintenanceOutputWithContext(ctx context.Context) MaintenanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceOutput)
}

type MaintenanceOutput struct {
	*pulumi.OutputState
}

func (MaintenanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Maintenance)(nil))
}

func (o MaintenanceOutput) ToMaintenanceOutput() MaintenanceOutput {
	return o
}

func (o MaintenanceOutput) ToMaintenanceOutputWithContext(ctx context.Context) MaintenanceOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(MaintenanceOutput{})
}
