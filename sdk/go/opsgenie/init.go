// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package opsgenie

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "opsgenie:index/alertPolicy:AlertPolicy":
		r, err = NewAlertPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "opsgenie:index/apiIntegration:ApiIntegration":
		r, err = NewApiIntegration(ctx, name, nil, pulumi.URN_(urn))
	case "opsgenie:index/customRole:CustomRole":
		r, err = NewCustomRole(ctx, name, nil, pulumi.URN_(urn))
	case "opsgenie:index/emailIntegration:EmailIntegration":
		r, err = NewEmailIntegration(ctx, name, nil, pulumi.URN_(urn))
	case "opsgenie:index/escalation:Escalation":
		r, err = NewEscalation(ctx, name, nil, pulumi.URN_(urn))
	case "opsgenie:index/heartbeat:Heartbeat":
		r, err = NewHeartbeat(ctx, name, nil, pulumi.URN_(urn))
	case "opsgenie:index/incidentTemplate:IncidentTemplate":
		r, err = NewIncidentTemplate(ctx, name, nil, pulumi.URN_(urn))
	case "opsgenie:index/integrationAction:IntegrationAction":
		r, err = NewIntegrationAction(ctx, name, nil, pulumi.URN_(urn))
	case "opsgenie:index/maintenance:Maintenance":
		r, err = NewMaintenance(ctx, name, nil, pulumi.URN_(urn))
	case "opsgenie:index/notificationPolicy:NotificationPolicy":
		r, err = NewNotificationPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "opsgenie:index/notificationRule:NotificationRule":
		r, err = NewNotificationRule(ctx, name, nil, pulumi.URN_(urn))
	case "opsgenie:index/schedule:Schedule":
		r, err = NewSchedule(ctx, name, nil, pulumi.URN_(urn))
	case "opsgenie:index/scheduleRotation:ScheduleRotation":
		r, err = NewScheduleRotation(ctx, name, nil, pulumi.URN_(urn))
	case "opsgenie:index/service:Service":
		r, err = NewService(ctx, name, nil, pulumi.URN_(urn))
	case "opsgenie:index/serviceIncidentRule:ServiceIncidentRule":
		r, err = NewServiceIncidentRule(ctx, name, nil, pulumi.URN_(urn))
	case "opsgenie:index/team:Team":
		r, err = NewTeam(ctx, name, nil, pulumi.URN_(urn))
	case "opsgenie:index/teamRoutingRule:TeamRoutingRule":
		r, err = NewTeamRoutingRule(ctx, name, nil, pulumi.URN_(urn))
	case "opsgenie:index/user:User":
		r, err = NewUser(ctx, name, nil, pulumi.URN_(urn))
	case "opsgenie:index/userContact:UserContact":
		r, err = NewUserContact(ctx, name, nil, pulumi.URN_(urn))
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:opsgenie" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	return NewProvider(ctx, name, nil, pulumi.URN_(urn))
}

func init() {
	version, err := PkgVersion()
	if err != nil {
		fmt.Println("failed to determine package version. defaulting to v1: %v", err)
	}
	pulumi.RegisterResourceModule(
		"opsgenie",
		"index/alertPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"opsgenie",
		"index/apiIntegration",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"opsgenie",
		"index/customRole",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"opsgenie",
		"index/emailIntegration",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"opsgenie",
		"index/escalation",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"opsgenie",
		"index/heartbeat",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"opsgenie",
		"index/incidentTemplate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"opsgenie",
		"index/integrationAction",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"opsgenie",
		"index/maintenance",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"opsgenie",
		"index/notificationPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"opsgenie",
		"index/notificationRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"opsgenie",
		"index/schedule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"opsgenie",
		"index/scheduleRotation",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"opsgenie",
		"index/service",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"opsgenie",
		"index/serviceIncidentRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"opsgenie",
		"index/team",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"opsgenie",
		"index/teamRoutingRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"opsgenie",
		"index/user",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"opsgenie",
		"index/userContact",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"opsgenie",
		&pkg{version},
	)
}
