// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opsgenie

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-opsgenie/sdk/go/opsgenie/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Notification Policy within Opsgenie.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-opsgenie/sdk/go/opsgenie"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			testTeam, err := opsgenie.NewTeam(ctx, "testTeam", &opsgenie.TeamArgs{
//				Description: pulumi.String("This team deals with all the things"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = opsgenie.NewNotificationPolicy(ctx, "testNotificationPolicy", &opsgenie.NotificationPolicyArgs{
//				TeamId:            testTeam.ID(),
//				PolicyDescription: pulumi.String("This policy has a delay action"),
//				DelayActions: opsgenie.NotificationPolicyDelayActionArray{
//					&opsgenie.NotificationPolicyDelayActionArgs{
//						DelayOption: pulumi.String("next-time"),
//						UntilMinute: pulumi.Int(1),
//						UntilHour:   pulumi.Int(9),
//					},
//				},
//				Filters: opsgenie.NotificationPolicyFilterArray{
//					nil,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Notification policies can be imported using the `team_id` and `notification_policy_id`, e.g.
//
// ```sh
//
//	$ pulumi import opsgenie:index/notificationPolicy:NotificationPolicy test team_id/notification_policy_id`
//
// ```
type NotificationPolicy struct {
	pulumi.CustomResourceState

	// Auto Restart Action of the policy. This is a block, structure is documented below.
	AutoCloseActions NotificationPolicyAutoCloseActionArrayOutput `pulumi:"autoCloseActions"`
	// Auto Restart Action of the policy. This is a block, structure is documented below.
	AutoRestartActions NotificationPolicyAutoRestartActionArrayOutput `pulumi:"autoRestartActions"`
	// Deduplication Action of the policy. This is a block, structure is documented below.
	DeDuplicationActions NotificationPolicyDeDuplicationActionArrayOutput `pulumi:"deDuplicationActions"`
	// Delay notifications. This is a block, structure is documented below.
	DelayActions NotificationPolicyDelayActionArrayOutput `pulumi:"delayActions"`
	// If policy should be enabled. Default: `true`
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// A notification filter which will be applied. This filter can be empty: `filter {}` - this means `match-all`. This is a block, structure is documented below.
	Filters NotificationPolicyFilterArrayOutput `pulumi:"filters"`
	// Name of the notification policy
	Name pulumi.StringOutput `pulumi:"name"`
	// Description of the policy. This can be max 512 characters.
	PolicyDescription pulumi.StringPtrOutput `pulumi:"policyDescription"`
	// Suppress value of the policy. Values are: `true`, `false`. Default: `false`
	Suppress pulumi.BoolPtrOutput `pulumi:"suppress"`
	// Id of team that this policy belons to.
	TeamId pulumi.StringOutput `pulumi:"teamId"`
	// Time restrictions specified in this field must be met for this policy to work. This is a block, structure is documented below.
	TimeRestrictions NotificationPolicyTimeRestrictionArrayOutput `pulumi:"timeRestrictions"`
}

// NewNotificationPolicy registers a new resource with the given unique name, arguments, and options.
func NewNotificationPolicy(ctx *pulumi.Context,
	name string, args *NotificationPolicyArgs, opts ...pulumi.ResourceOption) (*NotificationPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Filters == nil {
		return nil, errors.New("invalid value for required argument 'Filters'")
	}
	if args.TeamId == nil {
		return nil, errors.New("invalid value for required argument 'TeamId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NotificationPolicy
	err := ctx.RegisterResource("opsgenie:index/notificationPolicy:NotificationPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNotificationPolicy gets an existing NotificationPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNotificationPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NotificationPolicyState, opts ...pulumi.ResourceOption) (*NotificationPolicy, error) {
	var resource NotificationPolicy
	err := ctx.ReadResource("opsgenie:index/notificationPolicy:NotificationPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NotificationPolicy resources.
type notificationPolicyState struct {
	// Auto Restart Action of the policy. This is a block, structure is documented below.
	AutoCloseActions []NotificationPolicyAutoCloseAction `pulumi:"autoCloseActions"`
	// Auto Restart Action of the policy. This is a block, structure is documented below.
	AutoRestartActions []NotificationPolicyAutoRestartAction `pulumi:"autoRestartActions"`
	// Deduplication Action of the policy. This is a block, structure is documented below.
	DeDuplicationActions []NotificationPolicyDeDuplicationAction `pulumi:"deDuplicationActions"`
	// Delay notifications. This is a block, structure is documented below.
	DelayActions []NotificationPolicyDelayAction `pulumi:"delayActions"`
	// If policy should be enabled. Default: `true`
	Enabled *bool `pulumi:"enabled"`
	// A notification filter which will be applied. This filter can be empty: `filter {}` - this means `match-all`. This is a block, structure is documented below.
	Filters []NotificationPolicyFilter `pulumi:"filters"`
	// Name of the notification policy
	Name *string `pulumi:"name"`
	// Description of the policy. This can be max 512 characters.
	PolicyDescription *string `pulumi:"policyDescription"`
	// Suppress value of the policy. Values are: `true`, `false`. Default: `false`
	Suppress *bool `pulumi:"suppress"`
	// Id of team that this policy belons to.
	TeamId *string `pulumi:"teamId"`
	// Time restrictions specified in this field must be met for this policy to work. This is a block, structure is documented below.
	TimeRestrictions []NotificationPolicyTimeRestriction `pulumi:"timeRestrictions"`
}

type NotificationPolicyState struct {
	// Auto Restart Action of the policy. This is a block, structure is documented below.
	AutoCloseActions NotificationPolicyAutoCloseActionArrayInput
	// Auto Restart Action of the policy. This is a block, structure is documented below.
	AutoRestartActions NotificationPolicyAutoRestartActionArrayInput
	// Deduplication Action of the policy. This is a block, structure is documented below.
	DeDuplicationActions NotificationPolicyDeDuplicationActionArrayInput
	// Delay notifications. This is a block, structure is documented below.
	DelayActions NotificationPolicyDelayActionArrayInput
	// If policy should be enabled. Default: `true`
	Enabled pulumi.BoolPtrInput
	// A notification filter which will be applied. This filter can be empty: `filter {}` - this means `match-all`. This is a block, structure is documented below.
	Filters NotificationPolicyFilterArrayInput
	// Name of the notification policy
	Name pulumi.StringPtrInput
	// Description of the policy. This can be max 512 characters.
	PolicyDescription pulumi.StringPtrInput
	// Suppress value of the policy. Values are: `true`, `false`. Default: `false`
	Suppress pulumi.BoolPtrInput
	// Id of team that this policy belons to.
	TeamId pulumi.StringPtrInput
	// Time restrictions specified in this field must be met for this policy to work. This is a block, structure is documented below.
	TimeRestrictions NotificationPolicyTimeRestrictionArrayInput
}

func (NotificationPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationPolicyState)(nil)).Elem()
}

type notificationPolicyArgs struct {
	// Auto Restart Action of the policy. This is a block, structure is documented below.
	AutoCloseActions []NotificationPolicyAutoCloseAction `pulumi:"autoCloseActions"`
	// Auto Restart Action of the policy. This is a block, structure is documented below.
	AutoRestartActions []NotificationPolicyAutoRestartAction `pulumi:"autoRestartActions"`
	// Deduplication Action of the policy. This is a block, structure is documented below.
	DeDuplicationActions []NotificationPolicyDeDuplicationAction `pulumi:"deDuplicationActions"`
	// Delay notifications. This is a block, structure is documented below.
	DelayActions []NotificationPolicyDelayAction `pulumi:"delayActions"`
	// If policy should be enabled. Default: `true`
	Enabled *bool `pulumi:"enabled"`
	// A notification filter which will be applied. This filter can be empty: `filter {}` - this means `match-all`. This is a block, structure is documented below.
	Filters []NotificationPolicyFilter `pulumi:"filters"`
	// Name of the notification policy
	Name *string `pulumi:"name"`
	// Description of the policy. This can be max 512 characters.
	PolicyDescription *string `pulumi:"policyDescription"`
	// Suppress value of the policy. Values are: `true`, `false`. Default: `false`
	Suppress *bool `pulumi:"suppress"`
	// Id of team that this policy belons to.
	TeamId string `pulumi:"teamId"`
	// Time restrictions specified in this field must be met for this policy to work. This is a block, structure is documented below.
	TimeRestrictions []NotificationPolicyTimeRestriction `pulumi:"timeRestrictions"`
}

// The set of arguments for constructing a NotificationPolicy resource.
type NotificationPolicyArgs struct {
	// Auto Restart Action of the policy. This is a block, structure is documented below.
	AutoCloseActions NotificationPolicyAutoCloseActionArrayInput
	// Auto Restart Action of the policy. This is a block, structure is documented below.
	AutoRestartActions NotificationPolicyAutoRestartActionArrayInput
	// Deduplication Action of the policy. This is a block, structure is documented below.
	DeDuplicationActions NotificationPolicyDeDuplicationActionArrayInput
	// Delay notifications. This is a block, structure is documented below.
	DelayActions NotificationPolicyDelayActionArrayInput
	// If policy should be enabled. Default: `true`
	Enabled pulumi.BoolPtrInput
	// A notification filter which will be applied. This filter can be empty: `filter {}` - this means `match-all`. This is a block, structure is documented below.
	Filters NotificationPolicyFilterArrayInput
	// Name of the notification policy
	Name pulumi.StringPtrInput
	// Description of the policy. This can be max 512 characters.
	PolicyDescription pulumi.StringPtrInput
	// Suppress value of the policy. Values are: `true`, `false`. Default: `false`
	Suppress pulumi.BoolPtrInput
	// Id of team that this policy belons to.
	TeamId pulumi.StringInput
	// Time restrictions specified in this field must be met for this policy to work. This is a block, structure is documented below.
	TimeRestrictions NotificationPolicyTimeRestrictionArrayInput
}

func (NotificationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationPolicyArgs)(nil)).Elem()
}

type NotificationPolicyInput interface {
	pulumi.Input

	ToNotificationPolicyOutput() NotificationPolicyOutput
	ToNotificationPolicyOutputWithContext(ctx context.Context) NotificationPolicyOutput
}

func (*NotificationPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationPolicy)(nil)).Elem()
}

func (i *NotificationPolicy) ToNotificationPolicyOutput() NotificationPolicyOutput {
	return i.ToNotificationPolicyOutputWithContext(context.Background())
}

func (i *NotificationPolicy) ToNotificationPolicyOutputWithContext(ctx context.Context) NotificationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyOutput)
}

// NotificationPolicyArrayInput is an input type that accepts NotificationPolicyArray and NotificationPolicyArrayOutput values.
// You can construct a concrete instance of `NotificationPolicyArrayInput` via:
//
//	NotificationPolicyArray{ NotificationPolicyArgs{...} }
type NotificationPolicyArrayInput interface {
	pulumi.Input

	ToNotificationPolicyArrayOutput() NotificationPolicyArrayOutput
	ToNotificationPolicyArrayOutputWithContext(context.Context) NotificationPolicyArrayOutput
}

type NotificationPolicyArray []NotificationPolicyInput

func (NotificationPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NotificationPolicy)(nil)).Elem()
}

func (i NotificationPolicyArray) ToNotificationPolicyArrayOutput() NotificationPolicyArrayOutput {
	return i.ToNotificationPolicyArrayOutputWithContext(context.Background())
}

func (i NotificationPolicyArray) ToNotificationPolicyArrayOutputWithContext(ctx context.Context) NotificationPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyArrayOutput)
}

// NotificationPolicyMapInput is an input type that accepts NotificationPolicyMap and NotificationPolicyMapOutput values.
// You can construct a concrete instance of `NotificationPolicyMapInput` via:
//
//	NotificationPolicyMap{ "key": NotificationPolicyArgs{...} }
type NotificationPolicyMapInput interface {
	pulumi.Input

	ToNotificationPolicyMapOutput() NotificationPolicyMapOutput
	ToNotificationPolicyMapOutputWithContext(context.Context) NotificationPolicyMapOutput
}

type NotificationPolicyMap map[string]NotificationPolicyInput

func (NotificationPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NotificationPolicy)(nil)).Elem()
}

func (i NotificationPolicyMap) ToNotificationPolicyMapOutput() NotificationPolicyMapOutput {
	return i.ToNotificationPolicyMapOutputWithContext(context.Background())
}

func (i NotificationPolicyMap) ToNotificationPolicyMapOutputWithContext(ctx context.Context) NotificationPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyMapOutput)
}

type NotificationPolicyOutput struct{ *pulumi.OutputState }

func (NotificationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationPolicy)(nil)).Elem()
}

func (o NotificationPolicyOutput) ToNotificationPolicyOutput() NotificationPolicyOutput {
	return o
}

func (o NotificationPolicyOutput) ToNotificationPolicyOutputWithContext(ctx context.Context) NotificationPolicyOutput {
	return o
}

// Auto Restart Action of the policy. This is a block, structure is documented below.
func (o NotificationPolicyOutput) AutoCloseActions() NotificationPolicyAutoCloseActionArrayOutput {
	return o.ApplyT(func(v *NotificationPolicy) NotificationPolicyAutoCloseActionArrayOutput { return v.AutoCloseActions }).(NotificationPolicyAutoCloseActionArrayOutput)
}

// Auto Restart Action of the policy. This is a block, structure is documented below.
func (o NotificationPolicyOutput) AutoRestartActions() NotificationPolicyAutoRestartActionArrayOutput {
	return o.ApplyT(func(v *NotificationPolicy) NotificationPolicyAutoRestartActionArrayOutput {
		return v.AutoRestartActions
	}).(NotificationPolicyAutoRestartActionArrayOutput)
}

// Deduplication Action of the policy. This is a block, structure is documented below.
func (o NotificationPolicyOutput) DeDuplicationActions() NotificationPolicyDeDuplicationActionArrayOutput {
	return o.ApplyT(func(v *NotificationPolicy) NotificationPolicyDeDuplicationActionArrayOutput {
		return v.DeDuplicationActions
	}).(NotificationPolicyDeDuplicationActionArrayOutput)
}

// Delay notifications. This is a block, structure is documented below.
func (o NotificationPolicyOutput) DelayActions() NotificationPolicyDelayActionArrayOutput {
	return o.ApplyT(func(v *NotificationPolicy) NotificationPolicyDelayActionArrayOutput { return v.DelayActions }).(NotificationPolicyDelayActionArrayOutput)
}

// If policy should be enabled. Default: `true`
func (o NotificationPolicyOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NotificationPolicy) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// A notification filter which will be applied. This filter can be empty: `filter {}` - this means `match-all`. This is a block, structure is documented below.
func (o NotificationPolicyOutput) Filters() NotificationPolicyFilterArrayOutput {
	return o.ApplyT(func(v *NotificationPolicy) NotificationPolicyFilterArrayOutput { return v.Filters }).(NotificationPolicyFilterArrayOutput)
}

// Name of the notification policy
func (o NotificationPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NotificationPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Description of the policy. This can be max 512 characters.
func (o NotificationPolicyOutput) PolicyDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NotificationPolicy) pulumi.StringPtrOutput { return v.PolicyDescription }).(pulumi.StringPtrOutput)
}

// Suppress value of the policy. Values are: `true`, `false`. Default: `false`
func (o NotificationPolicyOutput) Suppress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NotificationPolicy) pulumi.BoolPtrOutput { return v.Suppress }).(pulumi.BoolPtrOutput)
}

// Id of team that this policy belons to.
func (o NotificationPolicyOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v *NotificationPolicy) pulumi.StringOutput { return v.TeamId }).(pulumi.StringOutput)
}

// Time restrictions specified in this field must be met for this policy to work. This is a block, structure is documented below.
func (o NotificationPolicyOutput) TimeRestrictions() NotificationPolicyTimeRestrictionArrayOutput {
	return o.ApplyT(func(v *NotificationPolicy) NotificationPolicyTimeRestrictionArrayOutput { return v.TimeRestrictions }).(NotificationPolicyTimeRestrictionArrayOutput)
}

type NotificationPolicyArrayOutput struct{ *pulumi.OutputState }

func (NotificationPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NotificationPolicy)(nil)).Elem()
}

func (o NotificationPolicyArrayOutput) ToNotificationPolicyArrayOutput() NotificationPolicyArrayOutput {
	return o
}

func (o NotificationPolicyArrayOutput) ToNotificationPolicyArrayOutputWithContext(ctx context.Context) NotificationPolicyArrayOutput {
	return o
}

func (o NotificationPolicyArrayOutput) Index(i pulumi.IntInput) NotificationPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NotificationPolicy {
		return vs[0].([]*NotificationPolicy)[vs[1].(int)]
	}).(NotificationPolicyOutput)
}

type NotificationPolicyMapOutput struct{ *pulumi.OutputState }

func (NotificationPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NotificationPolicy)(nil)).Elem()
}

func (o NotificationPolicyMapOutput) ToNotificationPolicyMapOutput() NotificationPolicyMapOutput {
	return o
}

func (o NotificationPolicyMapOutput) ToNotificationPolicyMapOutputWithContext(ctx context.Context) NotificationPolicyMapOutput {
	return o
}

func (o NotificationPolicyMapOutput) MapIndex(k pulumi.StringInput) NotificationPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NotificationPolicy {
		return vs[0].(map[string]*NotificationPolicy)[vs[1].(string)]
	}).(NotificationPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyInput)(nil)).Elem(), &NotificationPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyArrayInput)(nil)).Elem(), NotificationPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyMapInput)(nil)).Elem(), NotificationPolicyMap{})
	pulumi.RegisterOutputType(NotificationPolicyOutput{})
	pulumi.RegisterOutputType(NotificationPolicyArrayOutput{})
	pulumi.RegisterOutputType(NotificationPolicyMapOutput{})
}
