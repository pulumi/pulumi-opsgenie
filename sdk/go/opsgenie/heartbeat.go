// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package opsgenie

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages heartbeat within Opsgenie.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-opsgenie/sdk/go/opsgenie/"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := opsgenie.NewHeartbeat(ctx, "test", &opsgenie.HeartbeatArgs{
// 			AlertMessage:  pulumi.String("Test"),
// 			AlertPriority: pulumi.String("P3"),
// 			AlertTags: pulumi.StringArray{
// 				pulumi.String("test"),
// 				pulumi.String("fahri"),
// 			},
// 			Description:  pulumi.String("test opsgenie heartbeat terraform"),
// 			Enabled:      pulumi.Bool(false),
// 			Interval:     pulumi.Int(10),
// 			IntervalUnit: pulumi.String("minutes"),
// 			OwnerTeamId:  pulumi.Any(opsgenie_team.Test.Id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Heartbeat Integrations can be imported using the `name`, e.g.
//
// ```sh
//  $ pulumi import opsgenie:index/heartbeat:Heartbeat test geniehearbeat-%s`
// ```
type Heartbeat struct {
	pulumi.CustomResourceState

	// Specifies the alert message for heartbeat expiration alert. If this is not provided, default alert message is "HeartbeatName is expired".
	AlertMessage pulumi.StringPtrOutput `pulumi:"alertMessage"`
	// Specifies the alert priority for heartbeat expiration alert. If this is not provided, default priority is P3.
	AlertPriority pulumi.StringPtrOutput `pulumi:"alertPriority"`
	// Specifies the alert tags for heartbeat expiration alert.
	AlertTags pulumi.StringArrayOutput `pulumi:"alertTags"`
	// An optional description of the heartbeat
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Enable/disable heartbeat monitoring.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Specifies how often a heartbeat message should be expected.
	Interval pulumi.IntOutput `pulumi:"interval"`
	// Interval specified as minutes, hours or days.
	IntervalUnit pulumi.StringOutput `pulumi:"intervalUnit"`
	// Name of the heartbeat
	Name pulumi.StringOutput `pulumi:"name"`
	// Owner team of the heartbeat.
	OwnerTeamId pulumi.StringPtrOutput `pulumi:"ownerTeamId"`
}

// NewHeartbeat registers a new resource with the given unique name, arguments, and options.
func NewHeartbeat(ctx *pulumi.Context,
	name string, args *HeartbeatArgs, opts ...pulumi.ResourceOption) (*Heartbeat, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.Interval == nil {
		return nil, errors.New("invalid value for required argument 'Interval'")
	}
	if args.IntervalUnit == nil {
		return nil, errors.New("invalid value for required argument 'IntervalUnit'")
	}
	var resource Heartbeat
	err := ctx.RegisterResource("opsgenie:index/heartbeat:Heartbeat", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHeartbeat gets an existing Heartbeat resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHeartbeat(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HeartbeatState, opts ...pulumi.ResourceOption) (*Heartbeat, error) {
	var resource Heartbeat
	err := ctx.ReadResource("opsgenie:index/heartbeat:Heartbeat", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Heartbeat resources.
type heartbeatState struct {
	// Specifies the alert message for heartbeat expiration alert. If this is not provided, default alert message is "HeartbeatName is expired".
	AlertMessage *string `pulumi:"alertMessage"`
	// Specifies the alert priority for heartbeat expiration alert. If this is not provided, default priority is P3.
	AlertPriority *string `pulumi:"alertPriority"`
	// Specifies the alert tags for heartbeat expiration alert.
	AlertTags []string `pulumi:"alertTags"`
	// An optional description of the heartbeat
	Description *string `pulumi:"description"`
	// Enable/disable heartbeat monitoring.
	Enabled *bool `pulumi:"enabled"`
	// Specifies how often a heartbeat message should be expected.
	Interval *int `pulumi:"interval"`
	// Interval specified as minutes, hours or days.
	IntervalUnit *string `pulumi:"intervalUnit"`
	// Name of the heartbeat
	Name *string `pulumi:"name"`
	// Owner team of the heartbeat.
	OwnerTeamId *string `pulumi:"ownerTeamId"`
}

type HeartbeatState struct {
	// Specifies the alert message for heartbeat expiration alert. If this is not provided, default alert message is "HeartbeatName is expired".
	AlertMessage pulumi.StringPtrInput
	// Specifies the alert priority for heartbeat expiration alert. If this is not provided, default priority is P3.
	AlertPriority pulumi.StringPtrInput
	// Specifies the alert tags for heartbeat expiration alert.
	AlertTags pulumi.StringArrayInput
	// An optional description of the heartbeat
	Description pulumi.StringPtrInput
	// Enable/disable heartbeat monitoring.
	Enabled pulumi.BoolPtrInput
	// Specifies how often a heartbeat message should be expected.
	Interval pulumi.IntPtrInput
	// Interval specified as minutes, hours or days.
	IntervalUnit pulumi.StringPtrInput
	// Name of the heartbeat
	Name pulumi.StringPtrInput
	// Owner team of the heartbeat.
	OwnerTeamId pulumi.StringPtrInput
}

func (HeartbeatState) ElementType() reflect.Type {
	return reflect.TypeOf((*heartbeatState)(nil)).Elem()
}

type heartbeatArgs struct {
	// Specifies the alert message for heartbeat expiration alert. If this is not provided, default alert message is "HeartbeatName is expired".
	AlertMessage *string `pulumi:"alertMessage"`
	// Specifies the alert priority for heartbeat expiration alert. If this is not provided, default priority is P3.
	AlertPriority *string `pulumi:"alertPriority"`
	// Specifies the alert tags for heartbeat expiration alert.
	AlertTags []string `pulumi:"alertTags"`
	// An optional description of the heartbeat
	Description *string `pulumi:"description"`
	// Enable/disable heartbeat monitoring.
	Enabled bool `pulumi:"enabled"`
	// Specifies how often a heartbeat message should be expected.
	Interval int `pulumi:"interval"`
	// Interval specified as minutes, hours or days.
	IntervalUnit string `pulumi:"intervalUnit"`
	// Name of the heartbeat
	Name *string `pulumi:"name"`
	// Owner team of the heartbeat.
	OwnerTeamId *string `pulumi:"ownerTeamId"`
}

// The set of arguments for constructing a Heartbeat resource.
type HeartbeatArgs struct {
	// Specifies the alert message for heartbeat expiration alert. If this is not provided, default alert message is "HeartbeatName is expired".
	AlertMessage pulumi.StringPtrInput
	// Specifies the alert priority for heartbeat expiration alert. If this is not provided, default priority is P3.
	AlertPriority pulumi.StringPtrInput
	// Specifies the alert tags for heartbeat expiration alert.
	AlertTags pulumi.StringArrayInput
	// An optional description of the heartbeat
	Description pulumi.StringPtrInput
	// Enable/disable heartbeat monitoring.
	Enabled pulumi.BoolInput
	// Specifies how often a heartbeat message should be expected.
	Interval pulumi.IntInput
	// Interval specified as minutes, hours or days.
	IntervalUnit pulumi.StringInput
	// Name of the heartbeat
	Name pulumi.StringPtrInput
	// Owner team of the heartbeat.
	OwnerTeamId pulumi.StringPtrInput
}

func (HeartbeatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*heartbeatArgs)(nil)).Elem()
}

type HeartbeatInput interface {
	pulumi.Input

	ToHeartbeatOutput() HeartbeatOutput
	ToHeartbeatOutputWithContext(ctx context.Context) HeartbeatOutput
}

func (*Heartbeat) ElementType() reflect.Type {
	return reflect.TypeOf((*Heartbeat)(nil))
}

func (i *Heartbeat) ToHeartbeatOutput() HeartbeatOutput {
	return i.ToHeartbeatOutputWithContext(context.Background())
}

func (i *Heartbeat) ToHeartbeatOutputWithContext(ctx context.Context) HeartbeatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeartbeatOutput)
}

type HeartbeatOutput struct {
	*pulumi.OutputState
}

func (HeartbeatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Heartbeat)(nil))
}

func (o HeartbeatOutput) ToHeartbeatOutput() HeartbeatOutput {
	return o
}

func (o HeartbeatOutput) ToHeartbeatOutputWithContext(ctx context.Context) HeartbeatOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(HeartbeatOutput{})
}
