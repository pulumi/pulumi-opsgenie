// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opsgenie

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-opsgenie/sdk/go/opsgenie/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type AlertPolicyFilter struct {
	// Conditions applied to filter. This is a block, structure is documented below.
	Conditions []AlertPolicyFilterCondition `pulumi:"conditions"`
	// A filter type, supported types are: `match-all`, `match-any-condition`, `match-all-conditions`. Default: `match-all`
	Type *string `pulumi:"type"`
}

// AlertPolicyFilterInput is an input type that accepts AlertPolicyFilterArgs and AlertPolicyFilterOutput values.
// You can construct a concrete instance of `AlertPolicyFilterInput` via:
//
//	AlertPolicyFilterArgs{...}
type AlertPolicyFilterInput interface {
	pulumi.Input

	ToAlertPolicyFilterOutput() AlertPolicyFilterOutput
	ToAlertPolicyFilterOutputWithContext(context.Context) AlertPolicyFilterOutput
}

type AlertPolicyFilterArgs struct {
	// Conditions applied to filter. This is a block, structure is documented below.
	Conditions AlertPolicyFilterConditionArrayInput `pulumi:"conditions"`
	// A filter type, supported types are: `match-all`, `match-any-condition`, `match-all-conditions`. Default: `match-all`
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (AlertPolicyFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertPolicyFilter)(nil)).Elem()
}

func (i AlertPolicyFilterArgs) ToAlertPolicyFilterOutput() AlertPolicyFilterOutput {
	return i.ToAlertPolicyFilterOutputWithContext(context.Background())
}

func (i AlertPolicyFilterArgs) ToAlertPolicyFilterOutputWithContext(ctx context.Context) AlertPolicyFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertPolicyFilterOutput)
}

// AlertPolicyFilterArrayInput is an input type that accepts AlertPolicyFilterArray and AlertPolicyFilterArrayOutput values.
// You can construct a concrete instance of `AlertPolicyFilterArrayInput` via:
//
//	AlertPolicyFilterArray{ AlertPolicyFilterArgs{...} }
type AlertPolicyFilterArrayInput interface {
	pulumi.Input

	ToAlertPolicyFilterArrayOutput() AlertPolicyFilterArrayOutput
	ToAlertPolicyFilterArrayOutputWithContext(context.Context) AlertPolicyFilterArrayOutput
}

type AlertPolicyFilterArray []AlertPolicyFilterInput

func (AlertPolicyFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertPolicyFilter)(nil)).Elem()
}

func (i AlertPolicyFilterArray) ToAlertPolicyFilterArrayOutput() AlertPolicyFilterArrayOutput {
	return i.ToAlertPolicyFilterArrayOutputWithContext(context.Background())
}

func (i AlertPolicyFilterArray) ToAlertPolicyFilterArrayOutputWithContext(ctx context.Context) AlertPolicyFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertPolicyFilterArrayOutput)
}

type AlertPolicyFilterOutput struct{ *pulumi.OutputState }

func (AlertPolicyFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertPolicyFilter)(nil)).Elem()
}

func (o AlertPolicyFilterOutput) ToAlertPolicyFilterOutput() AlertPolicyFilterOutput {
	return o
}

func (o AlertPolicyFilterOutput) ToAlertPolicyFilterOutputWithContext(ctx context.Context) AlertPolicyFilterOutput {
	return o
}

// Conditions applied to filter. This is a block, structure is documented below.
func (o AlertPolicyFilterOutput) Conditions() AlertPolicyFilterConditionArrayOutput {
	return o.ApplyT(func(v AlertPolicyFilter) []AlertPolicyFilterCondition { return v.Conditions }).(AlertPolicyFilterConditionArrayOutput)
}

// A filter type, supported types are: `match-all`, `match-any-condition`, `match-all-conditions`. Default: `match-all`
func (o AlertPolicyFilterOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertPolicyFilter) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type AlertPolicyFilterArrayOutput struct{ *pulumi.OutputState }

func (AlertPolicyFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertPolicyFilter)(nil)).Elem()
}

func (o AlertPolicyFilterArrayOutput) ToAlertPolicyFilterArrayOutput() AlertPolicyFilterArrayOutput {
	return o
}

func (o AlertPolicyFilterArrayOutput) ToAlertPolicyFilterArrayOutputWithContext(ctx context.Context) AlertPolicyFilterArrayOutput {
	return o
}

func (o AlertPolicyFilterArrayOutput) Index(i pulumi.IntInput) AlertPolicyFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertPolicyFilter {
		return vs[0].([]AlertPolicyFilter)[vs[1].(int)]
	}).(AlertPolicyFilterOutput)
}

type AlertPolicyFilterCondition struct {
	// User defined value that will be compared with alert field according to the operation. Default: empty string
	ExpectedValue *string `pulumi:"expectedValue"`
	// Specifies which alert field will be used in condition. Possible values are `message`, `alias`, `description`, `source`, `entity`, `tags`, `actions`, `details`, `extra-properties`, `responders`, `teams`, `priority`
	Field string `pulumi:"field"`
	// If `field` is set as extra-properties, key could be used for key-value pair
	Key *string `pulumi:"key"`
	// Indicates behaviour of the given operation. Default: `false`
	Not *bool `pulumi:"not"`
	// It is the operation that will be executed for the given field and key. Possible operations are `matches`, `contains`, `starts-with`, `ends-with`, `equals`, `contains-key`, `contains-value`, `greater-than`, `less-than`, `is-empty`, `equals-ignore-whitespace`.
	Operation string `pulumi:"operation"`
	// Order of the condition in conditions list
	Order *int `pulumi:"order"`
}

// AlertPolicyFilterConditionInput is an input type that accepts AlertPolicyFilterConditionArgs and AlertPolicyFilterConditionOutput values.
// You can construct a concrete instance of `AlertPolicyFilterConditionInput` via:
//
//	AlertPolicyFilterConditionArgs{...}
type AlertPolicyFilterConditionInput interface {
	pulumi.Input

	ToAlertPolicyFilterConditionOutput() AlertPolicyFilterConditionOutput
	ToAlertPolicyFilterConditionOutputWithContext(context.Context) AlertPolicyFilterConditionOutput
}

type AlertPolicyFilterConditionArgs struct {
	// User defined value that will be compared with alert field according to the operation. Default: empty string
	ExpectedValue pulumi.StringPtrInput `pulumi:"expectedValue"`
	// Specifies which alert field will be used in condition. Possible values are `message`, `alias`, `description`, `source`, `entity`, `tags`, `actions`, `details`, `extra-properties`, `responders`, `teams`, `priority`
	Field pulumi.StringInput `pulumi:"field"`
	// If `field` is set as extra-properties, key could be used for key-value pair
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Indicates behaviour of the given operation. Default: `false`
	Not pulumi.BoolPtrInput `pulumi:"not"`
	// It is the operation that will be executed for the given field and key. Possible operations are `matches`, `contains`, `starts-with`, `ends-with`, `equals`, `contains-key`, `contains-value`, `greater-than`, `less-than`, `is-empty`, `equals-ignore-whitespace`.
	Operation pulumi.StringInput `pulumi:"operation"`
	// Order of the condition in conditions list
	Order pulumi.IntPtrInput `pulumi:"order"`
}

func (AlertPolicyFilterConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertPolicyFilterCondition)(nil)).Elem()
}

func (i AlertPolicyFilterConditionArgs) ToAlertPolicyFilterConditionOutput() AlertPolicyFilterConditionOutput {
	return i.ToAlertPolicyFilterConditionOutputWithContext(context.Background())
}

func (i AlertPolicyFilterConditionArgs) ToAlertPolicyFilterConditionOutputWithContext(ctx context.Context) AlertPolicyFilterConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertPolicyFilterConditionOutput)
}

// AlertPolicyFilterConditionArrayInput is an input type that accepts AlertPolicyFilterConditionArray and AlertPolicyFilterConditionArrayOutput values.
// You can construct a concrete instance of `AlertPolicyFilterConditionArrayInput` via:
//
//	AlertPolicyFilterConditionArray{ AlertPolicyFilterConditionArgs{...} }
type AlertPolicyFilterConditionArrayInput interface {
	pulumi.Input

	ToAlertPolicyFilterConditionArrayOutput() AlertPolicyFilterConditionArrayOutput
	ToAlertPolicyFilterConditionArrayOutputWithContext(context.Context) AlertPolicyFilterConditionArrayOutput
}

type AlertPolicyFilterConditionArray []AlertPolicyFilterConditionInput

func (AlertPolicyFilterConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertPolicyFilterCondition)(nil)).Elem()
}

func (i AlertPolicyFilterConditionArray) ToAlertPolicyFilterConditionArrayOutput() AlertPolicyFilterConditionArrayOutput {
	return i.ToAlertPolicyFilterConditionArrayOutputWithContext(context.Background())
}

func (i AlertPolicyFilterConditionArray) ToAlertPolicyFilterConditionArrayOutputWithContext(ctx context.Context) AlertPolicyFilterConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertPolicyFilterConditionArrayOutput)
}

type AlertPolicyFilterConditionOutput struct{ *pulumi.OutputState }

func (AlertPolicyFilterConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertPolicyFilterCondition)(nil)).Elem()
}

func (o AlertPolicyFilterConditionOutput) ToAlertPolicyFilterConditionOutput() AlertPolicyFilterConditionOutput {
	return o
}

func (o AlertPolicyFilterConditionOutput) ToAlertPolicyFilterConditionOutputWithContext(ctx context.Context) AlertPolicyFilterConditionOutput {
	return o
}

// User defined value that will be compared with alert field according to the operation. Default: empty string
func (o AlertPolicyFilterConditionOutput) ExpectedValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertPolicyFilterCondition) *string { return v.ExpectedValue }).(pulumi.StringPtrOutput)
}

// Specifies which alert field will be used in condition. Possible values are `message`, `alias`, `description`, `source`, `entity`, `tags`, `actions`, `details`, `extra-properties`, `responders`, `teams`, `priority`
func (o AlertPolicyFilterConditionOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v AlertPolicyFilterCondition) string { return v.Field }).(pulumi.StringOutput)
}

// If `field` is set as extra-properties, key could be used for key-value pair
func (o AlertPolicyFilterConditionOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertPolicyFilterCondition) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Indicates behaviour of the given operation. Default: `false`
func (o AlertPolicyFilterConditionOutput) Not() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertPolicyFilterCondition) *bool { return v.Not }).(pulumi.BoolPtrOutput)
}

// It is the operation that will be executed for the given field and key. Possible operations are `matches`, `contains`, `starts-with`, `ends-with`, `equals`, `contains-key`, `contains-value`, `greater-than`, `less-than`, `is-empty`, `equals-ignore-whitespace`.
func (o AlertPolicyFilterConditionOutput) Operation() pulumi.StringOutput {
	return o.ApplyT(func(v AlertPolicyFilterCondition) string { return v.Operation }).(pulumi.StringOutput)
}

// Order of the condition in conditions list
func (o AlertPolicyFilterConditionOutput) Order() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertPolicyFilterCondition) *int { return v.Order }).(pulumi.IntPtrOutput)
}

type AlertPolicyFilterConditionArrayOutput struct{ *pulumi.OutputState }

func (AlertPolicyFilterConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertPolicyFilterCondition)(nil)).Elem()
}

func (o AlertPolicyFilterConditionArrayOutput) ToAlertPolicyFilterConditionArrayOutput() AlertPolicyFilterConditionArrayOutput {
	return o
}

func (o AlertPolicyFilterConditionArrayOutput) ToAlertPolicyFilterConditionArrayOutputWithContext(ctx context.Context) AlertPolicyFilterConditionArrayOutput {
	return o
}

func (o AlertPolicyFilterConditionArrayOutput) Index(i pulumi.IntInput) AlertPolicyFilterConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertPolicyFilterCondition {
		return vs[0].([]AlertPolicyFilterCondition)[vs[1].(int)]
	}).(AlertPolicyFilterConditionOutput)
}

type AlertPolicyResponder struct {
	// ID of the responder
	Id string `pulumi:"id"`
	// Name of the responder
	Name *string `pulumi:"name"`
	// Type of responder. Acceptable values are: `user`, `team`, `escalation` or `schedule`
	Type string `pulumi:"type"`
	// Username of the responder
	Username *string `pulumi:"username"`
}

// AlertPolicyResponderInput is an input type that accepts AlertPolicyResponderArgs and AlertPolicyResponderOutput values.
// You can construct a concrete instance of `AlertPolicyResponderInput` via:
//
//	AlertPolicyResponderArgs{...}
type AlertPolicyResponderInput interface {
	pulumi.Input

	ToAlertPolicyResponderOutput() AlertPolicyResponderOutput
	ToAlertPolicyResponderOutputWithContext(context.Context) AlertPolicyResponderOutput
}

type AlertPolicyResponderArgs struct {
	// ID of the responder
	Id pulumi.StringInput `pulumi:"id"`
	// Name of the responder
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Type of responder. Acceptable values are: `user`, `team`, `escalation` or `schedule`
	Type pulumi.StringInput `pulumi:"type"`
	// Username of the responder
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (AlertPolicyResponderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertPolicyResponder)(nil)).Elem()
}

func (i AlertPolicyResponderArgs) ToAlertPolicyResponderOutput() AlertPolicyResponderOutput {
	return i.ToAlertPolicyResponderOutputWithContext(context.Background())
}

func (i AlertPolicyResponderArgs) ToAlertPolicyResponderOutputWithContext(ctx context.Context) AlertPolicyResponderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertPolicyResponderOutput)
}

// AlertPolicyResponderArrayInput is an input type that accepts AlertPolicyResponderArray and AlertPolicyResponderArrayOutput values.
// You can construct a concrete instance of `AlertPolicyResponderArrayInput` via:
//
//	AlertPolicyResponderArray{ AlertPolicyResponderArgs{...} }
type AlertPolicyResponderArrayInput interface {
	pulumi.Input

	ToAlertPolicyResponderArrayOutput() AlertPolicyResponderArrayOutput
	ToAlertPolicyResponderArrayOutputWithContext(context.Context) AlertPolicyResponderArrayOutput
}

type AlertPolicyResponderArray []AlertPolicyResponderInput

func (AlertPolicyResponderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertPolicyResponder)(nil)).Elem()
}

func (i AlertPolicyResponderArray) ToAlertPolicyResponderArrayOutput() AlertPolicyResponderArrayOutput {
	return i.ToAlertPolicyResponderArrayOutputWithContext(context.Background())
}

func (i AlertPolicyResponderArray) ToAlertPolicyResponderArrayOutputWithContext(ctx context.Context) AlertPolicyResponderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertPolicyResponderArrayOutput)
}

type AlertPolicyResponderOutput struct{ *pulumi.OutputState }

func (AlertPolicyResponderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertPolicyResponder)(nil)).Elem()
}

func (o AlertPolicyResponderOutput) ToAlertPolicyResponderOutput() AlertPolicyResponderOutput {
	return o
}

func (o AlertPolicyResponderOutput) ToAlertPolicyResponderOutputWithContext(ctx context.Context) AlertPolicyResponderOutput {
	return o
}

// ID of the responder
func (o AlertPolicyResponderOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v AlertPolicyResponder) string { return v.Id }).(pulumi.StringOutput)
}

// Name of the responder
func (o AlertPolicyResponderOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertPolicyResponder) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Type of responder. Acceptable values are: `user`, `team`, `escalation` or `schedule`
func (o AlertPolicyResponderOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AlertPolicyResponder) string { return v.Type }).(pulumi.StringOutput)
}

// Username of the responder
func (o AlertPolicyResponderOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertPolicyResponder) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type AlertPolicyResponderArrayOutput struct{ *pulumi.OutputState }

func (AlertPolicyResponderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertPolicyResponder)(nil)).Elem()
}

func (o AlertPolicyResponderArrayOutput) ToAlertPolicyResponderArrayOutput() AlertPolicyResponderArrayOutput {
	return o
}

func (o AlertPolicyResponderArrayOutput) ToAlertPolicyResponderArrayOutputWithContext(ctx context.Context) AlertPolicyResponderArrayOutput {
	return o
}

func (o AlertPolicyResponderArrayOutput) Index(i pulumi.IntInput) AlertPolicyResponderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertPolicyResponder {
		return vs[0].([]AlertPolicyResponder)[vs[1].(int)]
	}).(AlertPolicyResponderOutput)
}

type AlertPolicyTimeRestriction struct {
	// A definition of hourly definition applied daily, this has to be used with combination: type = `time-of-day`. This is a block, structure is documented below.
	Restriction []AlertPolicyTimeRestrictionRestriction `pulumi:"restriction"`
	// List of days and hours definitions for field type = `weekday-and-time-of-day`. This is a block, structure is documented below.
	RestrictionList []AlertPolicyTimeRestrictionRestrictionList `pulumi:"restrictionList"`
	// Defines if restriction should apply daily on given hours or on certain days and hours. Possible values are: `time-of-day`, `weekday-and-time-of-day`
	Type string `pulumi:"type"`
}

// AlertPolicyTimeRestrictionInput is an input type that accepts AlertPolicyTimeRestrictionArgs and AlertPolicyTimeRestrictionOutput values.
// You can construct a concrete instance of `AlertPolicyTimeRestrictionInput` via:
//
//	AlertPolicyTimeRestrictionArgs{...}
type AlertPolicyTimeRestrictionInput interface {
	pulumi.Input

	ToAlertPolicyTimeRestrictionOutput() AlertPolicyTimeRestrictionOutput
	ToAlertPolicyTimeRestrictionOutputWithContext(context.Context) AlertPolicyTimeRestrictionOutput
}

type AlertPolicyTimeRestrictionArgs struct {
	// A definition of hourly definition applied daily, this has to be used with combination: type = `time-of-day`. This is a block, structure is documented below.
	Restriction AlertPolicyTimeRestrictionRestrictionArrayInput `pulumi:"restriction"`
	// List of days and hours definitions for field type = `weekday-and-time-of-day`. This is a block, structure is documented below.
	RestrictionList AlertPolicyTimeRestrictionRestrictionListArrayInput `pulumi:"restrictionList"`
	// Defines if restriction should apply daily on given hours or on certain days and hours. Possible values are: `time-of-day`, `weekday-and-time-of-day`
	Type pulumi.StringInput `pulumi:"type"`
}

func (AlertPolicyTimeRestrictionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertPolicyTimeRestriction)(nil)).Elem()
}

func (i AlertPolicyTimeRestrictionArgs) ToAlertPolicyTimeRestrictionOutput() AlertPolicyTimeRestrictionOutput {
	return i.ToAlertPolicyTimeRestrictionOutputWithContext(context.Background())
}

func (i AlertPolicyTimeRestrictionArgs) ToAlertPolicyTimeRestrictionOutputWithContext(ctx context.Context) AlertPolicyTimeRestrictionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertPolicyTimeRestrictionOutput)
}

// AlertPolicyTimeRestrictionArrayInput is an input type that accepts AlertPolicyTimeRestrictionArray and AlertPolicyTimeRestrictionArrayOutput values.
// You can construct a concrete instance of `AlertPolicyTimeRestrictionArrayInput` via:
//
//	AlertPolicyTimeRestrictionArray{ AlertPolicyTimeRestrictionArgs{...} }
type AlertPolicyTimeRestrictionArrayInput interface {
	pulumi.Input

	ToAlertPolicyTimeRestrictionArrayOutput() AlertPolicyTimeRestrictionArrayOutput
	ToAlertPolicyTimeRestrictionArrayOutputWithContext(context.Context) AlertPolicyTimeRestrictionArrayOutput
}

type AlertPolicyTimeRestrictionArray []AlertPolicyTimeRestrictionInput

func (AlertPolicyTimeRestrictionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertPolicyTimeRestriction)(nil)).Elem()
}

func (i AlertPolicyTimeRestrictionArray) ToAlertPolicyTimeRestrictionArrayOutput() AlertPolicyTimeRestrictionArrayOutput {
	return i.ToAlertPolicyTimeRestrictionArrayOutputWithContext(context.Background())
}

func (i AlertPolicyTimeRestrictionArray) ToAlertPolicyTimeRestrictionArrayOutputWithContext(ctx context.Context) AlertPolicyTimeRestrictionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertPolicyTimeRestrictionArrayOutput)
}

type AlertPolicyTimeRestrictionOutput struct{ *pulumi.OutputState }

func (AlertPolicyTimeRestrictionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertPolicyTimeRestriction)(nil)).Elem()
}

func (o AlertPolicyTimeRestrictionOutput) ToAlertPolicyTimeRestrictionOutput() AlertPolicyTimeRestrictionOutput {
	return o
}

func (o AlertPolicyTimeRestrictionOutput) ToAlertPolicyTimeRestrictionOutputWithContext(ctx context.Context) AlertPolicyTimeRestrictionOutput {
	return o
}

// A definition of hourly definition applied daily, this has to be used with combination: type = `time-of-day`. This is a block, structure is documented below.
func (o AlertPolicyTimeRestrictionOutput) Restriction() AlertPolicyTimeRestrictionRestrictionArrayOutput {
	return o.ApplyT(func(v AlertPolicyTimeRestriction) []AlertPolicyTimeRestrictionRestriction { return v.Restriction }).(AlertPolicyTimeRestrictionRestrictionArrayOutput)
}

// List of days and hours definitions for field type = `weekday-and-time-of-day`. This is a block, structure is documented below.
func (o AlertPolicyTimeRestrictionOutput) RestrictionList() AlertPolicyTimeRestrictionRestrictionListArrayOutput {
	return o.ApplyT(func(v AlertPolicyTimeRestriction) []AlertPolicyTimeRestrictionRestrictionList {
		return v.RestrictionList
	}).(AlertPolicyTimeRestrictionRestrictionListArrayOutput)
}

// Defines if restriction should apply daily on given hours or on certain days and hours. Possible values are: `time-of-day`, `weekday-and-time-of-day`
func (o AlertPolicyTimeRestrictionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AlertPolicyTimeRestriction) string { return v.Type }).(pulumi.StringOutput)
}

type AlertPolicyTimeRestrictionArrayOutput struct{ *pulumi.OutputState }

func (AlertPolicyTimeRestrictionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertPolicyTimeRestriction)(nil)).Elem()
}

func (o AlertPolicyTimeRestrictionArrayOutput) ToAlertPolicyTimeRestrictionArrayOutput() AlertPolicyTimeRestrictionArrayOutput {
	return o
}

func (o AlertPolicyTimeRestrictionArrayOutput) ToAlertPolicyTimeRestrictionArrayOutputWithContext(ctx context.Context) AlertPolicyTimeRestrictionArrayOutput {
	return o
}

func (o AlertPolicyTimeRestrictionArrayOutput) Index(i pulumi.IntInput) AlertPolicyTimeRestrictionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertPolicyTimeRestriction {
		return vs[0].([]AlertPolicyTimeRestriction)[vs[1].(int)]
	}).(AlertPolicyTimeRestrictionOutput)
}

type AlertPolicyTimeRestrictionRestriction struct {
	// Ending hour of restriction.
	EndHour int `pulumi:"endHour"`
	// Ending minute of restriction on defined `endHour`
	EndMin int `pulumi:"endMin"`
	// Starting hour of restriction.
	StartHour int `pulumi:"startHour"`
	// Staring minute of restriction on defined `startHour`
	StartMin int `pulumi:"startMin"`
}

// AlertPolicyTimeRestrictionRestrictionInput is an input type that accepts AlertPolicyTimeRestrictionRestrictionArgs and AlertPolicyTimeRestrictionRestrictionOutput values.
// You can construct a concrete instance of `AlertPolicyTimeRestrictionRestrictionInput` via:
//
//	AlertPolicyTimeRestrictionRestrictionArgs{...}
type AlertPolicyTimeRestrictionRestrictionInput interface {
	pulumi.Input

	ToAlertPolicyTimeRestrictionRestrictionOutput() AlertPolicyTimeRestrictionRestrictionOutput
	ToAlertPolicyTimeRestrictionRestrictionOutputWithContext(context.Context) AlertPolicyTimeRestrictionRestrictionOutput
}

type AlertPolicyTimeRestrictionRestrictionArgs struct {
	// Ending hour of restriction.
	EndHour pulumi.IntInput `pulumi:"endHour"`
	// Ending minute of restriction on defined `endHour`
	EndMin pulumi.IntInput `pulumi:"endMin"`
	// Starting hour of restriction.
	StartHour pulumi.IntInput `pulumi:"startHour"`
	// Staring minute of restriction on defined `startHour`
	StartMin pulumi.IntInput `pulumi:"startMin"`
}

func (AlertPolicyTimeRestrictionRestrictionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertPolicyTimeRestrictionRestriction)(nil)).Elem()
}

func (i AlertPolicyTimeRestrictionRestrictionArgs) ToAlertPolicyTimeRestrictionRestrictionOutput() AlertPolicyTimeRestrictionRestrictionOutput {
	return i.ToAlertPolicyTimeRestrictionRestrictionOutputWithContext(context.Background())
}

func (i AlertPolicyTimeRestrictionRestrictionArgs) ToAlertPolicyTimeRestrictionRestrictionOutputWithContext(ctx context.Context) AlertPolicyTimeRestrictionRestrictionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertPolicyTimeRestrictionRestrictionOutput)
}

// AlertPolicyTimeRestrictionRestrictionArrayInput is an input type that accepts AlertPolicyTimeRestrictionRestrictionArray and AlertPolicyTimeRestrictionRestrictionArrayOutput values.
// You can construct a concrete instance of `AlertPolicyTimeRestrictionRestrictionArrayInput` via:
//
//	AlertPolicyTimeRestrictionRestrictionArray{ AlertPolicyTimeRestrictionRestrictionArgs{...} }
type AlertPolicyTimeRestrictionRestrictionArrayInput interface {
	pulumi.Input

	ToAlertPolicyTimeRestrictionRestrictionArrayOutput() AlertPolicyTimeRestrictionRestrictionArrayOutput
	ToAlertPolicyTimeRestrictionRestrictionArrayOutputWithContext(context.Context) AlertPolicyTimeRestrictionRestrictionArrayOutput
}

type AlertPolicyTimeRestrictionRestrictionArray []AlertPolicyTimeRestrictionRestrictionInput

func (AlertPolicyTimeRestrictionRestrictionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertPolicyTimeRestrictionRestriction)(nil)).Elem()
}

func (i AlertPolicyTimeRestrictionRestrictionArray) ToAlertPolicyTimeRestrictionRestrictionArrayOutput() AlertPolicyTimeRestrictionRestrictionArrayOutput {
	return i.ToAlertPolicyTimeRestrictionRestrictionArrayOutputWithContext(context.Background())
}

func (i AlertPolicyTimeRestrictionRestrictionArray) ToAlertPolicyTimeRestrictionRestrictionArrayOutputWithContext(ctx context.Context) AlertPolicyTimeRestrictionRestrictionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertPolicyTimeRestrictionRestrictionArrayOutput)
}

type AlertPolicyTimeRestrictionRestrictionOutput struct{ *pulumi.OutputState }

func (AlertPolicyTimeRestrictionRestrictionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertPolicyTimeRestrictionRestriction)(nil)).Elem()
}

func (o AlertPolicyTimeRestrictionRestrictionOutput) ToAlertPolicyTimeRestrictionRestrictionOutput() AlertPolicyTimeRestrictionRestrictionOutput {
	return o
}

func (o AlertPolicyTimeRestrictionRestrictionOutput) ToAlertPolicyTimeRestrictionRestrictionOutputWithContext(ctx context.Context) AlertPolicyTimeRestrictionRestrictionOutput {
	return o
}

// Ending hour of restriction.
func (o AlertPolicyTimeRestrictionRestrictionOutput) EndHour() pulumi.IntOutput {
	return o.ApplyT(func(v AlertPolicyTimeRestrictionRestriction) int { return v.EndHour }).(pulumi.IntOutput)
}

// Ending minute of restriction on defined `endHour`
func (o AlertPolicyTimeRestrictionRestrictionOutput) EndMin() pulumi.IntOutput {
	return o.ApplyT(func(v AlertPolicyTimeRestrictionRestriction) int { return v.EndMin }).(pulumi.IntOutput)
}

// Starting hour of restriction.
func (o AlertPolicyTimeRestrictionRestrictionOutput) StartHour() pulumi.IntOutput {
	return o.ApplyT(func(v AlertPolicyTimeRestrictionRestriction) int { return v.StartHour }).(pulumi.IntOutput)
}

// Staring minute of restriction on defined `startHour`
func (o AlertPolicyTimeRestrictionRestrictionOutput) StartMin() pulumi.IntOutput {
	return o.ApplyT(func(v AlertPolicyTimeRestrictionRestriction) int { return v.StartMin }).(pulumi.IntOutput)
}

type AlertPolicyTimeRestrictionRestrictionArrayOutput struct{ *pulumi.OutputState }

func (AlertPolicyTimeRestrictionRestrictionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertPolicyTimeRestrictionRestriction)(nil)).Elem()
}

func (o AlertPolicyTimeRestrictionRestrictionArrayOutput) ToAlertPolicyTimeRestrictionRestrictionArrayOutput() AlertPolicyTimeRestrictionRestrictionArrayOutput {
	return o
}

func (o AlertPolicyTimeRestrictionRestrictionArrayOutput) ToAlertPolicyTimeRestrictionRestrictionArrayOutputWithContext(ctx context.Context) AlertPolicyTimeRestrictionRestrictionArrayOutput {
	return o
}

func (o AlertPolicyTimeRestrictionRestrictionArrayOutput) Index(i pulumi.IntInput) AlertPolicyTimeRestrictionRestrictionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertPolicyTimeRestrictionRestriction {
		return vs[0].([]AlertPolicyTimeRestrictionRestriction)[vs[1].(int)]
	}).(AlertPolicyTimeRestrictionRestrictionOutput)
}

type AlertPolicyTimeRestrictionRestrictionList struct {
	// Ending day of restriction (eg. `wednesday`)
	EndDay string `pulumi:"endDay"`
	// Ending hour of restriction on defined `endDay`
	EndHour int `pulumi:"endHour"`
	// Ending minute of restriction on defined `endHour`
	EndMin int `pulumi:"endMin"`
	// Starting day of restriction (eg. `monday`)
	StartDay string `pulumi:"startDay"`
	// Starting hour of restriction on defined `startDay`
	StartHour int `pulumi:"startHour"`
	// Staring minute of restriction on defined `startHour`
	StartMin int `pulumi:"startMin"`
}

// AlertPolicyTimeRestrictionRestrictionListInput is an input type that accepts AlertPolicyTimeRestrictionRestrictionListArgs and AlertPolicyTimeRestrictionRestrictionListOutput values.
// You can construct a concrete instance of `AlertPolicyTimeRestrictionRestrictionListInput` via:
//
//	AlertPolicyTimeRestrictionRestrictionListArgs{...}
type AlertPolicyTimeRestrictionRestrictionListInput interface {
	pulumi.Input

	ToAlertPolicyTimeRestrictionRestrictionListOutput() AlertPolicyTimeRestrictionRestrictionListOutput
	ToAlertPolicyTimeRestrictionRestrictionListOutputWithContext(context.Context) AlertPolicyTimeRestrictionRestrictionListOutput
}

type AlertPolicyTimeRestrictionRestrictionListArgs struct {
	// Ending day of restriction (eg. `wednesday`)
	EndDay pulumi.StringInput `pulumi:"endDay"`
	// Ending hour of restriction on defined `endDay`
	EndHour pulumi.IntInput `pulumi:"endHour"`
	// Ending minute of restriction on defined `endHour`
	EndMin pulumi.IntInput `pulumi:"endMin"`
	// Starting day of restriction (eg. `monday`)
	StartDay pulumi.StringInput `pulumi:"startDay"`
	// Starting hour of restriction on defined `startDay`
	StartHour pulumi.IntInput `pulumi:"startHour"`
	// Staring minute of restriction on defined `startHour`
	StartMin pulumi.IntInput `pulumi:"startMin"`
}

func (AlertPolicyTimeRestrictionRestrictionListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertPolicyTimeRestrictionRestrictionList)(nil)).Elem()
}

func (i AlertPolicyTimeRestrictionRestrictionListArgs) ToAlertPolicyTimeRestrictionRestrictionListOutput() AlertPolicyTimeRestrictionRestrictionListOutput {
	return i.ToAlertPolicyTimeRestrictionRestrictionListOutputWithContext(context.Background())
}

func (i AlertPolicyTimeRestrictionRestrictionListArgs) ToAlertPolicyTimeRestrictionRestrictionListOutputWithContext(ctx context.Context) AlertPolicyTimeRestrictionRestrictionListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertPolicyTimeRestrictionRestrictionListOutput)
}

// AlertPolicyTimeRestrictionRestrictionListArrayInput is an input type that accepts AlertPolicyTimeRestrictionRestrictionListArray and AlertPolicyTimeRestrictionRestrictionListArrayOutput values.
// You can construct a concrete instance of `AlertPolicyTimeRestrictionRestrictionListArrayInput` via:
//
//	AlertPolicyTimeRestrictionRestrictionListArray{ AlertPolicyTimeRestrictionRestrictionListArgs{...} }
type AlertPolicyTimeRestrictionRestrictionListArrayInput interface {
	pulumi.Input

	ToAlertPolicyTimeRestrictionRestrictionListArrayOutput() AlertPolicyTimeRestrictionRestrictionListArrayOutput
	ToAlertPolicyTimeRestrictionRestrictionListArrayOutputWithContext(context.Context) AlertPolicyTimeRestrictionRestrictionListArrayOutput
}

type AlertPolicyTimeRestrictionRestrictionListArray []AlertPolicyTimeRestrictionRestrictionListInput

func (AlertPolicyTimeRestrictionRestrictionListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertPolicyTimeRestrictionRestrictionList)(nil)).Elem()
}

func (i AlertPolicyTimeRestrictionRestrictionListArray) ToAlertPolicyTimeRestrictionRestrictionListArrayOutput() AlertPolicyTimeRestrictionRestrictionListArrayOutput {
	return i.ToAlertPolicyTimeRestrictionRestrictionListArrayOutputWithContext(context.Background())
}

func (i AlertPolicyTimeRestrictionRestrictionListArray) ToAlertPolicyTimeRestrictionRestrictionListArrayOutputWithContext(ctx context.Context) AlertPolicyTimeRestrictionRestrictionListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertPolicyTimeRestrictionRestrictionListArrayOutput)
}

type AlertPolicyTimeRestrictionRestrictionListOutput struct{ *pulumi.OutputState }

func (AlertPolicyTimeRestrictionRestrictionListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertPolicyTimeRestrictionRestrictionList)(nil)).Elem()
}

func (o AlertPolicyTimeRestrictionRestrictionListOutput) ToAlertPolicyTimeRestrictionRestrictionListOutput() AlertPolicyTimeRestrictionRestrictionListOutput {
	return o
}

func (o AlertPolicyTimeRestrictionRestrictionListOutput) ToAlertPolicyTimeRestrictionRestrictionListOutputWithContext(ctx context.Context) AlertPolicyTimeRestrictionRestrictionListOutput {
	return o
}

// Ending day of restriction (eg. `wednesday`)
func (o AlertPolicyTimeRestrictionRestrictionListOutput) EndDay() pulumi.StringOutput {
	return o.ApplyT(func(v AlertPolicyTimeRestrictionRestrictionList) string { return v.EndDay }).(pulumi.StringOutput)
}

// Ending hour of restriction on defined `endDay`
func (o AlertPolicyTimeRestrictionRestrictionListOutput) EndHour() pulumi.IntOutput {
	return o.ApplyT(func(v AlertPolicyTimeRestrictionRestrictionList) int { return v.EndHour }).(pulumi.IntOutput)
}

// Ending minute of restriction on defined `endHour`
func (o AlertPolicyTimeRestrictionRestrictionListOutput) EndMin() pulumi.IntOutput {
	return o.ApplyT(func(v AlertPolicyTimeRestrictionRestrictionList) int { return v.EndMin }).(pulumi.IntOutput)
}

// Starting day of restriction (eg. `monday`)
func (o AlertPolicyTimeRestrictionRestrictionListOutput) StartDay() pulumi.StringOutput {
	return o.ApplyT(func(v AlertPolicyTimeRestrictionRestrictionList) string { return v.StartDay }).(pulumi.StringOutput)
}

// Starting hour of restriction on defined `startDay`
func (o AlertPolicyTimeRestrictionRestrictionListOutput) StartHour() pulumi.IntOutput {
	return o.ApplyT(func(v AlertPolicyTimeRestrictionRestrictionList) int { return v.StartHour }).(pulumi.IntOutput)
}

// Staring minute of restriction on defined `startHour`
func (o AlertPolicyTimeRestrictionRestrictionListOutput) StartMin() pulumi.IntOutput {
	return o.ApplyT(func(v AlertPolicyTimeRestrictionRestrictionList) int { return v.StartMin }).(pulumi.IntOutput)
}

type AlertPolicyTimeRestrictionRestrictionListArrayOutput struct{ *pulumi.OutputState }

func (AlertPolicyTimeRestrictionRestrictionListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertPolicyTimeRestrictionRestrictionList)(nil)).Elem()
}

func (o AlertPolicyTimeRestrictionRestrictionListArrayOutput) ToAlertPolicyTimeRestrictionRestrictionListArrayOutput() AlertPolicyTimeRestrictionRestrictionListArrayOutput {
	return o
}

func (o AlertPolicyTimeRestrictionRestrictionListArrayOutput) ToAlertPolicyTimeRestrictionRestrictionListArrayOutputWithContext(ctx context.Context) AlertPolicyTimeRestrictionRestrictionListArrayOutput {
	return o
}

func (o AlertPolicyTimeRestrictionRestrictionListArrayOutput) Index(i pulumi.IntInput) AlertPolicyTimeRestrictionRestrictionListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertPolicyTimeRestrictionRestrictionList {
		return vs[0].([]AlertPolicyTimeRestrictionRestrictionList)[vs[1].(int)]
	}).(AlertPolicyTimeRestrictionRestrictionListOutput)
}

type ApiIntegrationResponder struct {
	// The id of the responder.
	Id *string `pulumi:"id"`
	// The responder type.
	Type *string `pulumi:"type"`
}

// ApiIntegrationResponderInput is an input type that accepts ApiIntegrationResponderArgs and ApiIntegrationResponderOutput values.
// You can construct a concrete instance of `ApiIntegrationResponderInput` via:
//
//	ApiIntegrationResponderArgs{...}
type ApiIntegrationResponderInput interface {
	pulumi.Input

	ToApiIntegrationResponderOutput() ApiIntegrationResponderOutput
	ToApiIntegrationResponderOutputWithContext(context.Context) ApiIntegrationResponderOutput
}

type ApiIntegrationResponderArgs struct {
	// The id of the responder.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The responder type.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ApiIntegrationResponderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiIntegrationResponder)(nil)).Elem()
}

func (i ApiIntegrationResponderArgs) ToApiIntegrationResponderOutput() ApiIntegrationResponderOutput {
	return i.ToApiIntegrationResponderOutputWithContext(context.Background())
}

func (i ApiIntegrationResponderArgs) ToApiIntegrationResponderOutputWithContext(ctx context.Context) ApiIntegrationResponderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiIntegrationResponderOutput)
}

// ApiIntegrationResponderArrayInput is an input type that accepts ApiIntegrationResponderArray and ApiIntegrationResponderArrayOutput values.
// You can construct a concrete instance of `ApiIntegrationResponderArrayInput` via:
//
//	ApiIntegrationResponderArray{ ApiIntegrationResponderArgs{...} }
type ApiIntegrationResponderArrayInput interface {
	pulumi.Input

	ToApiIntegrationResponderArrayOutput() ApiIntegrationResponderArrayOutput
	ToApiIntegrationResponderArrayOutputWithContext(context.Context) ApiIntegrationResponderArrayOutput
}

type ApiIntegrationResponderArray []ApiIntegrationResponderInput

func (ApiIntegrationResponderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApiIntegrationResponder)(nil)).Elem()
}

func (i ApiIntegrationResponderArray) ToApiIntegrationResponderArrayOutput() ApiIntegrationResponderArrayOutput {
	return i.ToApiIntegrationResponderArrayOutputWithContext(context.Background())
}

func (i ApiIntegrationResponderArray) ToApiIntegrationResponderArrayOutputWithContext(ctx context.Context) ApiIntegrationResponderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiIntegrationResponderArrayOutput)
}

type ApiIntegrationResponderOutput struct{ *pulumi.OutputState }

func (ApiIntegrationResponderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiIntegrationResponder)(nil)).Elem()
}

func (o ApiIntegrationResponderOutput) ToApiIntegrationResponderOutput() ApiIntegrationResponderOutput {
	return o
}

func (o ApiIntegrationResponderOutput) ToApiIntegrationResponderOutputWithContext(ctx context.Context) ApiIntegrationResponderOutput {
	return o
}

// The id of the responder.
func (o ApiIntegrationResponderOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiIntegrationResponder) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The responder type.
func (o ApiIntegrationResponderOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiIntegrationResponder) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ApiIntegrationResponderArrayOutput struct{ *pulumi.OutputState }

func (ApiIntegrationResponderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApiIntegrationResponder)(nil)).Elem()
}

func (o ApiIntegrationResponderArrayOutput) ToApiIntegrationResponderArrayOutput() ApiIntegrationResponderArrayOutput {
	return o
}

func (o ApiIntegrationResponderArrayOutput) ToApiIntegrationResponderArrayOutputWithContext(ctx context.Context) ApiIntegrationResponderArrayOutput {
	return o
}

func (o ApiIntegrationResponderArrayOutput) Index(i pulumi.IntInput) ApiIntegrationResponderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApiIntegrationResponder {
		return vs[0].([]ApiIntegrationResponder)[vs[1].(int)]
	}).(ApiIntegrationResponderOutput)
}

type EmailIntegrationResponder struct {
	// The id of the responder.
	Id *string `pulumi:"id"`
	// The responder type.
	Type *string `pulumi:"type"`
}

// EmailIntegrationResponderInput is an input type that accepts EmailIntegrationResponderArgs and EmailIntegrationResponderOutput values.
// You can construct a concrete instance of `EmailIntegrationResponderInput` via:
//
//	EmailIntegrationResponderArgs{...}
type EmailIntegrationResponderInput interface {
	pulumi.Input

	ToEmailIntegrationResponderOutput() EmailIntegrationResponderOutput
	ToEmailIntegrationResponderOutputWithContext(context.Context) EmailIntegrationResponderOutput
}

type EmailIntegrationResponderArgs struct {
	// The id of the responder.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The responder type.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (EmailIntegrationResponderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EmailIntegrationResponder)(nil)).Elem()
}

func (i EmailIntegrationResponderArgs) ToEmailIntegrationResponderOutput() EmailIntegrationResponderOutput {
	return i.ToEmailIntegrationResponderOutputWithContext(context.Background())
}

func (i EmailIntegrationResponderArgs) ToEmailIntegrationResponderOutputWithContext(ctx context.Context) EmailIntegrationResponderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailIntegrationResponderOutput)
}

// EmailIntegrationResponderArrayInput is an input type that accepts EmailIntegrationResponderArray and EmailIntegrationResponderArrayOutput values.
// You can construct a concrete instance of `EmailIntegrationResponderArrayInput` via:
//
//	EmailIntegrationResponderArray{ EmailIntegrationResponderArgs{...} }
type EmailIntegrationResponderArrayInput interface {
	pulumi.Input

	ToEmailIntegrationResponderArrayOutput() EmailIntegrationResponderArrayOutput
	ToEmailIntegrationResponderArrayOutputWithContext(context.Context) EmailIntegrationResponderArrayOutput
}

type EmailIntegrationResponderArray []EmailIntegrationResponderInput

func (EmailIntegrationResponderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EmailIntegrationResponder)(nil)).Elem()
}

func (i EmailIntegrationResponderArray) ToEmailIntegrationResponderArrayOutput() EmailIntegrationResponderArrayOutput {
	return i.ToEmailIntegrationResponderArrayOutputWithContext(context.Background())
}

func (i EmailIntegrationResponderArray) ToEmailIntegrationResponderArrayOutputWithContext(ctx context.Context) EmailIntegrationResponderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailIntegrationResponderArrayOutput)
}

type EmailIntegrationResponderOutput struct{ *pulumi.OutputState }

func (EmailIntegrationResponderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EmailIntegrationResponder)(nil)).Elem()
}

func (o EmailIntegrationResponderOutput) ToEmailIntegrationResponderOutput() EmailIntegrationResponderOutput {
	return o
}

func (o EmailIntegrationResponderOutput) ToEmailIntegrationResponderOutputWithContext(ctx context.Context) EmailIntegrationResponderOutput {
	return o
}

// The id of the responder.
func (o EmailIntegrationResponderOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EmailIntegrationResponder) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The responder type.
func (o EmailIntegrationResponderOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EmailIntegrationResponder) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type EmailIntegrationResponderArrayOutput struct{ *pulumi.OutputState }

func (EmailIntegrationResponderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EmailIntegrationResponder)(nil)).Elem()
}

func (o EmailIntegrationResponderArrayOutput) ToEmailIntegrationResponderArrayOutput() EmailIntegrationResponderArrayOutput {
	return o
}

func (o EmailIntegrationResponderArrayOutput) ToEmailIntegrationResponderArrayOutputWithContext(ctx context.Context) EmailIntegrationResponderArrayOutput {
	return o
}

func (o EmailIntegrationResponderArrayOutput) Index(i pulumi.IntInput) EmailIntegrationResponderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EmailIntegrationResponder {
		return vs[0].([]EmailIntegrationResponder)[vs[1].(int)]
	}).(EmailIntegrationResponderOutput)
}

type EscalationRepeat struct {
	CloseAlertAfterAll   *bool `pulumi:"closeAlertAfterAll"`
	Count                *int  `pulumi:"count"`
	ResetRecipientStates *bool `pulumi:"resetRecipientStates"`
	WaitInterval         *int  `pulumi:"waitInterval"`
}

// EscalationRepeatInput is an input type that accepts EscalationRepeatArgs and EscalationRepeatOutput values.
// You can construct a concrete instance of `EscalationRepeatInput` via:
//
//	EscalationRepeatArgs{...}
type EscalationRepeatInput interface {
	pulumi.Input

	ToEscalationRepeatOutput() EscalationRepeatOutput
	ToEscalationRepeatOutputWithContext(context.Context) EscalationRepeatOutput
}

type EscalationRepeatArgs struct {
	CloseAlertAfterAll   pulumi.BoolPtrInput `pulumi:"closeAlertAfterAll"`
	Count                pulumi.IntPtrInput  `pulumi:"count"`
	ResetRecipientStates pulumi.BoolPtrInput `pulumi:"resetRecipientStates"`
	WaitInterval         pulumi.IntPtrInput  `pulumi:"waitInterval"`
}

func (EscalationRepeatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EscalationRepeat)(nil)).Elem()
}

func (i EscalationRepeatArgs) ToEscalationRepeatOutput() EscalationRepeatOutput {
	return i.ToEscalationRepeatOutputWithContext(context.Background())
}

func (i EscalationRepeatArgs) ToEscalationRepeatOutputWithContext(ctx context.Context) EscalationRepeatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EscalationRepeatOutput)
}

// EscalationRepeatArrayInput is an input type that accepts EscalationRepeatArray and EscalationRepeatArrayOutput values.
// You can construct a concrete instance of `EscalationRepeatArrayInput` via:
//
//	EscalationRepeatArray{ EscalationRepeatArgs{...} }
type EscalationRepeatArrayInput interface {
	pulumi.Input

	ToEscalationRepeatArrayOutput() EscalationRepeatArrayOutput
	ToEscalationRepeatArrayOutputWithContext(context.Context) EscalationRepeatArrayOutput
}

type EscalationRepeatArray []EscalationRepeatInput

func (EscalationRepeatArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EscalationRepeat)(nil)).Elem()
}

func (i EscalationRepeatArray) ToEscalationRepeatArrayOutput() EscalationRepeatArrayOutput {
	return i.ToEscalationRepeatArrayOutputWithContext(context.Background())
}

func (i EscalationRepeatArray) ToEscalationRepeatArrayOutputWithContext(ctx context.Context) EscalationRepeatArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EscalationRepeatArrayOutput)
}

type EscalationRepeatOutput struct{ *pulumi.OutputState }

func (EscalationRepeatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EscalationRepeat)(nil)).Elem()
}

func (o EscalationRepeatOutput) ToEscalationRepeatOutput() EscalationRepeatOutput {
	return o
}

func (o EscalationRepeatOutput) ToEscalationRepeatOutputWithContext(ctx context.Context) EscalationRepeatOutput {
	return o
}

func (o EscalationRepeatOutput) CloseAlertAfterAll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EscalationRepeat) *bool { return v.CloseAlertAfterAll }).(pulumi.BoolPtrOutput)
}

func (o EscalationRepeatOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EscalationRepeat) *int { return v.Count }).(pulumi.IntPtrOutput)
}

func (o EscalationRepeatOutput) ResetRecipientStates() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EscalationRepeat) *bool { return v.ResetRecipientStates }).(pulumi.BoolPtrOutput)
}

func (o EscalationRepeatOutput) WaitInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EscalationRepeat) *int { return v.WaitInterval }).(pulumi.IntPtrOutput)
}

type EscalationRepeatArrayOutput struct{ *pulumi.OutputState }

func (EscalationRepeatArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EscalationRepeat)(nil)).Elem()
}

func (o EscalationRepeatArrayOutput) ToEscalationRepeatArrayOutput() EscalationRepeatArrayOutput {
	return o
}

func (o EscalationRepeatArrayOutput) ToEscalationRepeatArrayOutputWithContext(ctx context.Context) EscalationRepeatArrayOutput {
	return o
}

func (o EscalationRepeatArrayOutput) Index(i pulumi.IntInput) EscalationRepeatOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EscalationRepeat {
		return vs[0].([]EscalationRepeat)[vs[1].(int)]
	}).(EscalationRepeatOutput)
}

type EscalationRule struct {
	// The condition for notifying the recipient of escalation rule that is based on the alert state. Possible values are: `if-not-acked` and `if-not-closed`. Default: `if-not-acked`
	Condition string `pulumi:"condition"`
	// Time delay of the escalation rule, in minutes.
	Delay int `pulumi:"delay"`
	// Recipient calculation logic for schedules. Possible values are:
	NotifyType string `pulumi:"notifyType"`
	// Object of schedule, team, or users which will be notified in escalation. The possible values for participants are: `user`, `schedule`, `team`. There can only be one recipient per each `rules`.
	Recipients []EscalationRuleRecipient `pulumi:"recipients"`
}

// EscalationRuleInput is an input type that accepts EscalationRuleArgs and EscalationRuleOutput values.
// You can construct a concrete instance of `EscalationRuleInput` via:
//
//	EscalationRuleArgs{...}
type EscalationRuleInput interface {
	pulumi.Input

	ToEscalationRuleOutput() EscalationRuleOutput
	ToEscalationRuleOutputWithContext(context.Context) EscalationRuleOutput
}

type EscalationRuleArgs struct {
	// The condition for notifying the recipient of escalation rule that is based on the alert state. Possible values are: `if-not-acked` and `if-not-closed`. Default: `if-not-acked`
	Condition pulumi.StringInput `pulumi:"condition"`
	// Time delay of the escalation rule, in minutes.
	Delay pulumi.IntInput `pulumi:"delay"`
	// Recipient calculation logic for schedules. Possible values are:
	NotifyType pulumi.StringInput `pulumi:"notifyType"`
	// Object of schedule, team, or users which will be notified in escalation. The possible values for participants are: `user`, `schedule`, `team`. There can only be one recipient per each `rules`.
	Recipients EscalationRuleRecipientArrayInput `pulumi:"recipients"`
}

func (EscalationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EscalationRule)(nil)).Elem()
}

func (i EscalationRuleArgs) ToEscalationRuleOutput() EscalationRuleOutput {
	return i.ToEscalationRuleOutputWithContext(context.Background())
}

func (i EscalationRuleArgs) ToEscalationRuleOutputWithContext(ctx context.Context) EscalationRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EscalationRuleOutput)
}

// EscalationRuleArrayInput is an input type that accepts EscalationRuleArray and EscalationRuleArrayOutput values.
// You can construct a concrete instance of `EscalationRuleArrayInput` via:
//
//	EscalationRuleArray{ EscalationRuleArgs{...} }
type EscalationRuleArrayInput interface {
	pulumi.Input

	ToEscalationRuleArrayOutput() EscalationRuleArrayOutput
	ToEscalationRuleArrayOutputWithContext(context.Context) EscalationRuleArrayOutput
}

type EscalationRuleArray []EscalationRuleInput

func (EscalationRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EscalationRule)(nil)).Elem()
}

func (i EscalationRuleArray) ToEscalationRuleArrayOutput() EscalationRuleArrayOutput {
	return i.ToEscalationRuleArrayOutputWithContext(context.Background())
}

func (i EscalationRuleArray) ToEscalationRuleArrayOutputWithContext(ctx context.Context) EscalationRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EscalationRuleArrayOutput)
}

type EscalationRuleOutput struct{ *pulumi.OutputState }

func (EscalationRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EscalationRule)(nil)).Elem()
}

func (o EscalationRuleOutput) ToEscalationRuleOutput() EscalationRuleOutput {
	return o
}

func (o EscalationRuleOutput) ToEscalationRuleOutputWithContext(ctx context.Context) EscalationRuleOutput {
	return o
}

// The condition for notifying the recipient of escalation rule that is based on the alert state. Possible values are: `if-not-acked` and `if-not-closed`. Default: `if-not-acked`
func (o EscalationRuleOutput) Condition() pulumi.StringOutput {
	return o.ApplyT(func(v EscalationRule) string { return v.Condition }).(pulumi.StringOutput)
}

// Time delay of the escalation rule, in minutes.
func (o EscalationRuleOutput) Delay() pulumi.IntOutput {
	return o.ApplyT(func(v EscalationRule) int { return v.Delay }).(pulumi.IntOutput)
}

// Recipient calculation logic for schedules. Possible values are:
func (o EscalationRuleOutput) NotifyType() pulumi.StringOutput {
	return o.ApplyT(func(v EscalationRule) string { return v.NotifyType }).(pulumi.StringOutput)
}

// Object of schedule, team, or users which will be notified in escalation. The possible values for participants are: `user`, `schedule`, `team`. There can only be one recipient per each `rules`.
func (o EscalationRuleOutput) Recipients() EscalationRuleRecipientArrayOutput {
	return o.ApplyT(func(v EscalationRule) []EscalationRuleRecipient { return v.Recipients }).(EscalationRuleRecipientArrayOutput)
}

type EscalationRuleArrayOutput struct{ *pulumi.OutputState }

func (EscalationRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EscalationRule)(nil)).Elem()
}

func (o EscalationRuleArrayOutput) ToEscalationRuleArrayOutput() EscalationRuleArrayOutput {
	return o
}

func (o EscalationRuleArrayOutput) ToEscalationRuleArrayOutputWithContext(ctx context.Context) EscalationRuleArrayOutput {
	return o
}

func (o EscalationRuleArrayOutput) Index(i pulumi.IntInput) EscalationRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EscalationRule {
		return vs[0].([]EscalationRule)[vs[1].(int)]
	}).(EscalationRuleOutput)
}

type EscalationRuleRecipient struct {
	// The ID of the Opsgenie Escalation.
	Id   *string `pulumi:"id"`
	Type *string `pulumi:"type"`
}

// EscalationRuleRecipientInput is an input type that accepts EscalationRuleRecipientArgs and EscalationRuleRecipientOutput values.
// You can construct a concrete instance of `EscalationRuleRecipientInput` via:
//
//	EscalationRuleRecipientArgs{...}
type EscalationRuleRecipientInput interface {
	pulumi.Input

	ToEscalationRuleRecipientOutput() EscalationRuleRecipientOutput
	ToEscalationRuleRecipientOutputWithContext(context.Context) EscalationRuleRecipientOutput
}

type EscalationRuleRecipientArgs struct {
	// The ID of the Opsgenie Escalation.
	Id   pulumi.StringPtrInput `pulumi:"id"`
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (EscalationRuleRecipientArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EscalationRuleRecipient)(nil)).Elem()
}

func (i EscalationRuleRecipientArgs) ToEscalationRuleRecipientOutput() EscalationRuleRecipientOutput {
	return i.ToEscalationRuleRecipientOutputWithContext(context.Background())
}

func (i EscalationRuleRecipientArgs) ToEscalationRuleRecipientOutputWithContext(ctx context.Context) EscalationRuleRecipientOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EscalationRuleRecipientOutput)
}

// EscalationRuleRecipientArrayInput is an input type that accepts EscalationRuleRecipientArray and EscalationRuleRecipientArrayOutput values.
// You can construct a concrete instance of `EscalationRuleRecipientArrayInput` via:
//
//	EscalationRuleRecipientArray{ EscalationRuleRecipientArgs{...} }
type EscalationRuleRecipientArrayInput interface {
	pulumi.Input

	ToEscalationRuleRecipientArrayOutput() EscalationRuleRecipientArrayOutput
	ToEscalationRuleRecipientArrayOutputWithContext(context.Context) EscalationRuleRecipientArrayOutput
}

type EscalationRuleRecipientArray []EscalationRuleRecipientInput

func (EscalationRuleRecipientArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EscalationRuleRecipient)(nil)).Elem()
}

func (i EscalationRuleRecipientArray) ToEscalationRuleRecipientArrayOutput() EscalationRuleRecipientArrayOutput {
	return i.ToEscalationRuleRecipientArrayOutputWithContext(context.Background())
}

func (i EscalationRuleRecipientArray) ToEscalationRuleRecipientArrayOutputWithContext(ctx context.Context) EscalationRuleRecipientArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EscalationRuleRecipientArrayOutput)
}

type EscalationRuleRecipientOutput struct{ *pulumi.OutputState }

func (EscalationRuleRecipientOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EscalationRuleRecipient)(nil)).Elem()
}

func (o EscalationRuleRecipientOutput) ToEscalationRuleRecipientOutput() EscalationRuleRecipientOutput {
	return o
}

func (o EscalationRuleRecipientOutput) ToEscalationRuleRecipientOutputWithContext(ctx context.Context) EscalationRuleRecipientOutput {
	return o
}

// The ID of the Opsgenie Escalation.
func (o EscalationRuleRecipientOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EscalationRuleRecipient) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o EscalationRuleRecipientOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EscalationRuleRecipient) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type EscalationRuleRecipientArrayOutput struct{ *pulumi.OutputState }

func (EscalationRuleRecipientArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EscalationRuleRecipient)(nil)).Elem()
}

func (o EscalationRuleRecipientArrayOutput) ToEscalationRuleRecipientArrayOutput() EscalationRuleRecipientArrayOutput {
	return o
}

func (o EscalationRuleRecipientArrayOutput) ToEscalationRuleRecipientArrayOutputWithContext(ctx context.Context) EscalationRuleRecipientArrayOutput {
	return o
}

func (o EscalationRuleRecipientArrayOutput) Index(i pulumi.IntInput) EscalationRuleRecipientOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EscalationRuleRecipient {
		return vs[0].([]EscalationRuleRecipient)[vs[1].(int)]
	}).(EscalationRuleRecipientOutput)
}

type IncidentTemplateStakeholderProperty struct {
	// Description field of the incident template. This field must not be longer than 10000 characters.
	Description *string `pulumi:"description"`
	// Option to enable stakeholder notifications.Default value is true.
	Enable *bool `pulumi:"enable"`
	// Message of the related incident template. This field must not be longer than 130 characters.
	Message string `pulumi:"message"`
}

// IncidentTemplateStakeholderPropertyInput is an input type that accepts IncidentTemplateStakeholderPropertyArgs and IncidentTemplateStakeholderPropertyOutput values.
// You can construct a concrete instance of `IncidentTemplateStakeholderPropertyInput` via:
//
//	IncidentTemplateStakeholderPropertyArgs{...}
type IncidentTemplateStakeholderPropertyInput interface {
	pulumi.Input

	ToIncidentTemplateStakeholderPropertyOutput() IncidentTemplateStakeholderPropertyOutput
	ToIncidentTemplateStakeholderPropertyOutputWithContext(context.Context) IncidentTemplateStakeholderPropertyOutput
}

type IncidentTemplateStakeholderPropertyArgs struct {
	// Description field of the incident template. This field must not be longer than 10000 characters.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Option to enable stakeholder notifications.Default value is true.
	Enable pulumi.BoolPtrInput `pulumi:"enable"`
	// Message of the related incident template. This field must not be longer than 130 characters.
	Message pulumi.StringInput `pulumi:"message"`
}

func (IncidentTemplateStakeholderPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IncidentTemplateStakeholderProperty)(nil)).Elem()
}

func (i IncidentTemplateStakeholderPropertyArgs) ToIncidentTemplateStakeholderPropertyOutput() IncidentTemplateStakeholderPropertyOutput {
	return i.ToIncidentTemplateStakeholderPropertyOutputWithContext(context.Background())
}

func (i IncidentTemplateStakeholderPropertyArgs) ToIncidentTemplateStakeholderPropertyOutputWithContext(ctx context.Context) IncidentTemplateStakeholderPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncidentTemplateStakeholderPropertyOutput)
}

// IncidentTemplateStakeholderPropertyArrayInput is an input type that accepts IncidentTemplateStakeholderPropertyArray and IncidentTemplateStakeholderPropertyArrayOutput values.
// You can construct a concrete instance of `IncidentTemplateStakeholderPropertyArrayInput` via:
//
//	IncidentTemplateStakeholderPropertyArray{ IncidentTemplateStakeholderPropertyArgs{...} }
type IncidentTemplateStakeholderPropertyArrayInput interface {
	pulumi.Input

	ToIncidentTemplateStakeholderPropertyArrayOutput() IncidentTemplateStakeholderPropertyArrayOutput
	ToIncidentTemplateStakeholderPropertyArrayOutputWithContext(context.Context) IncidentTemplateStakeholderPropertyArrayOutput
}

type IncidentTemplateStakeholderPropertyArray []IncidentTemplateStakeholderPropertyInput

func (IncidentTemplateStakeholderPropertyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IncidentTemplateStakeholderProperty)(nil)).Elem()
}

func (i IncidentTemplateStakeholderPropertyArray) ToIncidentTemplateStakeholderPropertyArrayOutput() IncidentTemplateStakeholderPropertyArrayOutput {
	return i.ToIncidentTemplateStakeholderPropertyArrayOutputWithContext(context.Background())
}

func (i IncidentTemplateStakeholderPropertyArray) ToIncidentTemplateStakeholderPropertyArrayOutputWithContext(ctx context.Context) IncidentTemplateStakeholderPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncidentTemplateStakeholderPropertyArrayOutput)
}

type IncidentTemplateStakeholderPropertyOutput struct{ *pulumi.OutputState }

func (IncidentTemplateStakeholderPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IncidentTemplateStakeholderProperty)(nil)).Elem()
}

func (o IncidentTemplateStakeholderPropertyOutput) ToIncidentTemplateStakeholderPropertyOutput() IncidentTemplateStakeholderPropertyOutput {
	return o
}

func (o IncidentTemplateStakeholderPropertyOutput) ToIncidentTemplateStakeholderPropertyOutputWithContext(ctx context.Context) IncidentTemplateStakeholderPropertyOutput {
	return o
}

// Description field of the incident template. This field must not be longer than 10000 characters.
func (o IncidentTemplateStakeholderPropertyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IncidentTemplateStakeholderProperty) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Option to enable stakeholder notifications.Default value is true.
func (o IncidentTemplateStakeholderPropertyOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IncidentTemplateStakeholderProperty) *bool { return v.Enable }).(pulumi.BoolPtrOutput)
}

// Message of the related incident template. This field must not be longer than 130 characters.
func (o IncidentTemplateStakeholderPropertyOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v IncidentTemplateStakeholderProperty) string { return v.Message }).(pulumi.StringOutput)
}

type IncidentTemplateStakeholderPropertyArrayOutput struct{ *pulumi.OutputState }

func (IncidentTemplateStakeholderPropertyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IncidentTemplateStakeholderProperty)(nil)).Elem()
}

func (o IncidentTemplateStakeholderPropertyArrayOutput) ToIncidentTemplateStakeholderPropertyArrayOutput() IncidentTemplateStakeholderPropertyArrayOutput {
	return o
}

func (o IncidentTemplateStakeholderPropertyArrayOutput) ToIncidentTemplateStakeholderPropertyArrayOutputWithContext(ctx context.Context) IncidentTemplateStakeholderPropertyArrayOutput {
	return o
}

func (o IncidentTemplateStakeholderPropertyArrayOutput) Index(i pulumi.IntInput) IncidentTemplateStakeholderPropertyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IncidentTemplateStakeholderProperty {
		return vs[0].([]IncidentTemplateStakeholderProperty)[vs[1].(int)]
	}).(IncidentTemplateStakeholderPropertyOutput)
}

type IntegrationActionAcknowledge struct {
	// An identifier that is used for alert deduplication. Default: `{{alias}}`.
	Alias *string `pulumi:"alias"`
	// Used to specify rules for matching alerts and the filter type. Please note that depending on the integration type the field names in the filter conditions are:
	// * For SNS integration: `actions`, `alias`, `entity`, `Message`, `recipients`, `responders`, `Subject`, `tags`, `teams`, `eventType`, `Timestamp`, `TopicArn`.
	// * For API integration: `message`, `alias`, `description`, `source`, `entity`, `tags`, `actions`, `details`, `extra-properties`, `recipients`, `teams`, `priority`, `eventType`.
	// * For Email integration: `fromAddress`, `fromName`, `conversationSubject`, `subject`
	Filters []IntegrationActionAcknowledgeFilter `pulumi:"filters"`
	// Name of the integration action.
	Name string `pulumi:"name"`
	// Additional alert action note.
	Note *string `pulumi:"note"`
	// Integer value that defines in which order the action will be performed. Default: `1`.
	Order *int `pulumi:"order"`
	// The responder type - can be `escalation`, `team` or `user`.
	Type *string `pulumi:"type"`
	// Owner of the execution for integration action.
	User *string `pulumi:"user"`
}

// IntegrationActionAcknowledgeInput is an input type that accepts IntegrationActionAcknowledgeArgs and IntegrationActionAcknowledgeOutput values.
// You can construct a concrete instance of `IntegrationActionAcknowledgeInput` via:
//
//	IntegrationActionAcknowledgeArgs{...}
type IntegrationActionAcknowledgeInput interface {
	pulumi.Input

	ToIntegrationActionAcknowledgeOutput() IntegrationActionAcknowledgeOutput
	ToIntegrationActionAcknowledgeOutputWithContext(context.Context) IntegrationActionAcknowledgeOutput
}

type IntegrationActionAcknowledgeArgs struct {
	// An identifier that is used for alert deduplication. Default: `{{alias}}`.
	Alias pulumi.StringPtrInput `pulumi:"alias"`
	// Used to specify rules for matching alerts and the filter type. Please note that depending on the integration type the field names in the filter conditions are:
	// * For SNS integration: `actions`, `alias`, `entity`, `Message`, `recipients`, `responders`, `Subject`, `tags`, `teams`, `eventType`, `Timestamp`, `TopicArn`.
	// * For API integration: `message`, `alias`, `description`, `source`, `entity`, `tags`, `actions`, `details`, `extra-properties`, `recipients`, `teams`, `priority`, `eventType`.
	// * For Email integration: `fromAddress`, `fromName`, `conversationSubject`, `subject`
	Filters IntegrationActionAcknowledgeFilterArrayInput `pulumi:"filters"`
	// Name of the integration action.
	Name pulumi.StringInput `pulumi:"name"`
	// Additional alert action note.
	Note pulumi.StringPtrInput `pulumi:"note"`
	// Integer value that defines in which order the action will be performed. Default: `1`.
	Order pulumi.IntPtrInput `pulumi:"order"`
	// The responder type - can be `escalation`, `team` or `user`.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Owner of the execution for integration action.
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (IntegrationActionAcknowledgeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationActionAcknowledge)(nil)).Elem()
}

func (i IntegrationActionAcknowledgeArgs) ToIntegrationActionAcknowledgeOutput() IntegrationActionAcknowledgeOutput {
	return i.ToIntegrationActionAcknowledgeOutputWithContext(context.Background())
}

func (i IntegrationActionAcknowledgeArgs) ToIntegrationActionAcknowledgeOutputWithContext(ctx context.Context) IntegrationActionAcknowledgeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationActionAcknowledgeOutput)
}

// IntegrationActionAcknowledgeArrayInput is an input type that accepts IntegrationActionAcknowledgeArray and IntegrationActionAcknowledgeArrayOutput values.
// You can construct a concrete instance of `IntegrationActionAcknowledgeArrayInput` via:
//
//	IntegrationActionAcknowledgeArray{ IntegrationActionAcknowledgeArgs{...} }
type IntegrationActionAcknowledgeArrayInput interface {
	pulumi.Input

	ToIntegrationActionAcknowledgeArrayOutput() IntegrationActionAcknowledgeArrayOutput
	ToIntegrationActionAcknowledgeArrayOutputWithContext(context.Context) IntegrationActionAcknowledgeArrayOutput
}

type IntegrationActionAcknowledgeArray []IntegrationActionAcknowledgeInput

func (IntegrationActionAcknowledgeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationActionAcknowledge)(nil)).Elem()
}

func (i IntegrationActionAcknowledgeArray) ToIntegrationActionAcknowledgeArrayOutput() IntegrationActionAcknowledgeArrayOutput {
	return i.ToIntegrationActionAcknowledgeArrayOutputWithContext(context.Background())
}

func (i IntegrationActionAcknowledgeArray) ToIntegrationActionAcknowledgeArrayOutputWithContext(ctx context.Context) IntegrationActionAcknowledgeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationActionAcknowledgeArrayOutput)
}

type IntegrationActionAcknowledgeOutput struct{ *pulumi.OutputState }

func (IntegrationActionAcknowledgeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationActionAcknowledge)(nil)).Elem()
}

func (o IntegrationActionAcknowledgeOutput) ToIntegrationActionAcknowledgeOutput() IntegrationActionAcknowledgeOutput {
	return o
}

func (o IntegrationActionAcknowledgeOutput) ToIntegrationActionAcknowledgeOutputWithContext(ctx context.Context) IntegrationActionAcknowledgeOutput {
	return o
}

// An identifier that is used for alert deduplication. Default: `{{alias}}`.
func (o IntegrationActionAcknowledgeOutput) Alias() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationActionAcknowledge) *string { return v.Alias }).(pulumi.StringPtrOutput)
}

// Used to specify rules for matching alerts and the filter type. Please note that depending on the integration type the field names in the filter conditions are:
// * For SNS integration: `actions`, `alias`, `entity`, `Message`, `recipients`, `responders`, `Subject`, `tags`, `teams`, `eventType`, `Timestamp`, `TopicArn`.
// * For API integration: `message`, `alias`, `description`, `source`, `entity`, `tags`, `actions`, `details`, `extra-properties`, `recipients`, `teams`, `priority`, `eventType`.
// * For Email integration: `fromAddress`, `fromName`, `conversationSubject`, `subject`
func (o IntegrationActionAcknowledgeOutput) Filters() IntegrationActionAcknowledgeFilterArrayOutput {
	return o.ApplyT(func(v IntegrationActionAcknowledge) []IntegrationActionAcknowledgeFilter { return v.Filters }).(IntegrationActionAcknowledgeFilterArrayOutput)
}

// Name of the integration action.
func (o IntegrationActionAcknowledgeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationActionAcknowledge) string { return v.Name }).(pulumi.StringOutput)
}

// Additional alert action note.
func (o IntegrationActionAcknowledgeOutput) Note() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationActionAcknowledge) *string { return v.Note }).(pulumi.StringPtrOutput)
}

// Integer value that defines in which order the action will be performed. Default: `1`.
func (o IntegrationActionAcknowledgeOutput) Order() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IntegrationActionAcknowledge) *int { return v.Order }).(pulumi.IntPtrOutput)
}

// The responder type - can be `escalation`, `team` or `user`.
func (o IntegrationActionAcknowledgeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationActionAcknowledge) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Owner of the execution for integration action.
func (o IntegrationActionAcknowledgeOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationActionAcknowledge) *string { return v.User }).(pulumi.StringPtrOutput)
}

type IntegrationActionAcknowledgeArrayOutput struct{ *pulumi.OutputState }

func (IntegrationActionAcknowledgeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationActionAcknowledge)(nil)).Elem()
}

func (o IntegrationActionAcknowledgeArrayOutput) ToIntegrationActionAcknowledgeArrayOutput() IntegrationActionAcknowledgeArrayOutput {
	return o
}

func (o IntegrationActionAcknowledgeArrayOutput) ToIntegrationActionAcknowledgeArrayOutputWithContext(ctx context.Context) IntegrationActionAcknowledgeArrayOutput {
	return o
}

func (o IntegrationActionAcknowledgeArrayOutput) Index(i pulumi.IntInput) IntegrationActionAcknowledgeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IntegrationActionAcknowledge {
		return vs[0].([]IntegrationActionAcknowledge)[vs[1].(int)]
	}).(IntegrationActionAcknowledgeOutput)
}

type IntegrationActionAcknowledgeFilter struct {
	Conditions []IntegrationActionAcknowledgeFilterCondition `pulumi:"conditions"`
	// The responder type - can be `escalation`, `team` or `user`.
	Type string `pulumi:"type"`
}

// IntegrationActionAcknowledgeFilterInput is an input type that accepts IntegrationActionAcknowledgeFilterArgs and IntegrationActionAcknowledgeFilterOutput values.
// You can construct a concrete instance of `IntegrationActionAcknowledgeFilterInput` via:
//
//	IntegrationActionAcknowledgeFilterArgs{...}
type IntegrationActionAcknowledgeFilterInput interface {
	pulumi.Input

	ToIntegrationActionAcknowledgeFilterOutput() IntegrationActionAcknowledgeFilterOutput
	ToIntegrationActionAcknowledgeFilterOutputWithContext(context.Context) IntegrationActionAcknowledgeFilterOutput
}

type IntegrationActionAcknowledgeFilterArgs struct {
	Conditions IntegrationActionAcknowledgeFilterConditionArrayInput `pulumi:"conditions"`
	// The responder type - can be `escalation`, `team` or `user`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (IntegrationActionAcknowledgeFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationActionAcknowledgeFilter)(nil)).Elem()
}

func (i IntegrationActionAcknowledgeFilterArgs) ToIntegrationActionAcknowledgeFilterOutput() IntegrationActionAcknowledgeFilterOutput {
	return i.ToIntegrationActionAcknowledgeFilterOutputWithContext(context.Background())
}

func (i IntegrationActionAcknowledgeFilterArgs) ToIntegrationActionAcknowledgeFilterOutputWithContext(ctx context.Context) IntegrationActionAcknowledgeFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationActionAcknowledgeFilterOutput)
}

// IntegrationActionAcknowledgeFilterArrayInput is an input type that accepts IntegrationActionAcknowledgeFilterArray and IntegrationActionAcknowledgeFilterArrayOutput values.
// You can construct a concrete instance of `IntegrationActionAcknowledgeFilterArrayInput` via:
//
//	IntegrationActionAcknowledgeFilterArray{ IntegrationActionAcknowledgeFilterArgs{...} }
type IntegrationActionAcknowledgeFilterArrayInput interface {
	pulumi.Input

	ToIntegrationActionAcknowledgeFilterArrayOutput() IntegrationActionAcknowledgeFilterArrayOutput
	ToIntegrationActionAcknowledgeFilterArrayOutputWithContext(context.Context) IntegrationActionAcknowledgeFilterArrayOutput
}

type IntegrationActionAcknowledgeFilterArray []IntegrationActionAcknowledgeFilterInput

func (IntegrationActionAcknowledgeFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationActionAcknowledgeFilter)(nil)).Elem()
}

func (i IntegrationActionAcknowledgeFilterArray) ToIntegrationActionAcknowledgeFilterArrayOutput() IntegrationActionAcknowledgeFilterArrayOutput {
	return i.ToIntegrationActionAcknowledgeFilterArrayOutputWithContext(context.Background())
}

func (i IntegrationActionAcknowledgeFilterArray) ToIntegrationActionAcknowledgeFilterArrayOutputWithContext(ctx context.Context) IntegrationActionAcknowledgeFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationActionAcknowledgeFilterArrayOutput)
}

type IntegrationActionAcknowledgeFilterOutput struct{ *pulumi.OutputState }

func (IntegrationActionAcknowledgeFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationActionAcknowledgeFilter)(nil)).Elem()
}

func (o IntegrationActionAcknowledgeFilterOutput) ToIntegrationActionAcknowledgeFilterOutput() IntegrationActionAcknowledgeFilterOutput {
	return o
}

func (o IntegrationActionAcknowledgeFilterOutput) ToIntegrationActionAcknowledgeFilterOutputWithContext(ctx context.Context) IntegrationActionAcknowledgeFilterOutput {
	return o
}

func (o IntegrationActionAcknowledgeFilterOutput) Conditions() IntegrationActionAcknowledgeFilterConditionArrayOutput {
	return o.ApplyT(func(v IntegrationActionAcknowledgeFilter) []IntegrationActionAcknowledgeFilterCondition {
		return v.Conditions
	}).(IntegrationActionAcknowledgeFilterConditionArrayOutput)
}

// The responder type - can be `escalation`, `team` or `user`.
func (o IntegrationActionAcknowledgeFilterOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationActionAcknowledgeFilter) string { return v.Type }).(pulumi.StringOutput)
}

type IntegrationActionAcknowledgeFilterArrayOutput struct{ *pulumi.OutputState }

func (IntegrationActionAcknowledgeFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationActionAcknowledgeFilter)(nil)).Elem()
}

func (o IntegrationActionAcknowledgeFilterArrayOutput) ToIntegrationActionAcknowledgeFilterArrayOutput() IntegrationActionAcknowledgeFilterArrayOutput {
	return o
}

func (o IntegrationActionAcknowledgeFilterArrayOutput) ToIntegrationActionAcknowledgeFilterArrayOutputWithContext(ctx context.Context) IntegrationActionAcknowledgeFilterArrayOutput {
	return o
}

func (o IntegrationActionAcknowledgeFilterArrayOutput) Index(i pulumi.IntInput) IntegrationActionAcknowledgeFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IntegrationActionAcknowledgeFilter {
		return vs[0].([]IntegrationActionAcknowledgeFilter)[vs[1].(int)]
	}).(IntegrationActionAcknowledgeFilterOutput)
}

type IntegrationActionAcknowledgeFilterCondition struct {
	ExpectedValue *string `pulumi:"expectedValue"`
	Field         string  `pulumi:"field"`
	Key           *string `pulumi:"key"`
	Not           *bool   `pulumi:"not"`
	Operation     string  `pulumi:"operation"`
	// Integer value that defines in which order the action will be performed. Default: `1`.
	Order *int `pulumi:"order"`
}

// IntegrationActionAcknowledgeFilterConditionInput is an input type that accepts IntegrationActionAcknowledgeFilterConditionArgs and IntegrationActionAcknowledgeFilterConditionOutput values.
// You can construct a concrete instance of `IntegrationActionAcknowledgeFilterConditionInput` via:
//
//	IntegrationActionAcknowledgeFilterConditionArgs{...}
type IntegrationActionAcknowledgeFilterConditionInput interface {
	pulumi.Input

	ToIntegrationActionAcknowledgeFilterConditionOutput() IntegrationActionAcknowledgeFilterConditionOutput
	ToIntegrationActionAcknowledgeFilterConditionOutputWithContext(context.Context) IntegrationActionAcknowledgeFilterConditionOutput
}

type IntegrationActionAcknowledgeFilterConditionArgs struct {
	ExpectedValue pulumi.StringPtrInput `pulumi:"expectedValue"`
	Field         pulumi.StringInput    `pulumi:"field"`
	Key           pulumi.StringPtrInput `pulumi:"key"`
	Not           pulumi.BoolPtrInput   `pulumi:"not"`
	Operation     pulumi.StringInput    `pulumi:"operation"`
	// Integer value that defines in which order the action will be performed. Default: `1`.
	Order pulumi.IntPtrInput `pulumi:"order"`
}

func (IntegrationActionAcknowledgeFilterConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationActionAcknowledgeFilterCondition)(nil)).Elem()
}

func (i IntegrationActionAcknowledgeFilterConditionArgs) ToIntegrationActionAcknowledgeFilterConditionOutput() IntegrationActionAcknowledgeFilterConditionOutput {
	return i.ToIntegrationActionAcknowledgeFilterConditionOutputWithContext(context.Background())
}

func (i IntegrationActionAcknowledgeFilterConditionArgs) ToIntegrationActionAcknowledgeFilterConditionOutputWithContext(ctx context.Context) IntegrationActionAcknowledgeFilterConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationActionAcknowledgeFilterConditionOutput)
}

// IntegrationActionAcknowledgeFilterConditionArrayInput is an input type that accepts IntegrationActionAcknowledgeFilterConditionArray and IntegrationActionAcknowledgeFilterConditionArrayOutput values.
// You can construct a concrete instance of `IntegrationActionAcknowledgeFilterConditionArrayInput` via:
//
//	IntegrationActionAcknowledgeFilterConditionArray{ IntegrationActionAcknowledgeFilterConditionArgs{...} }
type IntegrationActionAcknowledgeFilterConditionArrayInput interface {
	pulumi.Input

	ToIntegrationActionAcknowledgeFilterConditionArrayOutput() IntegrationActionAcknowledgeFilterConditionArrayOutput
	ToIntegrationActionAcknowledgeFilterConditionArrayOutputWithContext(context.Context) IntegrationActionAcknowledgeFilterConditionArrayOutput
}

type IntegrationActionAcknowledgeFilterConditionArray []IntegrationActionAcknowledgeFilterConditionInput

func (IntegrationActionAcknowledgeFilterConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationActionAcknowledgeFilterCondition)(nil)).Elem()
}

func (i IntegrationActionAcknowledgeFilterConditionArray) ToIntegrationActionAcknowledgeFilterConditionArrayOutput() IntegrationActionAcknowledgeFilterConditionArrayOutput {
	return i.ToIntegrationActionAcknowledgeFilterConditionArrayOutputWithContext(context.Background())
}

func (i IntegrationActionAcknowledgeFilterConditionArray) ToIntegrationActionAcknowledgeFilterConditionArrayOutputWithContext(ctx context.Context) IntegrationActionAcknowledgeFilterConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationActionAcknowledgeFilterConditionArrayOutput)
}

type IntegrationActionAcknowledgeFilterConditionOutput struct{ *pulumi.OutputState }

func (IntegrationActionAcknowledgeFilterConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationActionAcknowledgeFilterCondition)(nil)).Elem()
}

func (o IntegrationActionAcknowledgeFilterConditionOutput) ToIntegrationActionAcknowledgeFilterConditionOutput() IntegrationActionAcknowledgeFilterConditionOutput {
	return o
}

func (o IntegrationActionAcknowledgeFilterConditionOutput) ToIntegrationActionAcknowledgeFilterConditionOutputWithContext(ctx context.Context) IntegrationActionAcknowledgeFilterConditionOutput {
	return o
}

func (o IntegrationActionAcknowledgeFilterConditionOutput) ExpectedValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationActionAcknowledgeFilterCondition) *string { return v.ExpectedValue }).(pulumi.StringPtrOutput)
}

func (o IntegrationActionAcknowledgeFilterConditionOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationActionAcknowledgeFilterCondition) string { return v.Field }).(pulumi.StringOutput)
}

func (o IntegrationActionAcknowledgeFilterConditionOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationActionAcknowledgeFilterCondition) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o IntegrationActionAcknowledgeFilterConditionOutput) Not() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IntegrationActionAcknowledgeFilterCondition) *bool { return v.Not }).(pulumi.BoolPtrOutput)
}

func (o IntegrationActionAcknowledgeFilterConditionOutput) Operation() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationActionAcknowledgeFilterCondition) string { return v.Operation }).(pulumi.StringOutput)
}

// Integer value that defines in which order the action will be performed. Default: `1`.
func (o IntegrationActionAcknowledgeFilterConditionOutput) Order() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IntegrationActionAcknowledgeFilterCondition) *int { return v.Order }).(pulumi.IntPtrOutput)
}

type IntegrationActionAcknowledgeFilterConditionArrayOutput struct{ *pulumi.OutputState }

func (IntegrationActionAcknowledgeFilterConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationActionAcknowledgeFilterCondition)(nil)).Elem()
}

func (o IntegrationActionAcknowledgeFilterConditionArrayOutput) ToIntegrationActionAcknowledgeFilterConditionArrayOutput() IntegrationActionAcknowledgeFilterConditionArrayOutput {
	return o
}

func (o IntegrationActionAcknowledgeFilterConditionArrayOutput) ToIntegrationActionAcknowledgeFilterConditionArrayOutputWithContext(ctx context.Context) IntegrationActionAcknowledgeFilterConditionArrayOutput {
	return o
}

func (o IntegrationActionAcknowledgeFilterConditionArrayOutput) Index(i pulumi.IntInput) IntegrationActionAcknowledgeFilterConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IntegrationActionAcknowledgeFilterCondition {
		return vs[0].([]IntegrationActionAcknowledgeFilterCondition)[vs[1].(int)]
	}).(IntegrationActionAcknowledgeFilterConditionOutput)
}

type IntegrationActionAddNote struct {
	// An identifier that is used for alert deduplication. Default: `{{alias}}`.
	Alias *string `pulumi:"alias"`
	// Used to specify rules for matching alerts and the filter type. Please note that depending on the integration type the field names in the filter conditions are:
	// * For SNS integration: `actions`, `alias`, `entity`, `Message`, `recipients`, `responders`, `Subject`, `tags`, `teams`, `eventType`, `Timestamp`, `TopicArn`.
	// * For API integration: `message`, `alias`, `description`, `source`, `entity`, `tags`, `actions`, `details`, `extra-properties`, `recipients`, `teams`, `priority`, `eventType`.
	// * For Email integration: `fromAddress`, `fromName`, `conversationSubject`, `subject`
	Filters []IntegrationActionAddNoteFilter `pulumi:"filters"`
	// Name of the integration action.
	Name string `pulumi:"name"`
	// Additional alert action note.
	Note *string `pulumi:"note"`
	// Integer value that defines in which order the action will be performed. Default: `1`.
	Order *int `pulumi:"order"`
	// The responder type - can be `escalation`, `team` or `user`.
	Type *string `pulumi:"type"`
	// Owner of the execution for integration action.
	User *string `pulumi:"user"`
}

// IntegrationActionAddNoteInput is an input type that accepts IntegrationActionAddNoteArgs and IntegrationActionAddNoteOutput values.
// You can construct a concrete instance of `IntegrationActionAddNoteInput` via:
//
//	IntegrationActionAddNoteArgs{...}
type IntegrationActionAddNoteInput interface {
	pulumi.Input

	ToIntegrationActionAddNoteOutput() IntegrationActionAddNoteOutput
	ToIntegrationActionAddNoteOutputWithContext(context.Context) IntegrationActionAddNoteOutput
}

type IntegrationActionAddNoteArgs struct {
	// An identifier that is used for alert deduplication. Default: `{{alias}}`.
	Alias pulumi.StringPtrInput `pulumi:"alias"`
	// Used to specify rules for matching alerts and the filter type. Please note that depending on the integration type the field names in the filter conditions are:
	// * For SNS integration: `actions`, `alias`, `entity`, `Message`, `recipients`, `responders`, `Subject`, `tags`, `teams`, `eventType`, `Timestamp`, `TopicArn`.
	// * For API integration: `message`, `alias`, `description`, `source`, `entity`, `tags`, `actions`, `details`, `extra-properties`, `recipients`, `teams`, `priority`, `eventType`.
	// * For Email integration: `fromAddress`, `fromName`, `conversationSubject`, `subject`
	Filters IntegrationActionAddNoteFilterArrayInput `pulumi:"filters"`
	// Name of the integration action.
	Name pulumi.StringInput `pulumi:"name"`
	// Additional alert action note.
	Note pulumi.StringPtrInput `pulumi:"note"`
	// Integer value that defines in which order the action will be performed. Default: `1`.
	Order pulumi.IntPtrInput `pulumi:"order"`
	// The responder type - can be `escalation`, `team` or `user`.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Owner of the execution for integration action.
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (IntegrationActionAddNoteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationActionAddNote)(nil)).Elem()
}

func (i IntegrationActionAddNoteArgs) ToIntegrationActionAddNoteOutput() IntegrationActionAddNoteOutput {
	return i.ToIntegrationActionAddNoteOutputWithContext(context.Background())
}

func (i IntegrationActionAddNoteArgs) ToIntegrationActionAddNoteOutputWithContext(ctx context.Context) IntegrationActionAddNoteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationActionAddNoteOutput)
}

// IntegrationActionAddNoteArrayInput is an input type that accepts IntegrationActionAddNoteArray and IntegrationActionAddNoteArrayOutput values.
// You can construct a concrete instance of `IntegrationActionAddNoteArrayInput` via:
//
//	IntegrationActionAddNoteArray{ IntegrationActionAddNoteArgs{...} }
type IntegrationActionAddNoteArrayInput interface {
	pulumi.Input

	ToIntegrationActionAddNoteArrayOutput() IntegrationActionAddNoteArrayOutput
	ToIntegrationActionAddNoteArrayOutputWithContext(context.Context) IntegrationActionAddNoteArrayOutput
}

type IntegrationActionAddNoteArray []IntegrationActionAddNoteInput

func (IntegrationActionAddNoteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationActionAddNote)(nil)).Elem()
}

func (i IntegrationActionAddNoteArray) ToIntegrationActionAddNoteArrayOutput() IntegrationActionAddNoteArrayOutput {
	return i.ToIntegrationActionAddNoteArrayOutputWithContext(context.Background())
}

func (i IntegrationActionAddNoteArray) ToIntegrationActionAddNoteArrayOutputWithContext(ctx context.Context) IntegrationActionAddNoteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationActionAddNoteArrayOutput)
}

type IntegrationActionAddNoteOutput struct{ *pulumi.OutputState }

func (IntegrationActionAddNoteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationActionAddNote)(nil)).Elem()
}

func (o IntegrationActionAddNoteOutput) ToIntegrationActionAddNoteOutput() IntegrationActionAddNoteOutput {
	return o
}

func (o IntegrationActionAddNoteOutput) ToIntegrationActionAddNoteOutputWithContext(ctx context.Context) IntegrationActionAddNoteOutput {
	return o
}

// An identifier that is used for alert deduplication. Default: `{{alias}}`.
func (o IntegrationActionAddNoteOutput) Alias() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationActionAddNote) *string { return v.Alias }).(pulumi.StringPtrOutput)
}

// Used to specify rules for matching alerts and the filter type. Please note that depending on the integration type the field names in the filter conditions are:
// * For SNS integration: `actions`, `alias`, `entity`, `Message`, `recipients`, `responders`, `Subject`, `tags`, `teams`, `eventType`, `Timestamp`, `TopicArn`.
// * For API integration: `message`, `alias`, `description`, `source`, `entity`, `tags`, `actions`, `details`, `extra-properties`, `recipients`, `teams`, `priority`, `eventType`.
// * For Email integration: `fromAddress`, `fromName`, `conversationSubject`, `subject`
func (o IntegrationActionAddNoteOutput) Filters() IntegrationActionAddNoteFilterArrayOutput {
	return o.ApplyT(func(v IntegrationActionAddNote) []IntegrationActionAddNoteFilter { return v.Filters }).(IntegrationActionAddNoteFilterArrayOutput)
}

// Name of the integration action.
func (o IntegrationActionAddNoteOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationActionAddNote) string { return v.Name }).(pulumi.StringOutput)
}

// Additional alert action note.
func (o IntegrationActionAddNoteOutput) Note() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationActionAddNote) *string { return v.Note }).(pulumi.StringPtrOutput)
}

// Integer value that defines in which order the action will be performed. Default: `1`.
func (o IntegrationActionAddNoteOutput) Order() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IntegrationActionAddNote) *int { return v.Order }).(pulumi.IntPtrOutput)
}

// The responder type - can be `escalation`, `team` or `user`.
func (o IntegrationActionAddNoteOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationActionAddNote) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Owner of the execution for integration action.
func (o IntegrationActionAddNoteOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationActionAddNote) *string { return v.User }).(pulumi.StringPtrOutput)
}

type IntegrationActionAddNoteArrayOutput struct{ *pulumi.OutputState }

func (IntegrationActionAddNoteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationActionAddNote)(nil)).Elem()
}

func (o IntegrationActionAddNoteArrayOutput) ToIntegrationActionAddNoteArrayOutput() IntegrationActionAddNoteArrayOutput {
	return o
}

func (o IntegrationActionAddNoteArrayOutput) ToIntegrationActionAddNoteArrayOutputWithContext(ctx context.Context) IntegrationActionAddNoteArrayOutput {
	return o
}

func (o IntegrationActionAddNoteArrayOutput) Index(i pulumi.IntInput) IntegrationActionAddNoteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IntegrationActionAddNote {
		return vs[0].([]IntegrationActionAddNote)[vs[1].(int)]
	}).(IntegrationActionAddNoteOutput)
}

type IntegrationActionAddNoteFilter struct {
	Conditions []IntegrationActionAddNoteFilterCondition `pulumi:"conditions"`
	// The responder type - can be `escalation`, `team` or `user`.
	Type string `pulumi:"type"`
}

// IntegrationActionAddNoteFilterInput is an input type that accepts IntegrationActionAddNoteFilterArgs and IntegrationActionAddNoteFilterOutput values.
// You can construct a concrete instance of `IntegrationActionAddNoteFilterInput` via:
//
//	IntegrationActionAddNoteFilterArgs{...}
type IntegrationActionAddNoteFilterInput interface {
	pulumi.Input

	ToIntegrationActionAddNoteFilterOutput() IntegrationActionAddNoteFilterOutput
	ToIntegrationActionAddNoteFilterOutputWithContext(context.Context) IntegrationActionAddNoteFilterOutput
}

type IntegrationActionAddNoteFilterArgs struct {
	Conditions IntegrationActionAddNoteFilterConditionArrayInput `pulumi:"conditions"`
	// The responder type - can be `escalation`, `team` or `user`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (IntegrationActionAddNoteFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationActionAddNoteFilter)(nil)).Elem()
}

func (i IntegrationActionAddNoteFilterArgs) ToIntegrationActionAddNoteFilterOutput() IntegrationActionAddNoteFilterOutput {
	return i.ToIntegrationActionAddNoteFilterOutputWithContext(context.Background())
}

func (i IntegrationActionAddNoteFilterArgs) ToIntegrationActionAddNoteFilterOutputWithContext(ctx context.Context) IntegrationActionAddNoteFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationActionAddNoteFilterOutput)
}

// IntegrationActionAddNoteFilterArrayInput is an input type that accepts IntegrationActionAddNoteFilterArray and IntegrationActionAddNoteFilterArrayOutput values.
// You can construct a concrete instance of `IntegrationActionAddNoteFilterArrayInput` via:
//
//	IntegrationActionAddNoteFilterArray{ IntegrationActionAddNoteFilterArgs{...} }
type IntegrationActionAddNoteFilterArrayInput interface {
	pulumi.Input

	ToIntegrationActionAddNoteFilterArrayOutput() IntegrationActionAddNoteFilterArrayOutput
	ToIntegrationActionAddNoteFilterArrayOutputWithContext(context.Context) IntegrationActionAddNoteFilterArrayOutput
}

type IntegrationActionAddNoteFilterArray []IntegrationActionAddNoteFilterInput

func (IntegrationActionAddNoteFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationActionAddNoteFilter)(nil)).Elem()
}

func (i IntegrationActionAddNoteFilterArray) ToIntegrationActionAddNoteFilterArrayOutput() IntegrationActionAddNoteFilterArrayOutput {
	return i.ToIntegrationActionAddNoteFilterArrayOutputWithContext(context.Background())
}

func (i IntegrationActionAddNoteFilterArray) ToIntegrationActionAddNoteFilterArrayOutputWithContext(ctx context.Context) IntegrationActionAddNoteFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationActionAddNoteFilterArrayOutput)
}

type IntegrationActionAddNoteFilterOutput struct{ *pulumi.OutputState }

func (IntegrationActionAddNoteFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationActionAddNoteFilter)(nil)).Elem()
}

func (o IntegrationActionAddNoteFilterOutput) ToIntegrationActionAddNoteFilterOutput() IntegrationActionAddNoteFilterOutput {
	return o
}

func (o IntegrationActionAddNoteFilterOutput) ToIntegrationActionAddNoteFilterOutputWithContext(ctx context.Context) IntegrationActionAddNoteFilterOutput {
	return o
}

func (o IntegrationActionAddNoteFilterOutput) Conditions() IntegrationActionAddNoteFilterConditionArrayOutput {
	return o.ApplyT(func(v IntegrationActionAddNoteFilter) []IntegrationActionAddNoteFilterCondition { return v.Conditions }).(IntegrationActionAddNoteFilterConditionArrayOutput)
}

// The responder type - can be `escalation`, `team` or `user`.
func (o IntegrationActionAddNoteFilterOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationActionAddNoteFilter) string { return v.Type }).(pulumi.StringOutput)
}

type IntegrationActionAddNoteFilterArrayOutput struct{ *pulumi.OutputState }

func (IntegrationActionAddNoteFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationActionAddNoteFilter)(nil)).Elem()
}

func (o IntegrationActionAddNoteFilterArrayOutput) ToIntegrationActionAddNoteFilterArrayOutput() IntegrationActionAddNoteFilterArrayOutput {
	return o
}

func (o IntegrationActionAddNoteFilterArrayOutput) ToIntegrationActionAddNoteFilterArrayOutputWithContext(ctx context.Context) IntegrationActionAddNoteFilterArrayOutput {
	return o
}

func (o IntegrationActionAddNoteFilterArrayOutput) Index(i pulumi.IntInput) IntegrationActionAddNoteFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IntegrationActionAddNoteFilter {
		return vs[0].([]IntegrationActionAddNoteFilter)[vs[1].(int)]
	}).(IntegrationActionAddNoteFilterOutput)
}

type IntegrationActionAddNoteFilterCondition struct {
	ExpectedValue *string `pulumi:"expectedValue"`
	Field         string  `pulumi:"field"`
	Key           *string `pulumi:"key"`
	Not           *bool   `pulumi:"not"`
	Operation     string  `pulumi:"operation"`
	// Integer value that defines in which order the action will be performed. Default: `1`.
	Order *int `pulumi:"order"`
}

// IntegrationActionAddNoteFilterConditionInput is an input type that accepts IntegrationActionAddNoteFilterConditionArgs and IntegrationActionAddNoteFilterConditionOutput values.
// You can construct a concrete instance of `IntegrationActionAddNoteFilterConditionInput` via:
//
//	IntegrationActionAddNoteFilterConditionArgs{...}
type IntegrationActionAddNoteFilterConditionInput interface {
	pulumi.Input

	ToIntegrationActionAddNoteFilterConditionOutput() IntegrationActionAddNoteFilterConditionOutput
	ToIntegrationActionAddNoteFilterConditionOutputWithContext(context.Context) IntegrationActionAddNoteFilterConditionOutput
}

type IntegrationActionAddNoteFilterConditionArgs struct {
	ExpectedValue pulumi.StringPtrInput `pulumi:"expectedValue"`
	Field         pulumi.StringInput    `pulumi:"field"`
	Key           pulumi.StringPtrInput `pulumi:"key"`
	Not           pulumi.BoolPtrInput   `pulumi:"not"`
	Operation     pulumi.StringInput    `pulumi:"operation"`
	// Integer value that defines in which order the action will be performed. Default: `1`.
	Order pulumi.IntPtrInput `pulumi:"order"`
}

func (IntegrationActionAddNoteFilterConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationActionAddNoteFilterCondition)(nil)).Elem()
}

func (i IntegrationActionAddNoteFilterConditionArgs) ToIntegrationActionAddNoteFilterConditionOutput() IntegrationActionAddNoteFilterConditionOutput {
	return i.ToIntegrationActionAddNoteFilterConditionOutputWithContext(context.Background())
}

func (i IntegrationActionAddNoteFilterConditionArgs) ToIntegrationActionAddNoteFilterConditionOutputWithContext(ctx context.Context) IntegrationActionAddNoteFilterConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationActionAddNoteFilterConditionOutput)
}

// IntegrationActionAddNoteFilterConditionArrayInput is an input type that accepts IntegrationActionAddNoteFilterConditionArray and IntegrationActionAddNoteFilterConditionArrayOutput values.
// You can construct a concrete instance of `IntegrationActionAddNoteFilterConditionArrayInput` via:
//
//	IntegrationActionAddNoteFilterConditionArray{ IntegrationActionAddNoteFilterConditionArgs{...} }
type IntegrationActionAddNoteFilterConditionArrayInput interface {
	pulumi.Input

	ToIntegrationActionAddNoteFilterConditionArrayOutput() IntegrationActionAddNoteFilterConditionArrayOutput
	ToIntegrationActionAddNoteFilterConditionArrayOutputWithContext(context.Context) IntegrationActionAddNoteFilterConditionArrayOutput
}

type IntegrationActionAddNoteFilterConditionArray []IntegrationActionAddNoteFilterConditionInput

func (IntegrationActionAddNoteFilterConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationActionAddNoteFilterCondition)(nil)).Elem()
}

func (i IntegrationActionAddNoteFilterConditionArray) ToIntegrationActionAddNoteFilterConditionArrayOutput() IntegrationActionAddNoteFilterConditionArrayOutput {
	return i.ToIntegrationActionAddNoteFilterConditionArrayOutputWithContext(context.Background())
}

func (i IntegrationActionAddNoteFilterConditionArray) ToIntegrationActionAddNoteFilterConditionArrayOutputWithContext(ctx context.Context) IntegrationActionAddNoteFilterConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationActionAddNoteFilterConditionArrayOutput)
}

type IntegrationActionAddNoteFilterConditionOutput struct{ *pulumi.OutputState }

func (IntegrationActionAddNoteFilterConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationActionAddNoteFilterCondition)(nil)).Elem()
}

func (o IntegrationActionAddNoteFilterConditionOutput) ToIntegrationActionAddNoteFilterConditionOutput() IntegrationActionAddNoteFilterConditionOutput {
	return o
}

func (o IntegrationActionAddNoteFilterConditionOutput) ToIntegrationActionAddNoteFilterConditionOutputWithContext(ctx context.Context) IntegrationActionAddNoteFilterConditionOutput {
	return o
}

func (o IntegrationActionAddNoteFilterConditionOutput) ExpectedValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationActionAddNoteFilterCondition) *string { return v.ExpectedValue }).(pulumi.StringPtrOutput)
}

func (o IntegrationActionAddNoteFilterConditionOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationActionAddNoteFilterCondition) string { return v.Field }).(pulumi.StringOutput)
}

func (o IntegrationActionAddNoteFilterConditionOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationActionAddNoteFilterCondition) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o IntegrationActionAddNoteFilterConditionOutput) Not() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IntegrationActionAddNoteFilterCondition) *bool { return v.Not }).(pulumi.BoolPtrOutput)
}

func (o IntegrationActionAddNoteFilterConditionOutput) Operation() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationActionAddNoteFilterCondition) string { return v.Operation }).(pulumi.StringOutput)
}

// Integer value that defines in which order the action will be performed. Default: `1`.
func (o IntegrationActionAddNoteFilterConditionOutput) Order() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IntegrationActionAddNoteFilterCondition) *int { return v.Order }).(pulumi.IntPtrOutput)
}

type IntegrationActionAddNoteFilterConditionArrayOutput struct{ *pulumi.OutputState }

func (IntegrationActionAddNoteFilterConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationActionAddNoteFilterCondition)(nil)).Elem()
}

func (o IntegrationActionAddNoteFilterConditionArrayOutput) ToIntegrationActionAddNoteFilterConditionArrayOutput() IntegrationActionAddNoteFilterConditionArrayOutput {
	return o
}

func (o IntegrationActionAddNoteFilterConditionArrayOutput) ToIntegrationActionAddNoteFilterConditionArrayOutputWithContext(ctx context.Context) IntegrationActionAddNoteFilterConditionArrayOutput {
	return o
}

func (o IntegrationActionAddNoteFilterConditionArrayOutput) Index(i pulumi.IntInput) IntegrationActionAddNoteFilterConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IntegrationActionAddNoteFilterCondition {
		return vs[0].([]IntegrationActionAddNoteFilterCondition)[vs[1].(int)]
	}).(IntegrationActionAddNoteFilterConditionOutput)
}

type IntegrationActionClose struct {
	// An identifier that is used for alert deduplication. Default: `{{alias}}`.
	Alias *string `pulumi:"alias"`
	// Used to specify rules for matching alerts and the filter type. Please note that depending on the integration type the field names in the filter conditions are:
	// * For SNS integration: `actions`, `alias`, `entity`, `Message`, `recipients`, `responders`, `Subject`, `tags`, `teams`, `eventType`, `Timestamp`, `TopicArn`.
	// * For API integration: `message`, `alias`, `description`, `source`, `entity`, `tags`, `actions`, `details`, `extra-properties`, `recipients`, `teams`, `priority`, `eventType`.
	// * For Email integration: `fromAddress`, `fromName`, `conversationSubject`, `subject`
	Filters []IntegrationActionCloseFilter `pulumi:"filters"`
	// Name of the integration action.
	Name string `pulumi:"name"`
	// Additional alert action note.
	Note *string `pulumi:"note"`
	// Integer value that defines in which order the action will be performed. Default: `1`.
	Order *int `pulumi:"order"`
	// The responder type - can be `escalation`, `team` or `user`.
	Type *string `pulumi:"type"`
	// Owner of the execution for integration action.
	User *string `pulumi:"user"`
}

// IntegrationActionCloseInput is an input type that accepts IntegrationActionCloseArgs and IntegrationActionCloseOutput values.
// You can construct a concrete instance of `IntegrationActionCloseInput` via:
//
//	IntegrationActionCloseArgs{...}
type IntegrationActionCloseInput interface {
	pulumi.Input

	ToIntegrationActionCloseOutput() IntegrationActionCloseOutput
	ToIntegrationActionCloseOutputWithContext(context.Context) IntegrationActionCloseOutput
}

type IntegrationActionCloseArgs struct {
	// An identifier that is used for alert deduplication. Default: `{{alias}}`.
	Alias pulumi.StringPtrInput `pulumi:"alias"`
	// Used to specify rules for matching alerts and the filter type. Please note that depending on the integration type the field names in the filter conditions are:
	// * For SNS integration: `actions`, `alias`, `entity`, `Message`, `recipients`, `responders`, `Subject`, `tags`, `teams`, `eventType`, `Timestamp`, `TopicArn`.
	// * For API integration: `message`, `alias`, `description`, `source`, `entity`, `tags`, `actions`, `details`, `extra-properties`, `recipients`, `teams`, `priority`, `eventType`.
	// * For Email integration: `fromAddress`, `fromName`, `conversationSubject`, `subject`
	Filters IntegrationActionCloseFilterArrayInput `pulumi:"filters"`
	// Name of the integration action.
	Name pulumi.StringInput `pulumi:"name"`
	// Additional alert action note.
	Note pulumi.StringPtrInput `pulumi:"note"`
	// Integer value that defines in which order the action will be performed. Default: `1`.
	Order pulumi.IntPtrInput `pulumi:"order"`
	// The responder type - can be `escalation`, `team` or `user`.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Owner of the execution for integration action.
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (IntegrationActionCloseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationActionClose)(nil)).Elem()
}

func (i IntegrationActionCloseArgs) ToIntegrationActionCloseOutput() IntegrationActionCloseOutput {
	return i.ToIntegrationActionCloseOutputWithContext(context.Background())
}

func (i IntegrationActionCloseArgs) ToIntegrationActionCloseOutputWithContext(ctx context.Context) IntegrationActionCloseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationActionCloseOutput)
}

// IntegrationActionCloseArrayInput is an input type that accepts IntegrationActionCloseArray and IntegrationActionCloseArrayOutput values.
// You can construct a concrete instance of `IntegrationActionCloseArrayInput` via:
//
//	IntegrationActionCloseArray{ IntegrationActionCloseArgs{...} }
type IntegrationActionCloseArrayInput interface {
	pulumi.Input

	ToIntegrationActionCloseArrayOutput() IntegrationActionCloseArrayOutput
	ToIntegrationActionCloseArrayOutputWithContext(context.Context) IntegrationActionCloseArrayOutput
}

type IntegrationActionCloseArray []IntegrationActionCloseInput

func (IntegrationActionCloseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationActionClose)(nil)).Elem()
}

func (i IntegrationActionCloseArray) ToIntegrationActionCloseArrayOutput() IntegrationActionCloseArrayOutput {
	return i.ToIntegrationActionCloseArrayOutputWithContext(context.Background())
}

func (i IntegrationActionCloseArray) ToIntegrationActionCloseArrayOutputWithContext(ctx context.Context) IntegrationActionCloseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationActionCloseArrayOutput)
}

type IntegrationActionCloseOutput struct{ *pulumi.OutputState }

func (IntegrationActionCloseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationActionClose)(nil)).Elem()
}

func (o IntegrationActionCloseOutput) ToIntegrationActionCloseOutput() IntegrationActionCloseOutput {
	return o
}

func (o IntegrationActionCloseOutput) ToIntegrationActionCloseOutputWithContext(ctx context.Context) IntegrationActionCloseOutput {
	return o
}

// An identifier that is used for alert deduplication. Default: `{{alias}}`.
func (o IntegrationActionCloseOutput) Alias() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationActionClose) *string { return v.Alias }).(pulumi.StringPtrOutput)
}

// Used to specify rules for matching alerts and the filter type. Please note that depending on the integration type the field names in the filter conditions are:
// * For SNS integration: `actions`, `alias`, `entity`, `Message`, `recipients`, `responders`, `Subject`, `tags`, `teams`, `eventType`, `Timestamp`, `TopicArn`.
// * For API integration: `message`, `alias`, `description`, `source`, `entity`, `tags`, `actions`, `details`, `extra-properties`, `recipients`, `teams`, `priority`, `eventType`.
// * For Email integration: `fromAddress`, `fromName`, `conversationSubject`, `subject`
func (o IntegrationActionCloseOutput) Filters() IntegrationActionCloseFilterArrayOutput {
	return o.ApplyT(func(v IntegrationActionClose) []IntegrationActionCloseFilter { return v.Filters }).(IntegrationActionCloseFilterArrayOutput)
}

// Name of the integration action.
func (o IntegrationActionCloseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationActionClose) string { return v.Name }).(pulumi.StringOutput)
}

// Additional alert action note.
func (o IntegrationActionCloseOutput) Note() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationActionClose) *string { return v.Note }).(pulumi.StringPtrOutput)
}

// Integer value that defines in which order the action will be performed. Default: `1`.
func (o IntegrationActionCloseOutput) Order() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IntegrationActionClose) *int { return v.Order }).(pulumi.IntPtrOutput)
}

// The responder type - can be `escalation`, `team` or `user`.
func (o IntegrationActionCloseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationActionClose) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Owner of the execution for integration action.
func (o IntegrationActionCloseOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationActionClose) *string { return v.User }).(pulumi.StringPtrOutput)
}

type IntegrationActionCloseArrayOutput struct{ *pulumi.OutputState }

func (IntegrationActionCloseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationActionClose)(nil)).Elem()
}

func (o IntegrationActionCloseArrayOutput) ToIntegrationActionCloseArrayOutput() IntegrationActionCloseArrayOutput {
	return o
}

func (o IntegrationActionCloseArrayOutput) ToIntegrationActionCloseArrayOutputWithContext(ctx context.Context) IntegrationActionCloseArrayOutput {
	return o
}

func (o IntegrationActionCloseArrayOutput) Index(i pulumi.IntInput) IntegrationActionCloseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IntegrationActionClose {
		return vs[0].([]IntegrationActionClose)[vs[1].(int)]
	}).(IntegrationActionCloseOutput)
}

type IntegrationActionCloseFilter struct {
	Conditions []IntegrationActionCloseFilterCondition `pulumi:"conditions"`
	// The responder type - can be `escalation`, `team` or `user`.
	Type string `pulumi:"type"`
}

// IntegrationActionCloseFilterInput is an input type that accepts IntegrationActionCloseFilterArgs and IntegrationActionCloseFilterOutput values.
// You can construct a concrete instance of `IntegrationActionCloseFilterInput` via:
//
//	IntegrationActionCloseFilterArgs{...}
type IntegrationActionCloseFilterInput interface {
	pulumi.Input

	ToIntegrationActionCloseFilterOutput() IntegrationActionCloseFilterOutput
	ToIntegrationActionCloseFilterOutputWithContext(context.Context) IntegrationActionCloseFilterOutput
}

type IntegrationActionCloseFilterArgs struct {
	Conditions IntegrationActionCloseFilterConditionArrayInput `pulumi:"conditions"`
	// The responder type - can be `escalation`, `team` or `user`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (IntegrationActionCloseFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationActionCloseFilter)(nil)).Elem()
}

func (i IntegrationActionCloseFilterArgs) ToIntegrationActionCloseFilterOutput() IntegrationActionCloseFilterOutput {
	return i.ToIntegrationActionCloseFilterOutputWithContext(context.Background())
}

func (i IntegrationActionCloseFilterArgs) ToIntegrationActionCloseFilterOutputWithContext(ctx context.Context) IntegrationActionCloseFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationActionCloseFilterOutput)
}

// IntegrationActionCloseFilterArrayInput is an input type that accepts IntegrationActionCloseFilterArray and IntegrationActionCloseFilterArrayOutput values.
// You can construct a concrete instance of `IntegrationActionCloseFilterArrayInput` via:
//
//	IntegrationActionCloseFilterArray{ IntegrationActionCloseFilterArgs{...} }
type IntegrationActionCloseFilterArrayInput interface {
	pulumi.Input

	ToIntegrationActionCloseFilterArrayOutput() IntegrationActionCloseFilterArrayOutput
	ToIntegrationActionCloseFilterArrayOutputWithContext(context.Context) IntegrationActionCloseFilterArrayOutput
}

type IntegrationActionCloseFilterArray []IntegrationActionCloseFilterInput

func (IntegrationActionCloseFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationActionCloseFilter)(nil)).Elem()
}

func (i IntegrationActionCloseFilterArray) ToIntegrationActionCloseFilterArrayOutput() IntegrationActionCloseFilterArrayOutput {
	return i.ToIntegrationActionCloseFilterArrayOutputWithContext(context.Background())
}

func (i IntegrationActionCloseFilterArray) ToIntegrationActionCloseFilterArrayOutputWithContext(ctx context.Context) IntegrationActionCloseFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationActionCloseFilterArrayOutput)
}

type IntegrationActionCloseFilterOutput struct{ *pulumi.OutputState }

func (IntegrationActionCloseFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationActionCloseFilter)(nil)).Elem()
}

func (o IntegrationActionCloseFilterOutput) ToIntegrationActionCloseFilterOutput() IntegrationActionCloseFilterOutput {
	return o
}

func (o IntegrationActionCloseFilterOutput) ToIntegrationActionCloseFilterOutputWithContext(ctx context.Context) IntegrationActionCloseFilterOutput {
	return o
}

func (o IntegrationActionCloseFilterOutput) Conditions() IntegrationActionCloseFilterConditionArrayOutput {
	return o.ApplyT(func(v IntegrationActionCloseFilter) []IntegrationActionCloseFilterCondition { return v.Conditions }).(IntegrationActionCloseFilterConditionArrayOutput)
}

// The responder type - can be `escalation`, `team` or `user`.
func (o IntegrationActionCloseFilterOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationActionCloseFilter) string { return v.Type }).(pulumi.StringOutput)
}

type IntegrationActionCloseFilterArrayOutput struct{ *pulumi.OutputState }

func (IntegrationActionCloseFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationActionCloseFilter)(nil)).Elem()
}

func (o IntegrationActionCloseFilterArrayOutput) ToIntegrationActionCloseFilterArrayOutput() IntegrationActionCloseFilterArrayOutput {
	return o
}

func (o IntegrationActionCloseFilterArrayOutput) ToIntegrationActionCloseFilterArrayOutputWithContext(ctx context.Context) IntegrationActionCloseFilterArrayOutput {
	return o
}

func (o IntegrationActionCloseFilterArrayOutput) Index(i pulumi.IntInput) IntegrationActionCloseFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IntegrationActionCloseFilter {
		return vs[0].([]IntegrationActionCloseFilter)[vs[1].(int)]
	}).(IntegrationActionCloseFilterOutput)
}

type IntegrationActionCloseFilterCondition struct {
	ExpectedValue *string `pulumi:"expectedValue"`
	Field         string  `pulumi:"field"`
	Key           *string `pulumi:"key"`
	Not           *bool   `pulumi:"not"`
	Operation     string  `pulumi:"operation"`
	// Integer value that defines in which order the action will be performed. Default: `1`.
	Order *int `pulumi:"order"`
}

// IntegrationActionCloseFilterConditionInput is an input type that accepts IntegrationActionCloseFilterConditionArgs and IntegrationActionCloseFilterConditionOutput values.
// You can construct a concrete instance of `IntegrationActionCloseFilterConditionInput` via:
//
//	IntegrationActionCloseFilterConditionArgs{...}
type IntegrationActionCloseFilterConditionInput interface {
	pulumi.Input

	ToIntegrationActionCloseFilterConditionOutput() IntegrationActionCloseFilterConditionOutput
	ToIntegrationActionCloseFilterConditionOutputWithContext(context.Context) IntegrationActionCloseFilterConditionOutput
}

type IntegrationActionCloseFilterConditionArgs struct {
	ExpectedValue pulumi.StringPtrInput `pulumi:"expectedValue"`
	Field         pulumi.StringInput    `pulumi:"field"`
	Key           pulumi.StringPtrInput `pulumi:"key"`
	Not           pulumi.BoolPtrInput   `pulumi:"not"`
	Operation     pulumi.StringInput    `pulumi:"operation"`
	// Integer value that defines in which order the action will be performed. Default: `1`.
	Order pulumi.IntPtrInput `pulumi:"order"`
}

func (IntegrationActionCloseFilterConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationActionCloseFilterCondition)(nil)).Elem()
}

func (i IntegrationActionCloseFilterConditionArgs) ToIntegrationActionCloseFilterConditionOutput() IntegrationActionCloseFilterConditionOutput {
	return i.ToIntegrationActionCloseFilterConditionOutputWithContext(context.Background())
}

func (i IntegrationActionCloseFilterConditionArgs) ToIntegrationActionCloseFilterConditionOutputWithContext(ctx context.Context) IntegrationActionCloseFilterConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationActionCloseFilterConditionOutput)
}

// IntegrationActionCloseFilterConditionArrayInput is an input type that accepts IntegrationActionCloseFilterConditionArray and IntegrationActionCloseFilterConditionArrayOutput values.
// You can construct a concrete instance of `IntegrationActionCloseFilterConditionArrayInput` via:
//
//	IntegrationActionCloseFilterConditionArray{ IntegrationActionCloseFilterConditionArgs{...} }
type IntegrationActionCloseFilterConditionArrayInput interface {
	pulumi.Input

	ToIntegrationActionCloseFilterConditionArrayOutput() IntegrationActionCloseFilterConditionArrayOutput
	ToIntegrationActionCloseFilterConditionArrayOutputWithContext(context.Context) IntegrationActionCloseFilterConditionArrayOutput
}

type IntegrationActionCloseFilterConditionArray []IntegrationActionCloseFilterConditionInput

func (IntegrationActionCloseFilterConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationActionCloseFilterCondition)(nil)).Elem()
}

func (i IntegrationActionCloseFilterConditionArray) ToIntegrationActionCloseFilterConditionArrayOutput() IntegrationActionCloseFilterConditionArrayOutput {
	return i.ToIntegrationActionCloseFilterConditionArrayOutputWithContext(context.Background())
}

func (i IntegrationActionCloseFilterConditionArray) ToIntegrationActionCloseFilterConditionArrayOutputWithContext(ctx context.Context) IntegrationActionCloseFilterConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationActionCloseFilterConditionArrayOutput)
}

type IntegrationActionCloseFilterConditionOutput struct{ *pulumi.OutputState }

func (IntegrationActionCloseFilterConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationActionCloseFilterCondition)(nil)).Elem()
}

func (o IntegrationActionCloseFilterConditionOutput) ToIntegrationActionCloseFilterConditionOutput() IntegrationActionCloseFilterConditionOutput {
	return o
}

func (o IntegrationActionCloseFilterConditionOutput) ToIntegrationActionCloseFilterConditionOutputWithContext(ctx context.Context) IntegrationActionCloseFilterConditionOutput {
	return o
}

func (o IntegrationActionCloseFilterConditionOutput) ExpectedValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationActionCloseFilterCondition) *string { return v.ExpectedValue }).(pulumi.StringPtrOutput)
}

func (o IntegrationActionCloseFilterConditionOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationActionCloseFilterCondition) string { return v.Field }).(pulumi.StringOutput)
}

func (o IntegrationActionCloseFilterConditionOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationActionCloseFilterCondition) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o IntegrationActionCloseFilterConditionOutput) Not() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IntegrationActionCloseFilterCondition) *bool { return v.Not }).(pulumi.BoolPtrOutput)
}

func (o IntegrationActionCloseFilterConditionOutput) Operation() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationActionCloseFilterCondition) string { return v.Operation }).(pulumi.StringOutput)
}

// Integer value that defines in which order the action will be performed. Default: `1`.
func (o IntegrationActionCloseFilterConditionOutput) Order() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IntegrationActionCloseFilterCondition) *int { return v.Order }).(pulumi.IntPtrOutput)
}

type IntegrationActionCloseFilterConditionArrayOutput struct{ *pulumi.OutputState }

func (IntegrationActionCloseFilterConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationActionCloseFilterCondition)(nil)).Elem()
}

func (o IntegrationActionCloseFilterConditionArrayOutput) ToIntegrationActionCloseFilterConditionArrayOutput() IntegrationActionCloseFilterConditionArrayOutput {
	return o
}

func (o IntegrationActionCloseFilterConditionArrayOutput) ToIntegrationActionCloseFilterConditionArrayOutputWithContext(ctx context.Context) IntegrationActionCloseFilterConditionArrayOutput {
	return o
}

func (o IntegrationActionCloseFilterConditionArrayOutput) Index(i pulumi.IntInput) IntegrationActionCloseFilterConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IntegrationActionCloseFilterCondition {
		return vs[0].([]IntegrationActionCloseFilterCondition)[vs[1].(int)]
	}).(IntegrationActionCloseFilterConditionOutput)
}

type IntegrationActionCreate struct {
	AlertActions []string `pulumi:"alertActions"`
	// An identifier that is used for alert deduplication. Default: `{{alias}}`.
	Alias             *string `pulumi:"alias"`
	AppendAttachments *bool   `pulumi:"appendAttachments"`
	// Custom alert priority. e.g. ``{{message.substring(0,2)}}``
	CustomPriority *string `pulumi:"customPriority"`
	// Detailed description of the alert, anything that may not have fit in the `message` field.
	Description *string `pulumi:"description"`
	// The entity the alert is related to.
	Entity *string `pulumi:"entity"`
	// Set of user defined properties specified as a map.
	ExtraProperties map[string]string `pulumi:"extraProperties"`
	// Used to specify rules for matching alerts and the filter type. Please note that depending on the integration type the field names in the filter conditions are:
	// * For SNS integration: `actions`, `alias`, `entity`, `Message`, `recipients`, `responders`, `Subject`, `tags`, `teams`, `eventType`, `Timestamp`, `TopicArn`.
	// * For API integration: `message`, `alias`, `description`, `source`, `entity`, `tags`, `actions`, `details`, `extra-properties`, `recipients`, `teams`, `priority`, `eventType`.
	// * For Email integration: `fromAddress`, `fromName`, `conversationSubject`, `subject`
	Filters                          []IntegrationActionCreateFilter `pulumi:"filters"`
	IgnoreAlertActionsFromPayload    *bool                           `pulumi:"ignoreAlertActionsFromPayload"`
	IgnoreExtraPropertiesFromPayload *bool                           `pulumi:"ignoreExtraPropertiesFromPayload"`
	// If enabled, the integration will ignore responders sent in request payloads.
	IgnoreRespondersFromPayload *bool `pulumi:"ignoreRespondersFromPayload"`
	IgnoreTagsFromPayload       *bool `pulumi:"ignoreTagsFromPayload"`
	// If enabled, the integration will ignore teams sent in request payloads.
	IgnoreTeamsFromPayload *bool `pulumi:"ignoreTeamsFromPayload"`
	// Alert text limited to 130 characters.
	Message *string `pulumi:"message"`
	// Name of the integration action.
	Name string `pulumi:"name"`
	// Additional alert action note.
	Note *string `pulumi:"note"`
	// Integer value that defines in which order the action will be performed. Default: `1`.
	Order *int `pulumi:"order"`
	// Alert priority.
	Priority *string `pulumi:"priority"`
	// User, schedule, teams or escalation names to calculate which users will receive notifications of the alert.
	Responders []IntegrationActionCreateResponder `pulumi:"responders"`
	// User defined field to specify source of action.
	Source *string `pulumi:"source"`
	// Comma separated list of labels to be attached to the alert.
	Tags []string `pulumi:"tags"`
	// The responder type - can be `escalation`, `team` or `user`.
	Type *string `pulumi:"type"`
	// Owner of the execution for integration action.
	User *string `pulumi:"user"`
}

// IntegrationActionCreateInput is an input type that accepts IntegrationActionCreateArgs and IntegrationActionCreateOutput values.
// You can construct a concrete instance of `IntegrationActionCreateInput` via:
//
//	IntegrationActionCreateArgs{...}
type IntegrationActionCreateInput interface {
	pulumi.Input

	ToIntegrationActionCreateOutput() IntegrationActionCreateOutput
	ToIntegrationActionCreateOutputWithContext(context.Context) IntegrationActionCreateOutput
}

type IntegrationActionCreateArgs struct {
	AlertActions pulumi.StringArrayInput `pulumi:"alertActions"`
	// An identifier that is used for alert deduplication. Default: `{{alias}}`.
	Alias             pulumi.StringPtrInput `pulumi:"alias"`
	AppendAttachments pulumi.BoolPtrInput   `pulumi:"appendAttachments"`
	// Custom alert priority. e.g. ``{{message.substring(0,2)}}``
	CustomPriority pulumi.StringPtrInput `pulumi:"customPriority"`
	// Detailed description of the alert, anything that may not have fit in the `message` field.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The entity the alert is related to.
	Entity pulumi.StringPtrInput `pulumi:"entity"`
	// Set of user defined properties specified as a map.
	ExtraProperties pulumi.StringMapInput `pulumi:"extraProperties"`
	// Used to specify rules for matching alerts and the filter type. Please note that depending on the integration type the field names in the filter conditions are:
	// * For SNS integration: `actions`, `alias`, `entity`, `Message`, `recipients`, `responders`, `Subject`, `tags`, `teams`, `eventType`, `Timestamp`, `TopicArn`.
	// * For API integration: `message`, `alias`, `description`, `source`, `entity`, `tags`, `actions`, `details`, `extra-properties`, `recipients`, `teams`, `priority`, `eventType`.
	// * For Email integration: `fromAddress`, `fromName`, `conversationSubject`, `subject`
	Filters                          IntegrationActionCreateFilterArrayInput `pulumi:"filters"`
	IgnoreAlertActionsFromPayload    pulumi.BoolPtrInput                     `pulumi:"ignoreAlertActionsFromPayload"`
	IgnoreExtraPropertiesFromPayload pulumi.BoolPtrInput                     `pulumi:"ignoreExtraPropertiesFromPayload"`
	// If enabled, the integration will ignore responders sent in request payloads.
	IgnoreRespondersFromPayload pulumi.BoolPtrInput `pulumi:"ignoreRespondersFromPayload"`
	IgnoreTagsFromPayload       pulumi.BoolPtrInput `pulumi:"ignoreTagsFromPayload"`
	// If enabled, the integration will ignore teams sent in request payloads.
	IgnoreTeamsFromPayload pulumi.BoolPtrInput `pulumi:"ignoreTeamsFromPayload"`
	// Alert text limited to 130 characters.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Name of the integration action.
	Name pulumi.StringInput `pulumi:"name"`
	// Additional alert action note.
	Note pulumi.StringPtrInput `pulumi:"note"`
	// Integer value that defines in which order the action will be performed. Default: `1`.
	Order pulumi.IntPtrInput `pulumi:"order"`
	// Alert priority.
	Priority pulumi.StringPtrInput `pulumi:"priority"`
	// User, schedule, teams or escalation names to calculate which users will receive notifications of the alert.
	Responders IntegrationActionCreateResponderArrayInput `pulumi:"responders"`
	// User defined field to specify source of action.
	Source pulumi.StringPtrInput `pulumi:"source"`
	// Comma separated list of labels to be attached to the alert.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
	// The responder type - can be `escalation`, `team` or `user`.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Owner of the execution for integration action.
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (IntegrationActionCreateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationActionCreate)(nil)).Elem()
}

func (i IntegrationActionCreateArgs) ToIntegrationActionCreateOutput() IntegrationActionCreateOutput {
	return i.ToIntegrationActionCreateOutputWithContext(context.Background())
}

func (i IntegrationActionCreateArgs) ToIntegrationActionCreateOutputWithContext(ctx context.Context) IntegrationActionCreateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationActionCreateOutput)
}

// IntegrationActionCreateArrayInput is an input type that accepts IntegrationActionCreateArray and IntegrationActionCreateArrayOutput values.
// You can construct a concrete instance of `IntegrationActionCreateArrayInput` via:
//
//	IntegrationActionCreateArray{ IntegrationActionCreateArgs{...} }
type IntegrationActionCreateArrayInput interface {
	pulumi.Input

	ToIntegrationActionCreateArrayOutput() IntegrationActionCreateArrayOutput
	ToIntegrationActionCreateArrayOutputWithContext(context.Context) IntegrationActionCreateArrayOutput
}

type IntegrationActionCreateArray []IntegrationActionCreateInput

func (IntegrationActionCreateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationActionCreate)(nil)).Elem()
}

func (i IntegrationActionCreateArray) ToIntegrationActionCreateArrayOutput() IntegrationActionCreateArrayOutput {
	return i.ToIntegrationActionCreateArrayOutputWithContext(context.Background())
}

func (i IntegrationActionCreateArray) ToIntegrationActionCreateArrayOutputWithContext(ctx context.Context) IntegrationActionCreateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationActionCreateArrayOutput)
}

type IntegrationActionCreateOutput struct{ *pulumi.OutputState }

func (IntegrationActionCreateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationActionCreate)(nil)).Elem()
}

func (o IntegrationActionCreateOutput) ToIntegrationActionCreateOutput() IntegrationActionCreateOutput {
	return o
}

func (o IntegrationActionCreateOutput) ToIntegrationActionCreateOutputWithContext(ctx context.Context) IntegrationActionCreateOutput {
	return o
}

func (o IntegrationActionCreateOutput) AlertActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IntegrationActionCreate) []string { return v.AlertActions }).(pulumi.StringArrayOutput)
}

// An identifier that is used for alert deduplication. Default: `{{alias}}`.
func (o IntegrationActionCreateOutput) Alias() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationActionCreate) *string { return v.Alias }).(pulumi.StringPtrOutput)
}

func (o IntegrationActionCreateOutput) AppendAttachments() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IntegrationActionCreate) *bool { return v.AppendAttachments }).(pulumi.BoolPtrOutput)
}

// Custom alert priority. e.g. “{{message.substring(0,2)}}“
func (o IntegrationActionCreateOutput) CustomPriority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationActionCreate) *string { return v.CustomPriority }).(pulumi.StringPtrOutput)
}

// Detailed description of the alert, anything that may not have fit in the `message` field.
func (o IntegrationActionCreateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationActionCreate) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The entity the alert is related to.
func (o IntegrationActionCreateOutput) Entity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationActionCreate) *string { return v.Entity }).(pulumi.StringPtrOutput)
}

// Set of user defined properties specified as a map.
func (o IntegrationActionCreateOutput) ExtraProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v IntegrationActionCreate) map[string]string { return v.ExtraProperties }).(pulumi.StringMapOutput)
}

// Used to specify rules for matching alerts and the filter type. Please note that depending on the integration type the field names in the filter conditions are:
// * For SNS integration: `actions`, `alias`, `entity`, `Message`, `recipients`, `responders`, `Subject`, `tags`, `teams`, `eventType`, `Timestamp`, `TopicArn`.
// * For API integration: `message`, `alias`, `description`, `source`, `entity`, `tags`, `actions`, `details`, `extra-properties`, `recipients`, `teams`, `priority`, `eventType`.
// * For Email integration: `fromAddress`, `fromName`, `conversationSubject`, `subject`
func (o IntegrationActionCreateOutput) Filters() IntegrationActionCreateFilterArrayOutput {
	return o.ApplyT(func(v IntegrationActionCreate) []IntegrationActionCreateFilter { return v.Filters }).(IntegrationActionCreateFilterArrayOutput)
}

func (o IntegrationActionCreateOutput) IgnoreAlertActionsFromPayload() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IntegrationActionCreate) *bool { return v.IgnoreAlertActionsFromPayload }).(pulumi.BoolPtrOutput)
}

func (o IntegrationActionCreateOutput) IgnoreExtraPropertiesFromPayload() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IntegrationActionCreate) *bool { return v.IgnoreExtraPropertiesFromPayload }).(pulumi.BoolPtrOutput)
}

// If enabled, the integration will ignore responders sent in request payloads.
func (o IntegrationActionCreateOutput) IgnoreRespondersFromPayload() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IntegrationActionCreate) *bool { return v.IgnoreRespondersFromPayload }).(pulumi.BoolPtrOutput)
}

func (o IntegrationActionCreateOutput) IgnoreTagsFromPayload() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IntegrationActionCreate) *bool { return v.IgnoreTagsFromPayload }).(pulumi.BoolPtrOutput)
}

// If enabled, the integration will ignore teams sent in request payloads.
func (o IntegrationActionCreateOutput) IgnoreTeamsFromPayload() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IntegrationActionCreate) *bool { return v.IgnoreTeamsFromPayload }).(pulumi.BoolPtrOutput)
}

// Alert text limited to 130 characters.
func (o IntegrationActionCreateOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationActionCreate) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Name of the integration action.
func (o IntegrationActionCreateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationActionCreate) string { return v.Name }).(pulumi.StringOutput)
}

// Additional alert action note.
func (o IntegrationActionCreateOutput) Note() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationActionCreate) *string { return v.Note }).(pulumi.StringPtrOutput)
}

// Integer value that defines in which order the action will be performed. Default: `1`.
func (o IntegrationActionCreateOutput) Order() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IntegrationActionCreate) *int { return v.Order }).(pulumi.IntPtrOutput)
}

// Alert priority.
func (o IntegrationActionCreateOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationActionCreate) *string { return v.Priority }).(pulumi.StringPtrOutput)
}

// User, schedule, teams or escalation names to calculate which users will receive notifications of the alert.
func (o IntegrationActionCreateOutput) Responders() IntegrationActionCreateResponderArrayOutput {
	return o.ApplyT(func(v IntegrationActionCreate) []IntegrationActionCreateResponder { return v.Responders }).(IntegrationActionCreateResponderArrayOutput)
}

// User defined field to specify source of action.
func (o IntegrationActionCreateOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationActionCreate) *string { return v.Source }).(pulumi.StringPtrOutput)
}

// Comma separated list of labels to be attached to the alert.
func (o IntegrationActionCreateOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v IntegrationActionCreate) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// The responder type - can be `escalation`, `team` or `user`.
func (o IntegrationActionCreateOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationActionCreate) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Owner of the execution for integration action.
func (o IntegrationActionCreateOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationActionCreate) *string { return v.User }).(pulumi.StringPtrOutput)
}

type IntegrationActionCreateArrayOutput struct{ *pulumi.OutputState }

func (IntegrationActionCreateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationActionCreate)(nil)).Elem()
}

func (o IntegrationActionCreateArrayOutput) ToIntegrationActionCreateArrayOutput() IntegrationActionCreateArrayOutput {
	return o
}

func (o IntegrationActionCreateArrayOutput) ToIntegrationActionCreateArrayOutputWithContext(ctx context.Context) IntegrationActionCreateArrayOutput {
	return o
}

func (o IntegrationActionCreateArrayOutput) Index(i pulumi.IntInput) IntegrationActionCreateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IntegrationActionCreate {
		return vs[0].([]IntegrationActionCreate)[vs[1].(int)]
	}).(IntegrationActionCreateOutput)
}

type IntegrationActionCreateFilter struct {
	Conditions []IntegrationActionCreateFilterCondition `pulumi:"conditions"`
	// The responder type - can be `escalation`, `team` or `user`.
	Type string `pulumi:"type"`
}

// IntegrationActionCreateFilterInput is an input type that accepts IntegrationActionCreateFilterArgs and IntegrationActionCreateFilterOutput values.
// You can construct a concrete instance of `IntegrationActionCreateFilterInput` via:
//
//	IntegrationActionCreateFilterArgs{...}
type IntegrationActionCreateFilterInput interface {
	pulumi.Input

	ToIntegrationActionCreateFilterOutput() IntegrationActionCreateFilterOutput
	ToIntegrationActionCreateFilterOutputWithContext(context.Context) IntegrationActionCreateFilterOutput
}

type IntegrationActionCreateFilterArgs struct {
	Conditions IntegrationActionCreateFilterConditionArrayInput `pulumi:"conditions"`
	// The responder type - can be `escalation`, `team` or `user`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (IntegrationActionCreateFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationActionCreateFilter)(nil)).Elem()
}

func (i IntegrationActionCreateFilterArgs) ToIntegrationActionCreateFilterOutput() IntegrationActionCreateFilterOutput {
	return i.ToIntegrationActionCreateFilterOutputWithContext(context.Background())
}

func (i IntegrationActionCreateFilterArgs) ToIntegrationActionCreateFilterOutputWithContext(ctx context.Context) IntegrationActionCreateFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationActionCreateFilterOutput)
}

// IntegrationActionCreateFilterArrayInput is an input type that accepts IntegrationActionCreateFilterArray and IntegrationActionCreateFilterArrayOutput values.
// You can construct a concrete instance of `IntegrationActionCreateFilterArrayInput` via:
//
//	IntegrationActionCreateFilterArray{ IntegrationActionCreateFilterArgs{...} }
type IntegrationActionCreateFilterArrayInput interface {
	pulumi.Input

	ToIntegrationActionCreateFilterArrayOutput() IntegrationActionCreateFilterArrayOutput
	ToIntegrationActionCreateFilterArrayOutputWithContext(context.Context) IntegrationActionCreateFilterArrayOutput
}

type IntegrationActionCreateFilterArray []IntegrationActionCreateFilterInput

func (IntegrationActionCreateFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationActionCreateFilter)(nil)).Elem()
}

func (i IntegrationActionCreateFilterArray) ToIntegrationActionCreateFilterArrayOutput() IntegrationActionCreateFilterArrayOutput {
	return i.ToIntegrationActionCreateFilterArrayOutputWithContext(context.Background())
}

func (i IntegrationActionCreateFilterArray) ToIntegrationActionCreateFilterArrayOutputWithContext(ctx context.Context) IntegrationActionCreateFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationActionCreateFilterArrayOutput)
}

type IntegrationActionCreateFilterOutput struct{ *pulumi.OutputState }

func (IntegrationActionCreateFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationActionCreateFilter)(nil)).Elem()
}

func (o IntegrationActionCreateFilterOutput) ToIntegrationActionCreateFilterOutput() IntegrationActionCreateFilterOutput {
	return o
}

func (o IntegrationActionCreateFilterOutput) ToIntegrationActionCreateFilterOutputWithContext(ctx context.Context) IntegrationActionCreateFilterOutput {
	return o
}

func (o IntegrationActionCreateFilterOutput) Conditions() IntegrationActionCreateFilterConditionArrayOutput {
	return o.ApplyT(func(v IntegrationActionCreateFilter) []IntegrationActionCreateFilterCondition { return v.Conditions }).(IntegrationActionCreateFilterConditionArrayOutput)
}

// The responder type - can be `escalation`, `team` or `user`.
func (o IntegrationActionCreateFilterOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationActionCreateFilter) string { return v.Type }).(pulumi.StringOutput)
}

type IntegrationActionCreateFilterArrayOutput struct{ *pulumi.OutputState }

func (IntegrationActionCreateFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationActionCreateFilter)(nil)).Elem()
}

func (o IntegrationActionCreateFilterArrayOutput) ToIntegrationActionCreateFilterArrayOutput() IntegrationActionCreateFilterArrayOutput {
	return o
}

func (o IntegrationActionCreateFilterArrayOutput) ToIntegrationActionCreateFilterArrayOutputWithContext(ctx context.Context) IntegrationActionCreateFilterArrayOutput {
	return o
}

func (o IntegrationActionCreateFilterArrayOutput) Index(i pulumi.IntInput) IntegrationActionCreateFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IntegrationActionCreateFilter {
		return vs[0].([]IntegrationActionCreateFilter)[vs[1].(int)]
	}).(IntegrationActionCreateFilterOutput)
}

type IntegrationActionCreateFilterCondition struct {
	ExpectedValue *string `pulumi:"expectedValue"`
	Field         string  `pulumi:"field"`
	Key           *string `pulumi:"key"`
	Not           *bool   `pulumi:"not"`
	Operation     string  `pulumi:"operation"`
	// Integer value that defines in which order the action will be performed. Default: `1`.
	Order *int `pulumi:"order"`
}

// IntegrationActionCreateFilterConditionInput is an input type that accepts IntegrationActionCreateFilterConditionArgs and IntegrationActionCreateFilterConditionOutput values.
// You can construct a concrete instance of `IntegrationActionCreateFilterConditionInput` via:
//
//	IntegrationActionCreateFilterConditionArgs{...}
type IntegrationActionCreateFilterConditionInput interface {
	pulumi.Input

	ToIntegrationActionCreateFilterConditionOutput() IntegrationActionCreateFilterConditionOutput
	ToIntegrationActionCreateFilterConditionOutputWithContext(context.Context) IntegrationActionCreateFilterConditionOutput
}

type IntegrationActionCreateFilterConditionArgs struct {
	ExpectedValue pulumi.StringPtrInput `pulumi:"expectedValue"`
	Field         pulumi.StringInput    `pulumi:"field"`
	Key           pulumi.StringPtrInput `pulumi:"key"`
	Not           pulumi.BoolPtrInput   `pulumi:"not"`
	Operation     pulumi.StringInput    `pulumi:"operation"`
	// Integer value that defines in which order the action will be performed. Default: `1`.
	Order pulumi.IntPtrInput `pulumi:"order"`
}

func (IntegrationActionCreateFilterConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationActionCreateFilterCondition)(nil)).Elem()
}

func (i IntegrationActionCreateFilterConditionArgs) ToIntegrationActionCreateFilterConditionOutput() IntegrationActionCreateFilterConditionOutput {
	return i.ToIntegrationActionCreateFilterConditionOutputWithContext(context.Background())
}

func (i IntegrationActionCreateFilterConditionArgs) ToIntegrationActionCreateFilterConditionOutputWithContext(ctx context.Context) IntegrationActionCreateFilterConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationActionCreateFilterConditionOutput)
}

// IntegrationActionCreateFilterConditionArrayInput is an input type that accepts IntegrationActionCreateFilterConditionArray and IntegrationActionCreateFilterConditionArrayOutput values.
// You can construct a concrete instance of `IntegrationActionCreateFilterConditionArrayInput` via:
//
//	IntegrationActionCreateFilterConditionArray{ IntegrationActionCreateFilterConditionArgs{...} }
type IntegrationActionCreateFilterConditionArrayInput interface {
	pulumi.Input

	ToIntegrationActionCreateFilterConditionArrayOutput() IntegrationActionCreateFilterConditionArrayOutput
	ToIntegrationActionCreateFilterConditionArrayOutputWithContext(context.Context) IntegrationActionCreateFilterConditionArrayOutput
}

type IntegrationActionCreateFilterConditionArray []IntegrationActionCreateFilterConditionInput

func (IntegrationActionCreateFilterConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationActionCreateFilterCondition)(nil)).Elem()
}

func (i IntegrationActionCreateFilterConditionArray) ToIntegrationActionCreateFilterConditionArrayOutput() IntegrationActionCreateFilterConditionArrayOutput {
	return i.ToIntegrationActionCreateFilterConditionArrayOutputWithContext(context.Background())
}

func (i IntegrationActionCreateFilterConditionArray) ToIntegrationActionCreateFilterConditionArrayOutputWithContext(ctx context.Context) IntegrationActionCreateFilterConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationActionCreateFilterConditionArrayOutput)
}

type IntegrationActionCreateFilterConditionOutput struct{ *pulumi.OutputState }

func (IntegrationActionCreateFilterConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationActionCreateFilterCondition)(nil)).Elem()
}

func (o IntegrationActionCreateFilterConditionOutput) ToIntegrationActionCreateFilterConditionOutput() IntegrationActionCreateFilterConditionOutput {
	return o
}

func (o IntegrationActionCreateFilterConditionOutput) ToIntegrationActionCreateFilterConditionOutputWithContext(ctx context.Context) IntegrationActionCreateFilterConditionOutput {
	return o
}

func (o IntegrationActionCreateFilterConditionOutput) ExpectedValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationActionCreateFilterCondition) *string { return v.ExpectedValue }).(pulumi.StringPtrOutput)
}

func (o IntegrationActionCreateFilterConditionOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationActionCreateFilterCondition) string { return v.Field }).(pulumi.StringOutput)
}

func (o IntegrationActionCreateFilterConditionOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationActionCreateFilterCondition) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o IntegrationActionCreateFilterConditionOutput) Not() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IntegrationActionCreateFilterCondition) *bool { return v.Not }).(pulumi.BoolPtrOutput)
}

func (o IntegrationActionCreateFilterConditionOutput) Operation() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationActionCreateFilterCondition) string { return v.Operation }).(pulumi.StringOutput)
}

// Integer value that defines in which order the action will be performed. Default: `1`.
func (o IntegrationActionCreateFilterConditionOutput) Order() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IntegrationActionCreateFilterCondition) *int { return v.Order }).(pulumi.IntPtrOutput)
}

type IntegrationActionCreateFilterConditionArrayOutput struct{ *pulumi.OutputState }

func (IntegrationActionCreateFilterConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationActionCreateFilterCondition)(nil)).Elem()
}

func (o IntegrationActionCreateFilterConditionArrayOutput) ToIntegrationActionCreateFilterConditionArrayOutput() IntegrationActionCreateFilterConditionArrayOutput {
	return o
}

func (o IntegrationActionCreateFilterConditionArrayOutput) ToIntegrationActionCreateFilterConditionArrayOutputWithContext(ctx context.Context) IntegrationActionCreateFilterConditionArrayOutput {
	return o
}

func (o IntegrationActionCreateFilterConditionArrayOutput) Index(i pulumi.IntInput) IntegrationActionCreateFilterConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IntegrationActionCreateFilterCondition {
		return vs[0].([]IntegrationActionCreateFilterCondition)[vs[1].(int)]
	}).(IntegrationActionCreateFilterConditionOutput)
}

type IntegrationActionCreateResponder struct {
	// The id of the responder.
	Id string `pulumi:"id"`
	// The responder type - can be `escalation`, `team` or `user`.
	Type string `pulumi:"type"`
}

// IntegrationActionCreateResponderInput is an input type that accepts IntegrationActionCreateResponderArgs and IntegrationActionCreateResponderOutput values.
// You can construct a concrete instance of `IntegrationActionCreateResponderInput` via:
//
//	IntegrationActionCreateResponderArgs{...}
type IntegrationActionCreateResponderInput interface {
	pulumi.Input

	ToIntegrationActionCreateResponderOutput() IntegrationActionCreateResponderOutput
	ToIntegrationActionCreateResponderOutputWithContext(context.Context) IntegrationActionCreateResponderOutput
}

type IntegrationActionCreateResponderArgs struct {
	// The id of the responder.
	Id pulumi.StringInput `pulumi:"id"`
	// The responder type - can be `escalation`, `team` or `user`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (IntegrationActionCreateResponderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationActionCreateResponder)(nil)).Elem()
}

func (i IntegrationActionCreateResponderArgs) ToIntegrationActionCreateResponderOutput() IntegrationActionCreateResponderOutput {
	return i.ToIntegrationActionCreateResponderOutputWithContext(context.Background())
}

func (i IntegrationActionCreateResponderArgs) ToIntegrationActionCreateResponderOutputWithContext(ctx context.Context) IntegrationActionCreateResponderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationActionCreateResponderOutput)
}

// IntegrationActionCreateResponderArrayInput is an input type that accepts IntegrationActionCreateResponderArray and IntegrationActionCreateResponderArrayOutput values.
// You can construct a concrete instance of `IntegrationActionCreateResponderArrayInput` via:
//
//	IntegrationActionCreateResponderArray{ IntegrationActionCreateResponderArgs{...} }
type IntegrationActionCreateResponderArrayInput interface {
	pulumi.Input

	ToIntegrationActionCreateResponderArrayOutput() IntegrationActionCreateResponderArrayOutput
	ToIntegrationActionCreateResponderArrayOutputWithContext(context.Context) IntegrationActionCreateResponderArrayOutput
}

type IntegrationActionCreateResponderArray []IntegrationActionCreateResponderInput

func (IntegrationActionCreateResponderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationActionCreateResponder)(nil)).Elem()
}

func (i IntegrationActionCreateResponderArray) ToIntegrationActionCreateResponderArrayOutput() IntegrationActionCreateResponderArrayOutput {
	return i.ToIntegrationActionCreateResponderArrayOutputWithContext(context.Background())
}

func (i IntegrationActionCreateResponderArray) ToIntegrationActionCreateResponderArrayOutputWithContext(ctx context.Context) IntegrationActionCreateResponderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationActionCreateResponderArrayOutput)
}

type IntegrationActionCreateResponderOutput struct{ *pulumi.OutputState }

func (IntegrationActionCreateResponderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationActionCreateResponder)(nil)).Elem()
}

func (o IntegrationActionCreateResponderOutput) ToIntegrationActionCreateResponderOutput() IntegrationActionCreateResponderOutput {
	return o
}

func (o IntegrationActionCreateResponderOutput) ToIntegrationActionCreateResponderOutputWithContext(ctx context.Context) IntegrationActionCreateResponderOutput {
	return o
}

// The id of the responder.
func (o IntegrationActionCreateResponderOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationActionCreateResponder) string { return v.Id }).(pulumi.StringOutput)
}

// The responder type - can be `escalation`, `team` or `user`.
func (o IntegrationActionCreateResponderOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationActionCreateResponder) string { return v.Type }).(pulumi.StringOutput)
}

type IntegrationActionCreateResponderArrayOutput struct{ *pulumi.OutputState }

func (IntegrationActionCreateResponderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationActionCreateResponder)(nil)).Elem()
}

func (o IntegrationActionCreateResponderArrayOutput) ToIntegrationActionCreateResponderArrayOutput() IntegrationActionCreateResponderArrayOutput {
	return o
}

func (o IntegrationActionCreateResponderArrayOutput) ToIntegrationActionCreateResponderArrayOutputWithContext(ctx context.Context) IntegrationActionCreateResponderArrayOutput {
	return o
}

func (o IntegrationActionCreateResponderArrayOutput) Index(i pulumi.IntInput) IntegrationActionCreateResponderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IntegrationActionCreateResponder {
		return vs[0].([]IntegrationActionCreateResponder)[vs[1].(int)]
	}).(IntegrationActionCreateResponderOutput)
}

type IntegrationActionIgnore struct {
	// Used to specify rules for matching alerts and the filter type. Please note that depending on the integration type the field names in the filter conditions are:
	// * For SNS integration: `actions`, `alias`, `entity`, `Message`, `recipients`, `responders`, `Subject`, `tags`, `teams`, `eventType`, `Timestamp`, `TopicArn`.
	// * For API integration: `message`, `alias`, `description`, `source`, `entity`, `tags`, `actions`, `details`, `extra-properties`, `recipients`, `teams`, `priority`, `eventType`.
	// * For Email integration: `fromAddress`, `fromName`, `conversationSubject`, `subject`
	Filters []IntegrationActionIgnoreFilter `pulumi:"filters"`
	// Name of the integration action.
	Name string `pulumi:"name"`
	// Integer value that defines in which order the action will be performed. Default: `1`.
	Order *int `pulumi:"order"`
	// The responder type - can be `escalation`, `team` or `user`.
	Type *string `pulumi:"type"`
}

// IntegrationActionIgnoreInput is an input type that accepts IntegrationActionIgnoreArgs and IntegrationActionIgnoreOutput values.
// You can construct a concrete instance of `IntegrationActionIgnoreInput` via:
//
//	IntegrationActionIgnoreArgs{...}
type IntegrationActionIgnoreInput interface {
	pulumi.Input

	ToIntegrationActionIgnoreOutput() IntegrationActionIgnoreOutput
	ToIntegrationActionIgnoreOutputWithContext(context.Context) IntegrationActionIgnoreOutput
}

type IntegrationActionIgnoreArgs struct {
	// Used to specify rules for matching alerts and the filter type. Please note that depending on the integration type the field names in the filter conditions are:
	// * For SNS integration: `actions`, `alias`, `entity`, `Message`, `recipients`, `responders`, `Subject`, `tags`, `teams`, `eventType`, `Timestamp`, `TopicArn`.
	// * For API integration: `message`, `alias`, `description`, `source`, `entity`, `tags`, `actions`, `details`, `extra-properties`, `recipients`, `teams`, `priority`, `eventType`.
	// * For Email integration: `fromAddress`, `fromName`, `conversationSubject`, `subject`
	Filters IntegrationActionIgnoreFilterArrayInput `pulumi:"filters"`
	// Name of the integration action.
	Name pulumi.StringInput `pulumi:"name"`
	// Integer value that defines in which order the action will be performed. Default: `1`.
	Order pulumi.IntPtrInput `pulumi:"order"`
	// The responder type - can be `escalation`, `team` or `user`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (IntegrationActionIgnoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationActionIgnore)(nil)).Elem()
}

func (i IntegrationActionIgnoreArgs) ToIntegrationActionIgnoreOutput() IntegrationActionIgnoreOutput {
	return i.ToIntegrationActionIgnoreOutputWithContext(context.Background())
}

func (i IntegrationActionIgnoreArgs) ToIntegrationActionIgnoreOutputWithContext(ctx context.Context) IntegrationActionIgnoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationActionIgnoreOutput)
}

// IntegrationActionIgnoreArrayInput is an input type that accepts IntegrationActionIgnoreArray and IntegrationActionIgnoreArrayOutput values.
// You can construct a concrete instance of `IntegrationActionIgnoreArrayInput` via:
//
//	IntegrationActionIgnoreArray{ IntegrationActionIgnoreArgs{...} }
type IntegrationActionIgnoreArrayInput interface {
	pulumi.Input

	ToIntegrationActionIgnoreArrayOutput() IntegrationActionIgnoreArrayOutput
	ToIntegrationActionIgnoreArrayOutputWithContext(context.Context) IntegrationActionIgnoreArrayOutput
}

type IntegrationActionIgnoreArray []IntegrationActionIgnoreInput

func (IntegrationActionIgnoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationActionIgnore)(nil)).Elem()
}

func (i IntegrationActionIgnoreArray) ToIntegrationActionIgnoreArrayOutput() IntegrationActionIgnoreArrayOutput {
	return i.ToIntegrationActionIgnoreArrayOutputWithContext(context.Background())
}

func (i IntegrationActionIgnoreArray) ToIntegrationActionIgnoreArrayOutputWithContext(ctx context.Context) IntegrationActionIgnoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationActionIgnoreArrayOutput)
}

type IntegrationActionIgnoreOutput struct{ *pulumi.OutputState }

func (IntegrationActionIgnoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationActionIgnore)(nil)).Elem()
}

func (o IntegrationActionIgnoreOutput) ToIntegrationActionIgnoreOutput() IntegrationActionIgnoreOutput {
	return o
}

func (o IntegrationActionIgnoreOutput) ToIntegrationActionIgnoreOutputWithContext(ctx context.Context) IntegrationActionIgnoreOutput {
	return o
}

// Used to specify rules for matching alerts and the filter type. Please note that depending on the integration type the field names in the filter conditions are:
// * For SNS integration: `actions`, `alias`, `entity`, `Message`, `recipients`, `responders`, `Subject`, `tags`, `teams`, `eventType`, `Timestamp`, `TopicArn`.
// * For API integration: `message`, `alias`, `description`, `source`, `entity`, `tags`, `actions`, `details`, `extra-properties`, `recipients`, `teams`, `priority`, `eventType`.
// * For Email integration: `fromAddress`, `fromName`, `conversationSubject`, `subject`
func (o IntegrationActionIgnoreOutput) Filters() IntegrationActionIgnoreFilterArrayOutput {
	return o.ApplyT(func(v IntegrationActionIgnore) []IntegrationActionIgnoreFilter { return v.Filters }).(IntegrationActionIgnoreFilterArrayOutput)
}

// Name of the integration action.
func (o IntegrationActionIgnoreOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationActionIgnore) string { return v.Name }).(pulumi.StringOutput)
}

// Integer value that defines in which order the action will be performed. Default: `1`.
func (o IntegrationActionIgnoreOutput) Order() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IntegrationActionIgnore) *int { return v.Order }).(pulumi.IntPtrOutput)
}

// The responder type - can be `escalation`, `team` or `user`.
func (o IntegrationActionIgnoreOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationActionIgnore) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type IntegrationActionIgnoreArrayOutput struct{ *pulumi.OutputState }

func (IntegrationActionIgnoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationActionIgnore)(nil)).Elem()
}

func (o IntegrationActionIgnoreArrayOutput) ToIntegrationActionIgnoreArrayOutput() IntegrationActionIgnoreArrayOutput {
	return o
}

func (o IntegrationActionIgnoreArrayOutput) ToIntegrationActionIgnoreArrayOutputWithContext(ctx context.Context) IntegrationActionIgnoreArrayOutput {
	return o
}

func (o IntegrationActionIgnoreArrayOutput) Index(i pulumi.IntInput) IntegrationActionIgnoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IntegrationActionIgnore {
		return vs[0].([]IntegrationActionIgnore)[vs[1].(int)]
	}).(IntegrationActionIgnoreOutput)
}

type IntegrationActionIgnoreFilter struct {
	Conditions []IntegrationActionIgnoreFilterCondition `pulumi:"conditions"`
	// The responder type - can be `escalation`, `team` or `user`.
	Type string `pulumi:"type"`
}

// IntegrationActionIgnoreFilterInput is an input type that accepts IntegrationActionIgnoreFilterArgs and IntegrationActionIgnoreFilterOutput values.
// You can construct a concrete instance of `IntegrationActionIgnoreFilterInput` via:
//
//	IntegrationActionIgnoreFilterArgs{...}
type IntegrationActionIgnoreFilterInput interface {
	pulumi.Input

	ToIntegrationActionIgnoreFilterOutput() IntegrationActionIgnoreFilterOutput
	ToIntegrationActionIgnoreFilterOutputWithContext(context.Context) IntegrationActionIgnoreFilterOutput
}

type IntegrationActionIgnoreFilterArgs struct {
	Conditions IntegrationActionIgnoreFilterConditionArrayInput `pulumi:"conditions"`
	// The responder type - can be `escalation`, `team` or `user`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (IntegrationActionIgnoreFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationActionIgnoreFilter)(nil)).Elem()
}

func (i IntegrationActionIgnoreFilterArgs) ToIntegrationActionIgnoreFilterOutput() IntegrationActionIgnoreFilterOutput {
	return i.ToIntegrationActionIgnoreFilterOutputWithContext(context.Background())
}

func (i IntegrationActionIgnoreFilterArgs) ToIntegrationActionIgnoreFilterOutputWithContext(ctx context.Context) IntegrationActionIgnoreFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationActionIgnoreFilterOutput)
}

// IntegrationActionIgnoreFilterArrayInput is an input type that accepts IntegrationActionIgnoreFilterArray and IntegrationActionIgnoreFilterArrayOutput values.
// You can construct a concrete instance of `IntegrationActionIgnoreFilterArrayInput` via:
//
//	IntegrationActionIgnoreFilterArray{ IntegrationActionIgnoreFilterArgs{...} }
type IntegrationActionIgnoreFilterArrayInput interface {
	pulumi.Input

	ToIntegrationActionIgnoreFilterArrayOutput() IntegrationActionIgnoreFilterArrayOutput
	ToIntegrationActionIgnoreFilterArrayOutputWithContext(context.Context) IntegrationActionIgnoreFilterArrayOutput
}

type IntegrationActionIgnoreFilterArray []IntegrationActionIgnoreFilterInput

func (IntegrationActionIgnoreFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationActionIgnoreFilter)(nil)).Elem()
}

func (i IntegrationActionIgnoreFilterArray) ToIntegrationActionIgnoreFilterArrayOutput() IntegrationActionIgnoreFilterArrayOutput {
	return i.ToIntegrationActionIgnoreFilterArrayOutputWithContext(context.Background())
}

func (i IntegrationActionIgnoreFilterArray) ToIntegrationActionIgnoreFilterArrayOutputWithContext(ctx context.Context) IntegrationActionIgnoreFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationActionIgnoreFilterArrayOutput)
}

type IntegrationActionIgnoreFilterOutput struct{ *pulumi.OutputState }

func (IntegrationActionIgnoreFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationActionIgnoreFilter)(nil)).Elem()
}

func (o IntegrationActionIgnoreFilterOutput) ToIntegrationActionIgnoreFilterOutput() IntegrationActionIgnoreFilterOutput {
	return o
}

func (o IntegrationActionIgnoreFilterOutput) ToIntegrationActionIgnoreFilterOutputWithContext(ctx context.Context) IntegrationActionIgnoreFilterOutput {
	return o
}

func (o IntegrationActionIgnoreFilterOutput) Conditions() IntegrationActionIgnoreFilterConditionArrayOutput {
	return o.ApplyT(func(v IntegrationActionIgnoreFilter) []IntegrationActionIgnoreFilterCondition { return v.Conditions }).(IntegrationActionIgnoreFilterConditionArrayOutput)
}

// The responder type - can be `escalation`, `team` or `user`.
func (o IntegrationActionIgnoreFilterOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationActionIgnoreFilter) string { return v.Type }).(pulumi.StringOutput)
}

type IntegrationActionIgnoreFilterArrayOutput struct{ *pulumi.OutputState }

func (IntegrationActionIgnoreFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationActionIgnoreFilter)(nil)).Elem()
}

func (o IntegrationActionIgnoreFilterArrayOutput) ToIntegrationActionIgnoreFilterArrayOutput() IntegrationActionIgnoreFilterArrayOutput {
	return o
}

func (o IntegrationActionIgnoreFilterArrayOutput) ToIntegrationActionIgnoreFilterArrayOutputWithContext(ctx context.Context) IntegrationActionIgnoreFilterArrayOutput {
	return o
}

func (o IntegrationActionIgnoreFilterArrayOutput) Index(i pulumi.IntInput) IntegrationActionIgnoreFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IntegrationActionIgnoreFilter {
		return vs[0].([]IntegrationActionIgnoreFilter)[vs[1].(int)]
	}).(IntegrationActionIgnoreFilterOutput)
}

type IntegrationActionIgnoreFilterCondition struct {
	ExpectedValue *string `pulumi:"expectedValue"`
	Field         string  `pulumi:"field"`
	Key           *string `pulumi:"key"`
	Not           *bool   `pulumi:"not"`
	Operation     string  `pulumi:"operation"`
	// Integer value that defines in which order the action will be performed. Default: `1`.
	Order *int `pulumi:"order"`
}

// IntegrationActionIgnoreFilterConditionInput is an input type that accepts IntegrationActionIgnoreFilterConditionArgs and IntegrationActionIgnoreFilterConditionOutput values.
// You can construct a concrete instance of `IntegrationActionIgnoreFilterConditionInput` via:
//
//	IntegrationActionIgnoreFilterConditionArgs{...}
type IntegrationActionIgnoreFilterConditionInput interface {
	pulumi.Input

	ToIntegrationActionIgnoreFilterConditionOutput() IntegrationActionIgnoreFilterConditionOutput
	ToIntegrationActionIgnoreFilterConditionOutputWithContext(context.Context) IntegrationActionIgnoreFilterConditionOutput
}

type IntegrationActionIgnoreFilterConditionArgs struct {
	ExpectedValue pulumi.StringPtrInput `pulumi:"expectedValue"`
	Field         pulumi.StringInput    `pulumi:"field"`
	Key           pulumi.StringPtrInput `pulumi:"key"`
	Not           pulumi.BoolPtrInput   `pulumi:"not"`
	Operation     pulumi.StringInput    `pulumi:"operation"`
	// Integer value that defines in which order the action will be performed. Default: `1`.
	Order pulumi.IntPtrInput `pulumi:"order"`
}

func (IntegrationActionIgnoreFilterConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationActionIgnoreFilterCondition)(nil)).Elem()
}

func (i IntegrationActionIgnoreFilterConditionArgs) ToIntegrationActionIgnoreFilterConditionOutput() IntegrationActionIgnoreFilterConditionOutput {
	return i.ToIntegrationActionIgnoreFilterConditionOutputWithContext(context.Background())
}

func (i IntegrationActionIgnoreFilterConditionArgs) ToIntegrationActionIgnoreFilterConditionOutputWithContext(ctx context.Context) IntegrationActionIgnoreFilterConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationActionIgnoreFilterConditionOutput)
}

// IntegrationActionIgnoreFilterConditionArrayInput is an input type that accepts IntegrationActionIgnoreFilterConditionArray and IntegrationActionIgnoreFilterConditionArrayOutput values.
// You can construct a concrete instance of `IntegrationActionIgnoreFilterConditionArrayInput` via:
//
//	IntegrationActionIgnoreFilterConditionArray{ IntegrationActionIgnoreFilterConditionArgs{...} }
type IntegrationActionIgnoreFilterConditionArrayInput interface {
	pulumi.Input

	ToIntegrationActionIgnoreFilterConditionArrayOutput() IntegrationActionIgnoreFilterConditionArrayOutput
	ToIntegrationActionIgnoreFilterConditionArrayOutputWithContext(context.Context) IntegrationActionIgnoreFilterConditionArrayOutput
}

type IntegrationActionIgnoreFilterConditionArray []IntegrationActionIgnoreFilterConditionInput

func (IntegrationActionIgnoreFilterConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationActionIgnoreFilterCondition)(nil)).Elem()
}

func (i IntegrationActionIgnoreFilterConditionArray) ToIntegrationActionIgnoreFilterConditionArrayOutput() IntegrationActionIgnoreFilterConditionArrayOutput {
	return i.ToIntegrationActionIgnoreFilterConditionArrayOutputWithContext(context.Background())
}

func (i IntegrationActionIgnoreFilterConditionArray) ToIntegrationActionIgnoreFilterConditionArrayOutputWithContext(ctx context.Context) IntegrationActionIgnoreFilterConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationActionIgnoreFilterConditionArrayOutput)
}

type IntegrationActionIgnoreFilterConditionOutput struct{ *pulumi.OutputState }

func (IntegrationActionIgnoreFilterConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationActionIgnoreFilterCondition)(nil)).Elem()
}

func (o IntegrationActionIgnoreFilterConditionOutput) ToIntegrationActionIgnoreFilterConditionOutput() IntegrationActionIgnoreFilterConditionOutput {
	return o
}

func (o IntegrationActionIgnoreFilterConditionOutput) ToIntegrationActionIgnoreFilterConditionOutputWithContext(ctx context.Context) IntegrationActionIgnoreFilterConditionOutput {
	return o
}

func (o IntegrationActionIgnoreFilterConditionOutput) ExpectedValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationActionIgnoreFilterCondition) *string { return v.ExpectedValue }).(pulumi.StringPtrOutput)
}

func (o IntegrationActionIgnoreFilterConditionOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationActionIgnoreFilterCondition) string { return v.Field }).(pulumi.StringOutput)
}

func (o IntegrationActionIgnoreFilterConditionOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntegrationActionIgnoreFilterCondition) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o IntegrationActionIgnoreFilterConditionOutput) Not() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IntegrationActionIgnoreFilterCondition) *bool { return v.Not }).(pulumi.BoolPtrOutput)
}

func (o IntegrationActionIgnoreFilterConditionOutput) Operation() pulumi.StringOutput {
	return o.ApplyT(func(v IntegrationActionIgnoreFilterCondition) string { return v.Operation }).(pulumi.StringOutput)
}

// Integer value that defines in which order the action will be performed. Default: `1`.
func (o IntegrationActionIgnoreFilterConditionOutput) Order() pulumi.IntPtrOutput {
	return o.ApplyT(func(v IntegrationActionIgnoreFilterCondition) *int { return v.Order }).(pulumi.IntPtrOutput)
}

type IntegrationActionIgnoreFilterConditionArrayOutput struct{ *pulumi.OutputState }

func (IntegrationActionIgnoreFilterConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntegrationActionIgnoreFilterCondition)(nil)).Elem()
}

func (o IntegrationActionIgnoreFilterConditionArrayOutput) ToIntegrationActionIgnoreFilterConditionArrayOutput() IntegrationActionIgnoreFilterConditionArrayOutput {
	return o
}

func (o IntegrationActionIgnoreFilterConditionArrayOutput) ToIntegrationActionIgnoreFilterConditionArrayOutputWithContext(ctx context.Context) IntegrationActionIgnoreFilterConditionArrayOutput {
	return o
}

func (o IntegrationActionIgnoreFilterConditionArrayOutput) Index(i pulumi.IntInput) IntegrationActionIgnoreFilterConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IntegrationActionIgnoreFilterCondition {
		return vs[0].([]IntegrationActionIgnoreFilterCondition)[vs[1].(int)]
	}).(IntegrationActionIgnoreFilterConditionOutput)
}

type MaintenanceRule struct {
	// This field represents the entity that maintenance will be applied. Entity field takes two mandatory fields as id and type.
	Entities []MaintenanceRuleEntity `pulumi:"entities"`
	// State of rule that will be defined in maintenance and can take either enabled or disabled for policy type rules. This field has to be disabled for integration type entity rules.
	State *string `pulumi:"state"`
}

// MaintenanceRuleInput is an input type that accepts MaintenanceRuleArgs and MaintenanceRuleOutput values.
// You can construct a concrete instance of `MaintenanceRuleInput` via:
//
//	MaintenanceRuleArgs{...}
type MaintenanceRuleInput interface {
	pulumi.Input

	ToMaintenanceRuleOutput() MaintenanceRuleOutput
	ToMaintenanceRuleOutputWithContext(context.Context) MaintenanceRuleOutput
}

type MaintenanceRuleArgs struct {
	// This field represents the entity that maintenance will be applied. Entity field takes two mandatory fields as id and type.
	Entities MaintenanceRuleEntityArrayInput `pulumi:"entities"`
	// State of rule that will be defined in maintenance and can take either enabled or disabled for policy type rules. This field has to be disabled for integration type entity rules.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (MaintenanceRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceRule)(nil)).Elem()
}

func (i MaintenanceRuleArgs) ToMaintenanceRuleOutput() MaintenanceRuleOutput {
	return i.ToMaintenanceRuleOutputWithContext(context.Background())
}

func (i MaintenanceRuleArgs) ToMaintenanceRuleOutputWithContext(ctx context.Context) MaintenanceRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceRuleOutput)
}

// MaintenanceRuleArrayInput is an input type that accepts MaintenanceRuleArray and MaintenanceRuleArrayOutput values.
// You can construct a concrete instance of `MaintenanceRuleArrayInput` via:
//
//	MaintenanceRuleArray{ MaintenanceRuleArgs{...} }
type MaintenanceRuleArrayInput interface {
	pulumi.Input

	ToMaintenanceRuleArrayOutput() MaintenanceRuleArrayOutput
	ToMaintenanceRuleArrayOutputWithContext(context.Context) MaintenanceRuleArrayOutput
}

type MaintenanceRuleArray []MaintenanceRuleInput

func (MaintenanceRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MaintenanceRule)(nil)).Elem()
}

func (i MaintenanceRuleArray) ToMaintenanceRuleArrayOutput() MaintenanceRuleArrayOutput {
	return i.ToMaintenanceRuleArrayOutputWithContext(context.Background())
}

func (i MaintenanceRuleArray) ToMaintenanceRuleArrayOutputWithContext(ctx context.Context) MaintenanceRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceRuleArrayOutput)
}

type MaintenanceRuleOutput struct{ *pulumi.OutputState }

func (MaintenanceRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceRule)(nil)).Elem()
}

func (o MaintenanceRuleOutput) ToMaintenanceRuleOutput() MaintenanceRuleOutput {
	return o
}

func (o MaintenanceRuleOutput) ToMaintenanceRuleOutputWithContext(ctx context.Context) MaintenanceRuleOutput {
	return o
}

// This field represents the entity that maintenance will be applied. Entity field takes two mandatory fields as id and type.
func (o MaintenanceRuleOutput) Entities() MaintenanceRuleEntityArrayOutput {
	return o.ApplyT(func(v MaintenanceRule) []MaintenanceRuleEntity { return v.Entities }).(MaintenanceRuleEntityArrayOutput)
}

// State of rule that will be defined in maintenance and can take either enabled or disabled for policy type rules. This field has to be disabled for integration type entity rules.
func (o MaintenanceRuleOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaintenanceRule) *string { return v.State }).(pulumi.StringPtrOutput)
}

type MaintenanceRuleArrayOutput struct{ *pulumi.OutputState }

func (MaintenanceRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MaintenanceRule)(nil)).Elem()
}

func (o MaintenanceRuleArrayOutput) ToMaintenanceRuleArrayOutput() MaintenanceRuleArrayOutput {
	return o
}

func (o MaintenanceRuleArrayOutput) ToMaintenanceRuleArrayOutputWithContext(ctx context.Context) MaintenanceRuleArrayOutput {
	return o
}

func (o MaintenanceRuleArrayOutput) Index(i pulumi.IntInput) MaintenanceRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MaintenanceRule {
		return vs[0].([]MaintenanceRule)[vs[1].(int)]
	}).(MaintenanceRuleOutput)
}

type MaintenanceRuleEntity struct {
	// The id of the entity that maintenance will be applied.
	Id *string `pulumi:"id"`
	// The type of the entity that maintenance will be applied. It can be either integration or policy.
	Type *string `pulumi:"type"`
}

// MaintenanceRuleEntityInput is an input type that accepts MaintenanceRuleEntityArgs and MaintenanceRuleEntityOutput values.
// You can construct a concrete instance of `MaintenanceRuleEntityInput` via:
//
//	MaintenanceRuleEntityArgs{...}
type MaintenanceRuleEntityInput interface {
	pulumi.Input

	ToMaintenanceRuleEntityOutput() MaintenanceRuleEntityOutput
	ToMaintenanceRuleEntityOutputWithContext(context.Context) MaintenanceRuleEntityOutput
}

type MaintenanceRuleEntityArgs struct {
	// The id of the entity that maintenance will be applied.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The type of the entity that maintenance will be applied. It can be either integration or policy.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (MaintenanceRuleEntityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceRuleEntity)(nil)).Elem()
}

func (i MaintenanceRuleEntityArgs) ToMaintenanceRuleEntityOutput() MaintenanceRuleEntityOutput {
	return i.ToMaintenanceRuleEntityOutputWithContext(context.Background())
}

func (i MaintenanceRuleEntityArgs) ToMaintenanceRuleEntityOutputWithContext(ctx context.Context) MaintenanceRuleEntityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceRuleEntityOutput)
}

// MaintenanceRuleEntityArrayInput is an input type that accepts MaintenanceRuleEntityArray and MaintenanceRuleEntityArrayOutput values.
// You can construct a concrete instance of `MaintenanceRuleEntityArrayInput` via:
//
//	MaintenanceRuleEntityArray{ MaintenanceRuleEntityArgs{...} }
type MaintenanceRuleEntityArrayInput interface {
	pulumi.Input

	ToMaintenanceRuleEntityArrayOutput() MaintenanceRuleEntityArrayOutput
	ToMaintenanceRuleEntityArrayOutputWithContext(context.Context) MaintenanceRuleEntityArrayOutput
}

type MaintenanceRuleEntityArray []MaintenanceRuleEntityInput

func (MaintenanceRuleEntityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MaintenanceRuleEntity)(nil)).Elem()
}

func (i MaintenanceRuleEntityArray) ToMaintenanceRuleEntityArrayOutput() MaintenanceRuleEntityArrayOutput {
	return i.ToMaintenanceRuleEntityArrayOutputWithContext(context.Background())
}

func (i MaintenanceRuleEntityArray) ToMaintenanceRuleEntityArrayOutputWithContext(ctx context.Context) MaintenanceRuleEntityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceRuleEntityArrayOutput)
}

type MaintenanceRuleEntityOutput struct{ *pulumi.OutputState }

func (MaintenanceRuleEntityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceRuleEntity)(nil)).Elem()
}

func (o MaintenanceRuleEntityOutput) ToMaintenanceRuleEntityOutput() MaintenanceRuleEntityOutput {
	return o
}

func (o MaintenanceRuleEntityOutput) ToMaintenanceRuleEntityOutputWithContext(ctx context.Context) MaintenanceRuleEntityOutput {
	return o
}

// The id of the entity that maintenance will be applied.
func (o MaintenanceRuleEntityOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaintenanceRuleEntity) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The type of the entity that maintenance will be applied. It can be either integration or policy.
func (o MaintenanceRuleEntityOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaintenanceRuleEntity) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type MaintenanceRuleEntityArrayOutput struct{ *pulumi.OutputState }

func (MaintenanceRuleEntityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MaintenanceRuleEntity)(nil)).Elem()
}

func (o MaintenanceRuleEntityArrayOutput) ToMaintenanceRuleEntityArrayOutput() MaintenanceRuleEntityArrayOutput {
	return o
}

func (o MaintenanceRuleEntityArrayOutput) ToMaintenanceRuleEntityArrayOutputWithContext(ctx context.Context) MaintenanceRuleEntityArrayOutput {
	return o
}

func (o MaintenanceRuleEntityArrayOutput) Index(i pulumi.IntInput) MaintenanceRuleEntityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MaintenanceRuleEntity {
		return vs[0].([]MaintenanceRuleEntity)[vs[1].(int)]
	}).(MaintenanceRuleEntityOutput)
}

type MaintenanceTime struct {
	// This parameter takes a date format as (yyyy-MM-dd'T'HH:mm:ssZ) (e.g. 2019-06-11T08:00:00+02:00).
	EndDate *string `pulumi:"endDate"`
	// This parameter takes a date format as (yyyy-MM-dd'T'HH:mm:ssZ) (e.g. 2019-06-11T08:00:00+02:00).
	StartDate *string `pulumi:"startDate"`
	// The type of the entity that maintenance will be applied. It can be either integration or policy.
	Type string `pulumi:"type"`
}

// MaintenanceTimeInput is an input type that accepts MaintenanceTimeArgs and MaintenanceTimeOutput values.
// You can construct a concrete instance of `MaintenanceTimeInput` via:
//
//	MaintenanceTimeArgs{...}
type MaintenanceTimeInput interface {
	pulumi.Input

	ToMaintenanceTimeOutput() MaintenanceTimeOutput
	ToMaintenanceTimeOutputWithContext(context.Context) MaintenanceTimeOutput
}

type MaintenanceTimeArgs struct {
	// This parameter takes a date format as (yyyy-MM-dd'T'HH:mm:ssZ) (e.g. 2019-06-11T08:00:00+02:00).
	EndDate pulumi.StringPtrInput `pulumi:"endDate"`
	// This parameter takes a date format as (yyyy-MM-dd'T'HH:mm:ssZ) (e.g. 2019-06-11T08:00:00+02:00).
	StartDate pulumi.StringPtrInput `pulumi:"startDate"`
	// The type of the entity that maintenance will be applied. It can be either integration or policy.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MaintenanceTimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceTime)(nil)).Elem()
}

func (i MaintenanceTimeArgs) ToMaintenanceTimeOutput() MaintenanceTimeOutput {
	return i.ToMaintenanceTimeOutputWithContext(context.Background())
}

func (i MaintenanceTimeArgs) ToMaintenanceTimeOutputWithContext(ctx context.Context) MaintenanceTimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceTimeOutput)
}

// MaintenanceTimeArrayInput is an input type that accepts MaintenanceTimeArray and MaintenanceTimeArrayOutput values.
// You can construct a concrete instance of `MaintenanceTimeArrayInput` via:
//
//	MaintenanceTimeArray{ MaintenanceTimeArgs{...} }
type MaintenanceTimeArrayInput interface {
	pulumi.Input

	ToMaintenanceTimeArrayOutput() MaintenanceTimeArrayOutput
	ToMaintenanceTimeArrayOutputWithContext(context.Context) MaintenanceTimeArrayOutput
}

type MaintenanceTimeArray []MaintenanceTimeInput

func (MaintenanceTimeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MaintenanceTime)(nil)).Elem()
}

func (i MaintenanceTimeArray) ToMaintenanceTimeArrayOutput() MaintenanceTimeArrayOutput {
	return i.ToMaintenanceTimeArrayOutputWithContext(context.Background())
}

func (i MaintenanceTimeArray) ToMaintenanceTimeArrayOutputWithContext(ctx context.Context) MaintenanceTimeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceTimeArrayOutput)
}

type MaintenanceTimeOutput struct{ *pulumi.OutputState }

func (MaintenanceTimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceTime)(nil)).Elem()
}

func (o MaintenanceTimeOutput) ToMaintenanceTimeOutput() MaintenanceTimeOutput {
	return o
}

func (o MaintenanceTimeOutput) ToMaintenanceTimeOutputWithContext(ctx context.Context) MaintenanceTimeOutput {
	return o
}

// This parameter takes a date format as (yyyy-MM-dd'T'HH:mm:ssZ) (e.g. 2019-06-11T08:00:00+02:00).
func (o MaintenanceTimeOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaintenanceTime) *string { return v.EndDate }).(pulumi.StringPtrOutput)
}

// This parameter takes a date format as (yyyy-MM-dd'T'HH:mm:ssZ) (e.g. 2019-06-11T08:00:00+02:00).
func (o MaintenanceTimeOutput) StartDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaintenanceTime) *string { return v.StartDate }).(pulumi.StringPtrOutput)
}

// The type of the entity that maintenance will be applied. It can be either integration or policy.
func (o MaintenanceTimeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MaintenanceTime) string { return v.Type }).(pulumi.StringOutput)
}

type MaintenanceTimeArrayOutput struct{ *pulumi.OutputState }

func (MaintenanceTimeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MaintenanceTime)(nil)).Elem()
}

func (o MaintenanceTimeArrayOutput) ToMaintenanceTimeArrayOutput() MaintenanceTimeArrayOutput {
	return o
}

func (o MaintenanceTimeArrayOutput) ToMaintenanceTimeArrayOutputWithContext(ctx context.Context) MaintenanceTimeArrayOutput {
	return o
}

func (o MaintenanceTimeArrayOutput) Index(i pulumi.IntInput) MaintenanceTimeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MaintenanceTime {
		return vs[0].([]MaintenanceTime)[vs[1].(int)]
	}).(MaintenanceTimeOutput)
}

type NotificationPolicyAutoCloseAction struct {
	// Duration of this action. This is a block, structure is documented below.
	Durations []NotificationPolicyAutoCloseActionDuration `pulumi:"durations"`
}

// NotificationPolicyAutoCloseActionInput is an input type that accepts NotificationPolicyAutoCloseActionArgs and NotificationPolicyAutoCloseActionOutput values.
// You can construct a concrete instance of `NotificationPolicyAutoCloseActionInput` via:
//
//	NotificationPolicyAutoCloseActionArgs{...}
type NotificationPolicyAutoCloseActionInput interface {
	pulumi.Input

	ToNotificationPolicyAutoCloseActionOutput() NotificationPolicyAutoCloseActionOutput
	ToNotificationPolicyAutoCloseActionOutputWithContext(context.Context) NotificationPolicyAutoCloseActionOutput
}

type NotificationPolicyAutoCloseActionArgs struct {
	// Duration of this action. This is a block, structure is documented below.
	Durations NotificationPolicyAutoCloseActionDurationArrayInput `pulumi:"durations"`
}

func (NotificationPolicyAutoCloseActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyAutoCloseAction)(nil)).Elem()
}

func (i NotificationPolicyAutoCloseActionArgs) ToNotificationPolicyAutoCloseActionOutput() NotificationPolicyAutoCloseActionOutput {
	return i.ToNotificationPolicyAutoCloseActionOutputWithContext(context.Background())
}

func (i NotificationPolicyAutoCloseActionArgs) ToNotificationPolicyAutoCloseActionOutputWithContext(ctx context.Context) NotificationPolicyAutoCloseActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyAutoCloseActionOutput)
}

// NotificationPolicyAutoCloseActionArrayInput is an input type that accepts NotificationPolicyAutoCloseActionArray and NotificationPolicyAutoCloseActionArrayOutput values.
// You can construct a concrete instance of `NotificationPolicyAutoCloseActionArrayInput` via:
//
//	NotificationPolicyAutoCloseActionArray{ NotificationPolicyAutoCloseActionArgs{...} }
type NotificationPolicyAutoCloseActionArrayInput interface {
	pulumi.Input

	ToNotificationPolicyAutoCloseActionArrayOutput() NotificationPolicyAutoCloseActionArrayOutput
	ToNotificationPolicyAutoCloseActionArrayOutputWithContext(context.Context) NotificationPolicyAutoCloseActionArrayOutput
}

type NotificationPolicyAutoCloseActionArray []NotificationPolicyAutoCloseActionInput

func (NotificationPolicyAutoCloseActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyAutoCloseAction)(nil)).Elem()
}

func (i NotificationPolicyAutoCloseActionArray) ToNotificationPolicyAutoCloseActionArrayOutput() NotificationPolicyAutoCloseActionArrayOutput {
	return i.ToNotificationPolicyAutoCloseActionArrayOutputWithContext(context.Background())
}

func (i NotificationPolicyAutoCloseActionArray) ToNotificationPolicyAutoCloseActionArrayOutputWithContext(ctx context.Context) NotificationPolicyAutoCloseActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyAutoCloseActionArrayOutput)
}

type NotificationPolicyAutoCloseActionOutput struct{ *pulumi.OutputState }

func (NotificationPolicyAutoCloseActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyAutoCloseAction)(nil)).Elem()
}

func (o NotificationPolicyAutoCloseActionOutput) ToNotificationPolicyAutoCloseActionOutput() NotificationPolicyAutoCloseActionOutput {
	return o
}

func (o NotificationPolicyAutoCloseActionOutput) ToNotificationPolicyAutoCloseActionOutputWithContext(ctx context.Context) NotificationPolicyAutoCloseActionOutput {
	return o
}

// Duration of this action. This is a block, structure is documented below.
func (o NotificationPolicyAutoCloseActionOutput) Durations() NotificationPolicyAutoCloseActionDurationArrayOutput {
	return o.ApplyT(func(v NotificationPolicyAutoCloseAction) []NotificationPolicyAutoCloseActionDuration {
		return v.Durations
	}).(NotificationPolicyAutoCloseActionDurationArrayOutput)
}

type NotificationPolicyAutoCloseActionArrayOutput struct{ *pulumi.OutputState }

func (NotificationPolicyAutoCloseActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyAutoCloseAction)(nil)).Elem()
}

func (o NotificationPolicyAutoCloseActionArrayOutput) ToNotificationPolicyAutoCloseActionArrayOutput() NotificationPolicyAutoCloseActionArrayOutput {
	return o
}

func (o NotificationPolicyAutoCloseActionArrayOutput) ToNotificationPolicyAutoCloseActionArrayOutputWithContext(ctx context.Context) NotificationPolicyAutoCloseActionArrayOutput {
	return o
}

func (o NotificationPolicyAutoCloseActionArrayOutput) Index(i pulumi.IntInput) NotificationPolicyAutoCloseActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationPolicyAutoCloseAction {
		return vs[0].([]NotificationPolicyAutoCloseAction)[vs[1].(int)]
	}).(NotificationPolicyAutoCloseActionOutput)
}

type NotificationPolicyAutoCloseActionDuration struct {
	// A amount of time in `timeUnits`. This is a integer attribute.
	TimeAmount int `pulumi:"timeAmount"`
	// Valid time units are: `minutes`, `hours`, `days`. Default: `minutes`
	TimeUnit *string `pulumi:"timeUnit"`
}

// NotificationPolicyAutoCloseActionDurationInput is an input type that accepts NotificationPolicyAutoCloseActionDurationArgs and NotificationPolicyAutoCloseActionDurationOutput values.
// You can construct a concrete instance of `NotificationPolicyAutoCloseActionDurationInput` via:
//
//	NotificationPolicyAutoCloseActionDurationArgs{...}
type NotificationPolicyAutoCloseActionDurationInput interface {
	pulumi.Input

	ToNotificationPolicyAutoCloseActionDurationOutput() NotificationPolicyAutoCloseActionDurationOutput
	ToNotificationPolicyAutoCloseActionDurationOutputWithContext(context.Context) NotificationPolicyAutoCloseActionDurationOutput
}

type NotificationPolicyAutoCloseActionDurationArgs struct {
	// A amount of time in `timeUnits`. This is a integer attribute.
	TimeAmount pulumi.IntInput `pulumi:"timeAmount"`
	// Valid time units are: `minutes`, `hours`, `days`. Default: `minutes`
	TimeUnit pulumi.StringPtrInput `pulumi:"timeUnit"`
}

func (NotificationPolicyAutoCloseActionDurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyAutoCloseActionDuration)(nil)).Elem()
}

func (i NotificationPolicyAutoCloseActionDurationArgs) ToNotificationPolicyAutoCloseActionDurationOutput() NotificationPolicyAutoCloseActionDurationOutput {
	return i.ToNotificationPolicyAutoCloseActionDurationOutputWithContext(context.Background())
}

func (i NotificationPolicyAutoCloseActionDurationArgs) ToNotificationPolicyAutoCloseActionDurationOutputWithContext(ctx context.Context) NotificationPolicyAutoCloseActionDurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyAutoCloseActionDurationOutput)
}

// NotificationPolicyAutoCloseActionDurationArrayInput is an input type that accepts NotificationPolicyAutoCloseActionDurationArray and NotificationPolicyAutoCloseActionDurationArrayOutput values.
// You can construct a concrete instance of `NotificationPolicyAutoCloseActionDurationArrayInput` via:
//
//	NotificationPolicyAutoCloseActionDurationArray{ NotificationPolicyAutoCloseActionDurationArgs{...} }
type NotificationPolicyAutoCloseActionDurationArrayInput interface {
	pulumi.Input

	ToNotificationPolicyAutoCloseActionDurationArrayOutput() NotificationPolicyAutoCloseActionDurationArrayOutput
	ToNotificationPolicyAutoCloseActionDurationArrayOutputWithContext(context.Context) NotificationPolicyAutoCloseActionDurationArrayOutput
}

type NotificationPolicyAutoCloseActionDurationArray []NotificationPolicyAutoCloseActionDurationInput

func (NotificationPolicyAutoCloseActionDurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyAutoCloseActionDuration)(nil)).Elem()
}

func (i NotificationPolicyAutoCloseActionDurationArray) ToNotificationPolicyAutoCloseActionDurationArrayOutput() NotificationPolicyAutoCloseActionDurationArrayOutput {
	return i.ToNotificationPolicyAutoCloseActionDurationArrayOutputWithContext(context.Background())
}

func (i NotificationPolicyAutoCloseActionDurationArray) ToNotificationPolicyAutoCloseActionDurationArrayOutputWithContext(ctx context.Context) NotificationPolicyAutoCloseActionDurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyAutoCloseActionDurationArrayOutput)
}

type NotificationPolicyAutoCloseActionDurationOutput struct{ *pulumi.OutputState }

func (NotificationPolicyAutoCloseActionDurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyAutoCloseActionDuration)(nil)).Elem()
}

func (o NotificationPolicyAutoCloseActionDurationOutput) ToNotificationPolicyAutoCloseActionDurationOutput() NotificationPolicyAutoCloseActionDurationOutput {
	return o
}

func (o NotificationPolicyAutoCloseActionDurationOutput) ToNotificationPolicyAutoCloseActionDurationOutputWithContext(ctx context.Context) NotificationPolicyAutoCloseActionDurationOutput {
	return o
}

// A amount of time in `timeUnits`. This is a integer attribute.
func (o NotificationPolicyAutoCloseActionDurationOutput) TimeAmount() pulumi.IntOutput {
	return o.ApplyT(func(v NotificationPolicyAutoCloseActionDuration) int { return v.TimeAmount }).(pulumi.IntOutput)
}

// Valid time units are: `minutes`, `hours`, `days`. Default: `minutes`
func (o NotificationPolicyAutoCloseActionDurationOutput) TimeUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyAutoCloseActionDuration) *string { return v.TimeUnit }).(pulumi.StringPtrOutput)
}

type NotificationPolicyAutoCloseActionDurationArrayOutput struct{ *pulumi.OutputState }

func (NotificationPolicyAutoCloseActionDurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyAutoCloseActionDuration)(nil)).Elem()
}

func (o NotificationPolicyAutoCloseActionDurationArrayOutput) ToNotificationPolicyAutoCloseActionDurationArrayOutput() NotificationPolicyAutoCloseActionDurationArrayOutput {
	return o
}

func (o NotificationPolicyAutoCloseActionDurationArrayOutput) ToNotificationPolicyAutoCloseActionDurationArrayOutputWithContext(ctx context.Context) NotificationPolicyAutoCloseActionDurationArrayOutput {
	return o
}

func (o NotificationPolicyAutoCloseActionDurationArrayOutput) Index(i pulumi.IntInput) NotificationPolicyAutoCloseActionDurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationPolicyAutoCloseActionDuration {
		return vs[0].([]NotificationPolicyAutoCloseActionDuration)[vs[1].(int)]
	}).(NotificationPolicyAutoCloseActionDurationOutput)
}

type NotificationPolicyAutoRestartAction struct {
	// Duration of this action. This is a block, structure is documented below.
	Durations []NotificationPolicyAutoRestartActionDuration `pulumi:"durations"`
	// How many times to repeat. This is a integer attribute.
	MaxRepeatCount int `pulumi:"maxRepeatCount"`
}

// NotificationPolicyAutoRestartActionInput is an input type that accepts NotificationPolicyAutoRestartActionArgs and NotificationPolicyAutoRestartActionOutput values.
// You can construct a concrete instance of `NotificationPolicyAutoRestartActionInput` via:
//
//	NotificationPolicyAutoRestartActionArgs{...}
type NotificationPolicyAutoRestartActionInput interface {
	pulumi.Input

	ToNotificationPolicyAutoRestartActionOutput() NotificationPolicyAutoRestartActionOutput
	ToNotificationPolicyAutoRestartActionOutputWithContext(context.Context) NotificationPolicyAutoRestartActionOutput
}

type NotificationPolicyAutoRestartActionArgs struct {
	// Duration of this action. This is a block, structure is documented below.
	Durations NotificationPolicyAutoRestartActionDurationArrayInput `pulumi:"durations"`
	// How many times to repeat. This is a integer attribute.
	MaxRepeatCount pulumi.IntInput `pulumi:"maxRepeatCount"`
}

func (NotificationPolicyAutoRestartActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyAutoRestartAction)(nil)).Elem()
}

func (i NotificationPolicyAutoRestartActionArgs) ToNotificationPolicyAutoRestartActionOutput() NotificationPolicyAutoRestartActionOutput {
	return i.ToNotificationPolicyAutoRestartActionOutputWithContext(context.Background())
}

func (i NotificationPolicyAutoRestartActionArgs) ToNotificationPolicyAutoRestartActionOutputWithContext(ctx context.Context) NotificationPolicyAutoRestartActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyAutoRestartActionOutput)
}

// NotificationPolicyAutoRestartActionArrayInput is an input type that accepts NotificationPolicyAutoRestartActionArray and NotificationPolicyAutoRestartActionArrayOutput values.
// You can construct a concrete instance of `NotificationPolicyAutoRestartActionArrayInput` via:
//
//	NotificationPolicyAutoRestartActionArray{ NotificationPolicyAutoRestartActionArgs{...} }
type NotificationPolicyAutoRestartActionArrayInput interface {
	pulumi.Input

	ToNotificationPolicyAutoRestartActionArrayOutput() NotificationPolicyAutoRestartActionArrayOutput
	ToNotificationPolicyAutoRestartActionArrayOutputWithContext(context.Context) NotificationPolicyAutoRestartActionArrayOutput
}

type NotificationPolicyAutoRestartActionArray []NotificationPolicyAutoRestartActionInput

func (NotificationPolicyAutoRestartActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyAutoRestartAction)(nil)).Elem()
}

func (i NotificationPolicyAutoRestartActionArray) ToNotificationPolicyAutoRestartActionArrayOutput() NotificationPolicyAutoRestartActionArrayOutput {
	return i.ToNotificationPolicyAutoRestartActionArrayOutputWithContext(context.Background())
}

func (i NotificationPolicyAutoRestartActionArray) ToNotificationPolicyAutoRestartActionArrayOutputWithContext(ctx context.Context) NotificationPolicyAutoRestartActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyAutoRestartActionArrayOutput)
}

type NotificationPolicyAutoRestartActionOutput struct{ *pulumi.OutputState }

func (NotificationPolicyAutoRestartActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyAutoRestartAction)(nil)).Elem()
}

func (o NotificationPolicyAutoRestartActionOutput) ToNotificationPolicyAutoRestartActionOutput() NotificationPolicyAutoRestartActionOutput {
	return o
}

func (o NotificationPolicyAutoRestartActionOutput) ToNotificationPolicyAutoRestartActionOutputWithContext(ctx context.Context) NotificationPolicyAutoRestartActionOutput {
	return o
}

// Duration of this action. This is a block, structure is documented below.
func (o NotificationPolicyAutoRestartActionOutput) Durations() NotificationPolicyAutoRestartActionDurationArrayOutput {
	return o.ApplyT(func(v NotificationPolicyAutoRestartAction) []NotificationPolicyAutoRestartActionDuration {
		return v.Durations
	}).(NotificationPolicyAutoRestartActionDurationArrayOutput)
}

// How many times to repeat. This is a integer attribute.
func (o NotificationPolicyAutoRestartActionOutput) MaxRepeatCount() pulumi.IntOutput {
	return o.ApplyT(func(v NotificationPolicyAutoRestartAction) int { return v.MaxRepeatCount }).(pulumi.IntOutput)
}

type NotificationPolicyAutoRestartActionArrayOutput struct{ *pulumi.OutputState }

func (NotificationPolicyAutoRestartActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyAutoRestartAction)(nil)).Elem()
}

func (o NotificationPolicyAutoRestartActionArrayOutput) ToNotificationPolicyAutoRestartActionArrayOutput() NotificationPolicyAutoRestartActionArrayOutput {
	return o
}

func (o NotificationPolicyAutoRestartActionArrayOutput) ToNotificationPolicyAutoRestartActionArrayOutputWithContext(ctx context.Context) NotificationPolicyAutoRestartActionArrayOutput {
	return o
}

func (o NotificationPolicyAutoRestartActionArrayOutput) Index(i pulumi.IntInput) NotificationPolicyAutoRestartActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationPolicyAutoRestartAction {
		return vs[0].([]NotificationPolicyAutoRestartAction)[vs[1].(int)]
	}).(NotificationPolicyAutoRestartActionOutput)
}

type NotificationPolicyAutoRestartActionDuration struct {
	// A amount of time in `timeUnits`. This is a integer attribute.
	TimeAmount int `pulumi:"timeAmount"`
	// Valid time units are: `minutes`, `hours`, `days`. Default: `minutes`
	TimeUnit *string `pulumi:"timeUnit"`
}

// NotificationPolicyAutoRestartActionDurationInput is an input type that accepts NotificationPolicyAutoRestartActionDurationArgs and NotificationPolicyAutoRestartActionDurationOutput values.
// You can construct a concrete instance of `NotificationPolicyAutoRestartActionDurationInput` via:
//
//	NotificationPolicyAutoRestartActionDurationArgs{...}
type NotificationPolicyAutoRestartActionDurationInput interface {
	pulumi.Input

	ToNotificationPolicyAutoRestartActionDurationOutput() NotificationPolicyAutoRestartActionDurationOutput
	ToNotificationPolicyAutoRestartActionDurationOutputWithContext(context.Context) NotificationPolicyAutoRestartActionDurationOutput
}

type NotificationPolicyAutoRestartActionDurationArgs struct {
	// A amount of time in `timeUnits`. This is a integer attribute.
	TimeAmount pulumi.IntInput `pulumi:"timeAmount"`
	// Valid time units are: `minutes`, `hours`, `days`. Default: `minutes`
	TimeUnit pulumi.StringPtrInput `pulumi:"timeUnit"`
}

func (NotificationPolicyAutoRestartActionDurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyAutoRestartActionDuration)(nil)).Elem()
}

func (i NotificationPolicyAutoRestartActionDurationArgs) ToNotificationPolicyAutoRestartActionDurationOutput() NotificationPolicyAutoRestartActionDurationOutput {
	return i.ToNotificationPolicyAutoRestartActionDurationOutputWithContext(context.Background())
}

func (i NotificationPolicyAutoRestartActionDurationArgs) ToNotificationPolicyAutoRestartActionDurationOutputWithContext(ctx context.Context) NotificationPolicyAutoRestartActionDurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyAutoRestartActionDurationOutput)
}

// NotificationPolicyAutoRestartActionDurationArrayInput is an input type that accepts NotificationPolicyAutoRestartActionDurationArray and NotificationPolicyAutoRestartActionDurationArrayOutput values.
// You can construct a concrete instance of `NotificationPolicyAutoRestartActionDurationArrayInput` via:
//
//	NotificationPolicyAutoRestartActionDurationArray{ NotificationPolicyAutoRestartActionDurationArgs{...} }
type NotificationPolicyAutoRestartActionDurationArrayInput interface {
	pulumi.Input

	ToNotificationPolicyAutoRestartActionDurationArrayOutput() NotificationPolicyAutoRestartActionDurationArrayOutput
	ToNotificationPolicyAutoRestartActionDurationArrayOutputWithContext(context.Context) NotificationPolicyAutoRestartActionDurationArrayOutput
}

type NotificationPolicyAutoRestartActionDurationArray []NotificationPolicyAutoRestartActionDurationInput

func (NotificationPolicyAutoRestartActionDurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyAutoRestartActionDuration)(nil)).Elem()
}

func (i NotificationPolicyAutoRestartActionDurationArray) ToNotificationPolicyAutoRestartActionDurationArrayOutput() NotificationPolicyAutoRestartActionDurationArrayOutput {
	return i.ToNotificationPolicyAutoRestartActionDurationArrayOutputWithContext(context.Background())
}

func (i NotificationPolicyAutoRestartActionDurationArray) ToNotificationPolicyAutoRestartActionDurationArrayOutputWithContext(ctx context.Context) NotificationPolicyAutoRestartActionDurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyAutoRestartActionDurationArrayOutput)
}

type NotificationPolicyAutoRestartActionDurationOutput struct{ *pulumi.OutputState }

func (NotificationPolicyAutoRestartActionDurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyAutoRestartActionDuration)(nil)).Elem()
}

func (o NotificationPolicyAutoRestartActionDurationOutput) ToNotificationPolicyAutoRestartActionDurationOutput() NotificationPolicyAutoRestartActionDurationOutput {
	return o
}

func (o NotificationPolicyAutoRestartActionDurationOutput) ToNotificationPolicyAutoRestartActionDurationOutputWithContext(ctx context.Context) NotificationPolicyAutoRestartActionDurationOutput {
	return o
}

// A amount of time in `timeUnits`. This is a integer attribute.
func (o NotificationPolicyAutoRestartActionDurationOutput) TimeAmount() pulumi.IntOutput {
	return o.ApplyT(func(v NotificationPolicyAutoRestartActionDuration) int { return v.TimeAmount }).(pulumi.IntOutput)
}

// Valid time units are: `minutes`, `hours`, `days`. Default: `minutes`
func (o NotificationPolicyAutoRestartActionDurationOutput) TimeUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyAutoRestartActionDuration) *string { return v.TimeUnit }).(pulumi.StringPtrOutput)
}

type NotificationPolicyAutoRestartActionDurationArrayOutput struct{ *pulumi.OutputState }

func (NotificationPolicyAutoRestartActionDurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyAutoRestartActionDuration)(nil)).Elem()
}

func (o NotificationPolicyAutoRestartActionDurationArrayOutput) ToNotificationPolicyAutoRestartActionDurationArrayOutput() NotificationPolicyAutoRestartActionDurationArrayOutput {
	return o
}

func (o NotificationPolicyAutoRestartActionDurationArrayOutput) ToNotificationPolicyAutoRestartActionDurationArrayOutputWithContext(ctx context.Context) NotificationPolicyAutoRestartActionDurationArrayOutput {
	return o
}

func (o NotificationPolicyAutoRestartActionDurationArrayOutput) Index(i pulumi.IntInput) NotificationPolicyAutoRestartActionDurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationPolicyAutoRestartActionDuration {
		return vs[0].([]NotificationPolicyAutoRestartActionDuration)[vs[1].(int)]
	}).(NotificationPolicyAutoRestartActionDurationOutput)
}

type NotificationPolicyDeDuplicationAction struct {
	// Count
	Count int `pulumi:"count"`
	// Deduplication type. Possible values are: "value-based", "frequency-based"
	DeDuplicationActionType string `pulumi:"deDuplicationActionType"`
	// Duration of this action (only required for "frequency-based" de-duplication action). This is a block, structure is documented below.
	Durations []NotificationPolicyDeDuplicationActionDuration `pulumi:"durations"`
}

// NotificationPolicyDeDuplicationActionInput is an input type that accepts NotificationPolicyDeDuplicationActionArgs and NotificationPolicyDeDuplicationActionOutput values.
// You can construct a concrete instance of `NotificationPolicyDeDuplicationActionInput` via:
//
//	NotificationPolicyDeDuplicationActionArgs{...}
type NotificationPolicyDeDuplicationActionInput interface {
	pulumi.Input

	ToNotificationPolicyDeDuplicationActionOutput() NotificationPolicyDeDuplicationActionOutput
	ToNotificationPolicyDeDuplicationActionOutputWithContext(context.Context) NotificationPolicyDeDuplicationActionOutput
}

type NotificationPolicyDeDuplicationActionArgs struct {
	// Count
	Count pulumi.IntInput `pulumi:"count"`
	// Deduplication type. Possible values are: "value-based", "frequency-based"
	DeDuplicationActionType pulumi.StringInput `pulumi:"deDuplicationActionType"`
	// Duration of this action (only required for "frequency-based" de-duplication action). This is a block, structure is documented below.
	Durations NotificationPolicyDeDuplicationActionDurationArrayInput `pulumi:"durations"`
}

func (NotificationPolicyDeDuplicationActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyDeDuplicationAction)(nil)).Elem()
}

func (i NotificationPolicyDeDuplicationActionArgs) ToNotificationPolicyDeDuplicationActionOutput() NotificationPolicyDeDuplicationActionOutput {
	return i.ToNotificationPolicyDeDuplicationActionOutputWithContext(context.Background())
}

func (i NotificationPolicyDeDuplicationActionArgs) ToNotificationPolicyDeDuplicationActionOutputWithContext(ctx context.Context) NotificationPolicyDeDuplicationActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyDeDuplicationActionOutput)
}

// NotificationPolicyDeDuplicationActionArrayInput is an input type that accepts NotificationPolicyDeDuplicationActionArray and NotificationPolicyDeDuplicationActionArrayOutput values.
// You can construct a concrete instance of `NotificationPolicyDeDuplicationActionArrayInput` via:
//
//	NotificationPolicyDeDuplicationActionArray{ NotificationPolicyDeDuplicationActionArgs{...} }
type NotificationPolicyDeDuplicationActionArrayInput interface {
	pulumi.Input

	ToNotificationPolicyDeDuplicationActionArrayOutput() NotificationPolicyDeDuplicationActionArrayOutput
	ToNotificationPolicyDeDuplicationActionArrayOutputWithContext(context.Context) NotificationPolicyDeDuplicationActionArrayOutput
}

type NotificationPolicyDeDuplicationActionArray []NotificationPolicyDeDuplicationActionInput

func (NotificationPolicyDeDuplicationActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyDeDuplicationAction)(nil)).Elem()
}

func (i NotificationPolicyDeDuplicationActionArray) ToNotificationPolicyDeDuplicationActionArrayOutput() NotificationPolicyDeDuplicationActionArrayOutput {
	return i.ToNotificationPolicyDeDuplicationActionArrayOutputWithContext(context.Background())
}

func (i NotificationPolicyDeDuplicationActionArray) ToNotificationPolicyDeDuplicationActionArrayOutputWithContext(ctx context.Context) NotificationPolicyDeDuplicationActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyDeDuplicationActionArrayOutput)
}

type NotificationPolicyDeDuplicationActionOutput struct{ *pulumi.OutputState }

func (NotificationPolicyDeDuplicationActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyDeDuplicationAction)(nil)).Elem()
}

func (o NotificationPolicyDeDuplicationActionOutput) ToNotificationPolicyDeDuplicationActionOutput() NotificationPolicyDeDuplicationActionOutput {
	return o
}

func (o NotificationPolicyDeDuplicationActionOutput) ToNotificationPolicyDeDuplicationActionOutputWithContext(ctx context.Context) NotificationPolicyDeDuplicationActionOutput {
	return o
}

// Count
func (o NotificationPolicyDeDuplicationActionOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v NotificationPolicyDeDuplicationAction) int { return v.Count }).(pulumi.IntOutput)
}

// Deduplication type. Possible values are: "value-based", "frequency-based"
func (o NotificationPolicyDeDuplicationActionOutput) DeDuplicationActionType() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationPolicyDeDuplicationAction) string { return v.DeDuplicationActionType }).(pulumi.StringOutput)
}

// Duration of this action (only required for "frequency-based" de-duplication action). This is a block, structure is documented below.
func (o NotificationPolicyDeDuplicationActionOutput) Durations() NotificationPolicyDeDuplicationActionDurationArrayOutput {
	return o.ApplyT(func(v NotificationPolicyDeDuplicationAction) []NotificationPolicyDeDuplicationActionDuration {
		return v.Durations
	}).(NotificationPolicyDeDuplicationActionDurationArrayOutput)
}

type NotificationPolicyDeDuplicationActionArrayOutput struct{ *pulumi.OutputState }

func (NotificationPolicyDeDuplicationActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyDeDuplicationAction)(nil)).Elem()
}

func (o NotificationPolicyDeDuplicationActionArrayOutput) ToNotificationPolicyDeDuplicationActionArrayOutput() NotificationPolicyDeDuplicationActionArrayOutput {
	return o
}

func (o NotificationPolicyDeDuplicationActionArrayOutput) ToNotificationPolicyDeDuplicationActionArrayOutputWithContext(ctx context.Context) NotificationPolicyDeDuplicationActionArrayOutput {
	return o
}

func (o NotificationPolicyDeDuplicationActionArrayOutput) Index(i pulumi.IntInput) NotificationPolicyDeDuplicationActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationPolicyDeDuplicationAction {
		return vs[0].([]NotificationPolicyDeDuplicationAction)[vs[1].(int)]
	}).(NotificationPolicyDeDuplicationActionOutput)
}

type NotificationPolicyDeDuplicationActionDuration struct {
	// A amount of time in `timeUnits`. This is a integer attribute.
	TimeAmount int `pulumi:"timeAmount"`
	// Valid time units are: `minutes`, `hours`, `days`. Default: `minutes`
	TimeUnit *string `pulumi:"timeUnit"`
}

// NotificationPolicyDeDuplicationActionDurationInput is an input type that accepts NotificationPolicyDeDuplicationActionDurationArgs and NotificationPolicyDeDuplicationActionDurationOutput values.
// You can construct a concrete instance of `NotificationPolicyDeDuplicationActionDurationInput` via:
//
//	NotificationPolicyDeDuplicationActionDurationArgs{...}
type NotificationPolicyDeDuplicationActionDurationInput interface {
	pulumi.Input

	ToNotificationPolicyDeDuplicationActionDurationOutput() NotificationPolicyDeDuplicationActionDurationOutput
	ToNotificationPolicyDeDuplicationActionDurationOutputWithContext(context.Context) NotificationPolicyDeDuplicationActionDurationOutput
}

type NotificationPolicyDeDuplicationActionDurationArgs struct {
	// A amount of time in `timeUnits`. This is a integer attribute.
	TimeAmount pulumi.IntInput `pulumi:"timeAmount"`
	// Valid time units are: `minutes`, `hours`, `days`. Default: `minutes`
	TimeUnit pulumi.StringPtrInput `pulumi:"timeUnit"`
}

func (NotificationPolicyDeDuplicationActionDurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyDeDuplicationActionDuration)(nil)).Elem()
}

func (i NotificationPolicyDeDuplicationActionDurationArgs) ToNotificationPolicyDeDuplicationActionDurationOutput() NotificationPolicyDeDuplicationActionDurationOutput {
	return i.ToNotificationPolicyDeDuplicationActionDurationOutputWithContext(context.Background())
}

func (i NotificationPolicyDeDuplicationActionDurationArgs) ToNotificationPolicyDeDuplicationActionDurationOutputWithContext(ctx context.Context) NotificationPolicyDeDuplicationActionDurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyDeDuplicationActionDurationOutput)
}

// NotificationPolicyDeDuplicationActionDurationArrayInput is an input type that accepts NotificationPolicyDeDuplicationActionDurationArray and NotificationPolicyDeDuplicationActionDurationArrayOutput values.
// You can construct a concrete instance of `NotificationPolicyDeDuplicationActionDurationArrayInput` via:
//
//	NotificationPolicyDeDuplicationActionDurationArray{ NotificationPolicyDeDuplicationActionDurationArgs{...} }
type NotificationPolicyDeDuplicationActionDurationArrayInput interface {
	pulumi.Input

	ToNotificationPolicyDeDuplicationActionDurationArrayOutput() NotificationPolicyDeDuplicationActionDurationArrayOutput
	ToNotificationPolicyDeDuplicationActionDurationArrayOutputWithContext(context.Context) NotificationPolicyDeDuplicationActionDurationArrayOutput
}

type NotificationPolicyDeDuplicationActionDurationArray []NotificationPolicyDeDuplicationActionDurationInput

func (NotificationPolicyDeDuplicationActionDurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyDeDuplicationActionDuration)(nil)).Elem()
}

func (i NotificationPolicyDeDuplicationActionDurationArray) ToNotificationPolicyDeDuplicationActionDurationArrayOutput() NotificationPolicyDeDuplicationActionDurationArrayOutput {
	return i.ToNotificationPolicyDeDuplicationActionDurationArrayOutputWithContext(context.Background())
}

func (i NotificationPolicyDeDuplicationActionDurationArray) ToNotificationPolicyDeDuplicationActionDurationArrayOutputWithContext(ctx context.Context) NotificationPolicyDeDuplicationActionDurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyDeDuplicationActionDurationArrayOutput)
}

type NotificationPolicyDeDuplicationActionDurationOutput struct{ *pulumi.OutputState }

func (NotificationPolicyDeDuplicationActionDurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyDeDuplicationActionDuration)(nil)).Elem()
}

func (o NotificationPolicyDeDuplicationActionDurationOutput) ToNotificationPolicyDeDuplicationActionDurationOutput() NotificationPolicyDeDuplicationActionDurationOutput {
	return o
}

func (o NotificationPolicyDeDuplicationActionDurationOutput) ToNotificationPolicyDeDuplicationActionDurationOutputWithContext(ctx context.Context) NotificationPolicyDeDuplicationActionDurationOutput {
	return o
}

// A amount of time in `timeUnits`. This is a integer attribute.
func (o NotificationPolicyDeDuplicationActionDurationOutput) TimeAmount() pulumi.IntOutput {
	return o.ApplyT(func(v NotificationPolicyDeDuplicationActionDuration) int { return v.TimeAmount }).(pulumi.IntOutput)
}

// Valid time units are: `minutes`, `hours`, `days`. Default: `minutes`
func (o NotificationPolicyDeDuplicationActionDurationOutput) TimeUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyDeDuplicationActionDuration) *string { return v.TimeUnit }).(pulumi.StringPtrOutput)
}

type NotificationPolicyDeDuplicationActionDurationArrayOutput struct{ *pulumi.OutputState }

func (NotificationPolicyDeDuplicationActionDurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyDeDuplicationActionDuration)(nil)).Elem()
}

func (o NotificationPolicyDeDuplicationActionDurationArrayOutput) ToNotificationPolicyDeDuplicationActionDurationArrayOutput() NotificationPolicyDeDuplicationActionDurationArrayOutput {
	return o
}

func (o NotificationPolicyDeDuplicationActionDurationArrayOutput) ToNotificationPolicyDeDuplicationActionDurationArrayOutputWithContext(ctx context.Context) NotificationPolicyDeDuplicationActionDurationArrayOutput {
	return o
}

func (o NotificationPolicyDeDuplicationActionDurationArrayOutput) Index(i pulumi.IntInput) NotificationPolicyDeDuplicationActionDurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationPolicyDeDuplicationActionDuration {
		return vs[0].([]NotificationPolicyDeDuplicationActionDuration)[vs[1].(int)]
	}).(NotificationPolicyDeDuplicationActionDurationOutput)
}

type NotificationPolicyDelayAction struct {
	// Defines until what day to delay or for what duration. Possible values are: `for-duration`, `next-time`, `next-weekday`, `next-monday`, `next-tuesday`, `next-wednesday`, `next-thursday`, `next-friday`, `next-saturday`, `next-sunday`
	DelayOption string `pulumi:"delayOption"`
	// Duration of this action. If `delayOption` = `for-duration` this has to be set. This is a block, structure is documented below.
	Durations []NotificationPolicyDelayActionDuration `pulumi:"durations"`
	// Until what hour notifications will be delayed. If `delayOption` is set to antyhing else then `for-duration` this has to be set.
	UntilHour *int `pulumi:"untilHour"`
	// Until what minute on `untilHour` notifications will be delayed. If `delayOption` is set to antyhing else then `for-duration` this has to be set.
	UntilMinute *int `pulumi:"untilMinute"`
}

// NotificationPolicyDelayActionInput is an input type that accepts NotificationPolicyDelayActionArgs and NotificationPolicyDelayActionOutput values.
// You can construct a concrete instance of `NotificationPolicyDelayActionInput` via:
//
//	NotificationPolicyDelayActionArgs{...}
type NotificationPolicyDelayActionInput interface {
	pulumi.Input

	ToNotificationPolicyDelayActionOutput() NotificationPolicyDelayActionOutput
	ToNotificationPolicyDelayActionOutputWithContext(context.Context) NotificationPolicyDelayActionOutput
}

type NotificationPolicyDelayActionArgs struct {
	// Defines until what day to delay or for what duration. Possible values are: `for-duration`, `next-time`, `next-weekday`, `next-monday`, `next-tuesday`, `next-wednesday`, `next-thursday`, `next-friday`, `next-saturday`, `next-sunday`
	DelayOption pulumi.StringInput `pulumi:"delayOption"`
	// Duration of this action. If `delayOption` = `for-duration` this has to be set. This is a block, structure is documented below.
	Durations NotificationPolicyDelayActionDurationArrayInput `pulumi:"durations"`
	// Until what hour notifications will be delayed. If `delayOption` is set to antyhing else then `for-duration` this has to be set.
	UntilHour pulumi.IntPtrInput `pulumi:"untilHour"`
	// Until what minute on `untilHour` notifications will be delayed. If `delayOption` is set to antyhing else then `for-duration` this has to be set.
	UntilMinute pulumi.IntPtrInput `pulumi:"untilMinute"`
}

func (NotificationPolicyDelayActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyDelayAction)(nil)).Elem()
}

func (i NotificationPolicyDelayActionArgs) ToNotificationPolicyDelayActionOutput() NotificationPolicyDelayActionOutput {
	return i.ToNotificationPolicyDelayActionOutputWithContext(context.Background())
}

func (i NotificationPolicyDelayActionArgs) ToNotificationPolicyDelayActionOutputWithContext(ctx context.Context) NotificationPolicyDelayActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyDelayActionOutput)
}

// NotificationPolicyDelayActionArrayInput is an input type that accepts NotificationPolicyDelayActionArray and NotificationPolicyDelayActionArrayOutput values.
// You can construct a concrete instance of `NotificationPolicyDelayActionArrayInput` via:
//
//	NotificationPolicyDelayActionArray{ NotificationPolicyDelayActionArgs{...} }
type NotificationPolicyDelayActionArrayInput interface {
	pulumi.Input

	ToNotificationPolicyDelayActionArrayOutput() NotificationPolicyDelayActionArrayOutput
	ToNotificationPolicyDelayActionArrayOutputWithContext(context.Context) NotificationPolicyDelayActionArrayOutput
}

type NotificationPolicyDelayActionArray []NotificationPolicyDelayActionInput

func (NotificationPolicyDelayActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyDelayAction)(nil)).Elem()
}

func (i NotificationPolicyDelayActionArray) ToNotificationPolicyDelayActionArrayOutput() NotificationPolicyDelayActionArrayOutput {
	return i.ToNotificationPolicyDelayActionArrayOutputWithContext(context.Background())
}

func (i NotificationPolicyDelayActionArray) ToNotificationPolicyDelayActionArrayOutputWithContext(ctx context.Context) NotificationPolicyDelayActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyDelayActionArrayOutput)
}

type NotificationPolicyDelayActionOutput struct{ *pulumi.OutputState }

func (NotificationPolicyDelayActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyDelayAction)(nil)).Elem()
}

func (o NotificationPolicyDelayActionOutput) ToNotificationPolicyDelayActionOutput() NotificationPolicyDelayActionOutput {
	return o
}

func (o NotificationPolicyDelayActionOutput) ToNotificationPolicyDelayActionOutputWithContext(ctx context.Context) NotificationPolicyDelayActionOutput {
	return o
}

// Defines until what day to delay or for what duration. Possible values are: `for-duration`, `next-time`, `next-weekday`, `next-monday`, `next-tuesday`, `next-wednesday`, `next-thursday`, `next-friday`, `next-saturday`, `next-sunday`
func (o NotificationPolicyDelayActionOutput) DelayOption() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationPolicyDelayAction) string { return v.DelayOption }).(pulumi.StringOutput)
}

// Duration of this action. If `delayOption` = `for-duration` this has to be set. This is a block, structure is documented below.
func (o NotificationPolicyDelayActionOutput) Durations() NotificationPolicyDelayActionDurationArrayOutput {
	return o.ApplyT(func(v NotificationPolicyDelayAction) []NotificationPolicyDelayActionDuration { return v.Durations }).(NotificationPolicyDelayActionDurationArrayOutput)
}

// Until what hour notifications will be delayed. If `delayOption` is set to antyhing else then `for-duration` this has to be set.
func (o NotificationPolicyDelayActionOutput) UntilHour() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NotificationPolicyDelayAction) *int { return v.UntilHour }).(pulumi.IntPtrOutput)
}

// Until what minute on `untilHour` notifications will be delayed. If `delayOption` is set to antyhing else then `for-duration` this has to be set.
func (o NotificationPolicyDelayActionOutput) UntilMinute() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NotificationPolicyDelayAction) *int { return v.UntilMinute }).(pulumi.IntPtrOutput)
}

type NotificationPolicyDelayActionArrayOutput struct{ *pulumi.OutputState }

func (NotificationPolicyDelayActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyDelayAction)(nil)).Elem()
}

func (o NotificationPolicyDelayActionArrayOutput) ToNotificationPolicyDelayActionArrayOutput() NotificationPolicyDelayActionArrayOutput {
	return o
}

func (o NotificationPolicyDelayActionArrayOutput) ToNotificationPolicyDelayActionArrayOutputWithContext(ctx context.Context) NotificationPolicyDelayActionArrayOutput {
	return o
}

func (o NotificationPolicyDelayActionArrayOutput) Index(i pulumi.IntInput) NotificationPolicyDelayActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationPolicyDelayAction {
		return vs[0].([]NotificationPolicyDelayAction)[vs[1].(int)]
	}).(NotificationPolicyDelayActionOutput)
}

type NotificationPolicyDelayActionDuration struct {
	// A amount of time in `timeUnits`. This is a integer attribute.
	TimeAmount int `pulumi:"timeAmount"`
	// Valid time units are: `minutes`, `hours`, `days`. Default: `minutes`
	TimeUnit *string `pulumi:"timeUnit"`
}

// NotificationPolicyDelayActionDurationInput is an input type that accepts NotificationPolicyDelayActionDurationArgs and NotificationPolicyDelayActionDurationOutput values.
// You can construct a concrete instance of `NotificationPolicyDelayActionDurationInput` via:
//
//	NotificationPolicyDelayActionDurationArgs{...}
type NotificationPolicyDelayActionDurationInput interface {
	pulumi.Input

	ToNotificationPolicyDelayActionDurationOutput() NotificationPolicyDelayActionDurationOutput
	ToNotificationPolicyDelayActionDurationOutputWithContext(context.Context) NotificationPolicyDelayActionDurationOutput
}

type NotificationPolicyDelayActionDurationArgs struct {
	// A amount of time in `timeUnits`. This is a integer attribute.
	TimeAmount pulumi.IntInput `pulumi:"timeAmount"`
	// Valid time units are: `minutes`, `hours`, `days`. Default: `minutes`
	TimeUnit pulumi.StringPtrInput `pulumi:"timeUnit"`
}

func (NotificationPolicyDelayActionDurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyDelayActionDuration)(nil)).Elem()
}

func (i NotificationPolicyDelayActionDurationArgs) ToNotificationPolicyDelayActionDurationOutput() NotificationPolicyDelayActionDurationOutput {
	return i.ToNotificationPolicyDelayActionDurationOutputWithContext(context.Background())
}

func (i NotificationPolicyDelayActionDurationArgs) ToNotificationPolicyDelayActionDurationOutputWithContext(ctx context.Context) NotificationPolicyDelayActionDurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyDelayActionDurationOutput)
}

// NotificationPolicyDelayActionDurationArrayInput is an input type that accepts NotificationPolicyDelayActionDurationArray and NotificationPolicyDelayActionDurationArrayOutput values.
// You can construct a concrete instance of `NotificationPolicyDelayActionDurationArrayInput` via:
//
//	NotificationPolicyDelayActionDurationArray{ NotificationPolicyDelayActionDurationArgs{...} }
type NotificationPolicyDelayActionDurationArrayInput interface {
	pulumi.Input

	ToNotificationPolicyDelayActionDurationArrayOutput() NotificationPolicyDelayActionDurationArrayOutput
	ToNotificationPolicyDelayActionDurationArrayOutputWithContext(context.Context) NotificationPolicyDelayActionDurationArrayOutput
}

type NotificationPolicyDelayActionDurationArray []NotificationPolicyDelayActionDurationInput

func (NotificationPolicyDelayActionDurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyDelayActionDuration)(nil)).Elem()
}

func (i NotificationPolicyDelayActionDurationArray) ToNotificationPolicyDelayActionDurationArrayOutput() NotificationPolicyDelayActionDurationArrayOutput {
	return i.ToNotificationPolicyDelayActionDurationArrayOutputWithContext(context.Background())
}

func (i NotificationPolicyDelayActionDurationArray) ToNotificationPolicyDelayActionDurationArrayOutputWithContext(ctx context.Context) NotificationPolicyDelayActionDurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyDelayActionDurationArrayOutput)
}

type NotificationPolicyDelayActionDurationOutput struct{ *pulumi.OutputState }

func (NotificationPolicyDelayActionDurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyDelayActionDuration)(nil)).Elem()
}

func (o NotificationPolicyDelayActionDurationOutput) ToNotificationPolicyDelayActionDurationOutput() NotificationPolicyDelayActionDurationOutput {
	return o
}

func (o NotificationPolicyDelayActionDurationOutput) ToNotificationPolicyDelayActionDurationOutputWithContext(ctx context.Context) NotificationPolicyDelayActionDurationOutput {
	return o
}

// A amount of time in `timeUnits`. This is a integer attribute.
func (o NotificationPolicyDelayActionDurationOutput) TimeAmount() pulumi.IntOutput {
	return o.ApplyT(func(v NotificationPolicyDelayActionDuration) int { return v.TimeAmount }).(pulumi.IntOutput)
}

// Valid time units are: `minutes`, `hours`, `days`. Default: `minutes`
func (o NotificationPolicyDelayActionDurationOutput) TimeUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyDelayActionDuration) *string { return v.TimeUnit }).(pulumi.StringPtrOutput)
}

type NotificationPolicyDelayActionDurationArrayOutput struct{ *pulumi.OutputState }

func (NotificationPolicyDelayActionDurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyDelayActionDuration)(nil)).Elem()
}

func (o NotificationPolicyDelayActionDurationArrayOutput) ToNotificationPolicyDelayActionDurationArrayOutput() NotificationPolicyDelayActionDurationArrayOutput {
	return o
}

func (o NotificationPolicyDelayActionDurationArrayOutput) ToNotificationPolicyDelayActionDurationArrayOutputWithContext(ctx context.Context) NotificationPolicyDelayActionDurationArrayOutput {
	return o
}

func (o NotificationPolicyDelayActionDurationArrayOutput) Index(i pulumi.IntInput) NotificationPolicyDelayActionDurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationPolicyDelayActionDuration {
		return vs[0].([]NotificationPolicyDelayActionDuration)[vs[1].(int)]
	}).(NotificationPolicyDelayActionDurationOutput)
}

type NotificationPolicyFilter struct {
	// Conditions applied to filter. This is a block, structure is documented below.
	Conditions []NotificationPolicyFilterCondition `pulumi:"conditions"`
	// A filter type, supported types are: `match-all`, `match-any-condition`, `match-all-conditions`. Default: `match-all`
	Type *string `pulumi:"type"`
}

// NotificationPolicyFilterInput is an input type that accepts NotificationPolicyFilterArgs and NotificationPolicyFilterOutput values.
// You can construct a concrete instance of `NotificationPolicyFilterInput` via:
//
//	NotificationPolicyFilterArgs{...}
type NotificationPolicyFilterInput interface {
	pulumi.Input

	ToNotificationPolicyFilterOutput() NotificationPolicyFilterOutput
	ToNotificationPolicyFilterOutputWithContext(context.Context) NotificationPolicyFilterOutput
}

type NotificationPolicyFilterArgs struct {
	// Conditions applied to filter. This is a block, structure is documented below.
	Conditions NotificationPolicyFilterConditionArrayInput `pulumi:"conditions"`
	// A filter type, supported types are: `match-all`, `match-any-condition`, `match-all-conditions`. Default: `match-all`
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (NotificationPolicyFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyFilter)(nil)).Elem()
}

func (i NotificationPolicyFilterArgs) ToNotificationPolicyFilterOutput() NotificationPolicyFilterOutput {
	return i.ToNotificationPolicyFilterOutputWithContext(context.Background())
}

func (i NotificationPolicyFilterArgs) ToNotificationPolicyFilterOutputWithContext(ctx context.Context) NotificationPolicyFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyFilterOutput)
}

// NotificationPolicyFilterArrayInput is an input type that accepts NotificationPolicyFilterArray and NotificationPolicyFilterArrayOutput values.
// You can construct a concrete instance of `NotificationPolicyFilterArrayInput` via:
//
//	NotificationPolicyFilterArray{ NotificationPolicyFilterArgs{...} }
type NotificationPolicyFilterArrayInput interface {
	pulumi.Input

	ToNotificationPolicyFilterArrayOutput() NotificationPolicyFilterArrayOutput
	ToNotificationPolicyFilterArrayOutputWithContext(context.Context) NotificationPolicyFilterArrayOutput
}

type NotificationPolicyFilterArray []NotificationPolicyFilterInput

func (NotificationPolicyFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyFilter)(nil)).Elem()
}

func (i NotificationPolicyFilterArray) ToNotificationPolicyFilterArrayOutput() NotificationPolicyFilterArrayOutput {
	return i.ToNotificationPolicyFilterArrayOutputWithContext(context.Background())
}

func (i NotificationPolicyFilterArray) ToNotificationPolicyFilterArrayOutputWithContext(ctx context.Context) NotificationPolicyFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyFilterArrayOutput)
}

type NotificationPolicyFilterOutput struct{ *pulumi.OutputState }

func (NotificationPolicyFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyFilter)(nil)).Elem()
}

func (o NotificationPolicyFilterOutput) ToNotificationPolicyFilterOutput() NotificationPolicyFilterOutput {
	return o
}

func (o NotificationPolicyFilterOutput) ToNotificationPolicyFilterOutputWithContext(ctx context.Context) NotificationPolicyFilterOutput {
	return o
}

// Conditions applied to filter. This is a block, structure is documented below.
func (o NotificationPolicyFilterOutput) Conditions() NotificationPolicyFilterConditionArrayOutput {
	return o.ApplyT(func(v NotificationPolicyFilter) []NotificationPolicyFilterCondition { return v.Conditions }).(NotificationPolicyFilterConditionArrayOutput)
}

// A filter type, supported types are: `match-all`, `match-any-condition`, `match-all-conditions`. Default: `match-all`
func (o NotificationPolicyFilterOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyFilter) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type NotificationPolicyFilterArrayOutput struct{ *pulumi.OutputState }

func (NotificationPolicyFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyFilter)(nil)).Elem()
}

func (o NotificationPolicyFilterArrayOutput) ToNotificationPolicyFilterArrayOutput() NotificationPolicyFilterArrayOutput {
	return o
}

func (o NotificationPolicyFilterArrayOutput) ToNotificationPolicyFilterArrayOutputWithContext(ctx context.Context) NotificationPolicyFilterArrayOutput {
	return o
}

func (o NotificationPolicyFilterArrayOutput) Index(i pulumi.IntInput) NotificationPolicyFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationPolicyFilter {
		return vs[0].([]NotificationPolicyFilter)[vs[1].(int)]
	}).(NotificationPolicyFilterOutput)
}

type NotificationPolicyFilterCondition struct {
	// User defined value that will be compared with alert field according to the operation. Default: empty string
	ExpectedValue *string `pulumi:"expectedValue"`
	// Specifies which alert field will be used in condition. Possible values are `message`, `alias`, `description`, `source`, `entity`, `tags`, `actions`, `details`, `extra-properties`, `responders`, `teams`, `priority`
	Field string `pulumi:"field"`
	// If `field` is set as extra-properties, key could be used for key-value pair
	Key *string `pulumi:"key"`
	// Indicates behaviour of the given operation. Default: `false`
	Not *bool `pulumi:"not"`
	// It is the operation that will be executed for the given field and key. Possible operations are `matches`, `contains`, `starts-with`, `ends-with`, `equals`, `contains-key`, `contains-value`, `greater-than`, `less-than`, `is-empty`, `equals-ignore-whitespace`.
	Operation string `pulumi:"operation"`
	// Order of the condition in conditions list
	Order *int `pulumi:"order"`
}

// NotificationPolicyFilterConditionInput is an input type that accepts NotificationPolicyFilterConditionArgs and NotificationPolicyFilterConditionOutput values.
// You can construct a concrete instance of `NotificationPolicyFilterConditionInput` via:
//
//	NotificationPolicyFilterConditionArgs{...}
type NotificationPolicyFilterConditionInput interface {
	pulumi.Input

	ToNotificationPolicyFilterConditionOutput() NotificationPolicyFilterConditionOutput
	ToNotificationPolicyFilterConditionOutputWithContext(context.Context) NotificationPolicyFilterConditionOutput
}

type NotificationPolicyFilterConditionArgs struct {
	// User defined value that will be compared with alert field according to the operation. Default: empty string
	ExpectedValue pulumi.StringPtrInput `pulumi:"expectedValue"`
	// Specifies which alert field will be used in condition. Possible values are `message`, `alias`, `description`, `source`, `entity`, `tags`, `actions`, `details`, `extra-properties`, `responders`, `teams`, `priority`
	Field pulumi.StringInput `pulumi:"field"`
	// If `field` is set as extra-properties, key could be used for key-value pair
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Indicates behaviour of the given operation. Default: `false`
	Not pulumi.BoolPtrInput `pulumi:"not"`
	// It is the operation that will be executed for the given field and key. Possible operations are `matches`, `contains`, `starts-with`, `ends-with`, `equals`, `contains-key`, `contains-value`, `greater-than`, `less-than`, `is-empty`, `equals-ignore-whitespace`.
	Operation pulumi.StringInput `pulumi:"operation"`
	// Order of the condition in conditions list
	Order pulumi.IntPtrInput `pulumi:"order"`
}

func (NotificationPolicyFilterConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyFilterCondition)(nil)).Elem()
}

func (i NotificationPolicyFilterConditionArgs) ToNotificationPolicyFilterConditionOutput() NotificationPolicyFilterConditionOutput {
	return i.ToNotificationPolicyFilterConditionOutputWithContext(context.Background())
}

func (i NotificationPolicyFilterConditionArgs) ToNotificationPolicyFilterConditionOutputWithContext(ctx context.Context) NotificationPolicyFilterConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyFilterConditionOutput)
}

// NotificationPolicyFilterConditionArrayInput is an input type that accepts NotificationPolicyFilterConditionArray and NotificationPolicyFilterConditionArrayOutput values.
// You can construct a concrete instance of `NotificationPolicyFilterConditionArrayInput` via:
//
//	NotificationPolicyFilterConditionArray{ NotificationPolicyFilterConditionArgs{...} }
type NotificationPolicyFilterConditionArrayInput interface {
	pulumi.Input

	ToNotificationPolicyFilterConditionArrayOutput() NotificationPolicyFilterConditionArrayOutput
	ToNotificationPolicyFilterConditionArrayOutputWithContext(context.Context) NotificationPolicyFilterConditionArrayOutput
}

type NotificationPolicyFilterConditionArray []NotificationPolicyFilterConditionInput

func (NotificationPolicyFilterConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyFilterCondition)(nil)).Elem()
}

func (i NotificationPolicyFilterConditionArray) ToNotificationPolicyFilterConditionArrayOutput() NotificationPolicyFilterConditionArrayOutput {
	return i.ToNotificationPolicyFilterConditionArrayOutputWithContext(context.Background())
}

func (i NotificationPolicyFilterConditionArray) ToNotificationPolicyFilterConditionArrayOutputWithContext(ctx context.Context) NotificationPolicyFilterConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyFilterConditionArrayOutput)
}

type NotificationPolicyFilterConditionOutput struct{ *pulumi.OutputState }

func (NotificationPolicyFilterConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyFilterCondition)(nil)).Elem()
}

func (o NotificationPolicyFilterConditionOutput) ToNotificationPolicyFilterConditionOutput() NotificationPolicyFilterConditionOutput {
	return o
}

func (o NotificationPolicyFilterConditionOutput) ToNotificationPolicyFilterConditionOutputWithContext(ctx context.Context) NotificationPolicyFilterConditionOutput {
	return o
}

// User defined value that will be compared with alert field according to the operation. Default: empty string
func (o NotificationPolicyFilterConditionOutput) ExpectedValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyFilterCondition) *string { return v.ExpectedValue }).(pulumi.StringPtrOutput)
}

// Specifies which alert field will be used in condition. Possible values are `message`, `alias`, `description`, `source`, `entity`, `tags`, `actions`, `details`, `extra-properties`, `responders`, `teams`, `priority`
func (o NotificationPolicyFilterConditionOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationPolicyFilterCondition) string { return v.Field }).(pulumi.StringOutput)
}

// If `field` is set as extra-properties, key could be used for key-value pair
func (o NotificationPolicyFilterConditionOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyFilterCondition) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Indicates behaviour of the given operation. Default: `false`
func (o NotificationPolicyFilterConditionOutput) Not() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NotificationPolicyFilterCondition) *bool { return v.Not }).(pulumi.BoolPtrOutput)
}

// It is the operation that will be executed for the given field and key. Possible operations are `matches`, `contains`, `starts-with`, `ends-with`, `equals`, `contains-key`, `contains-value`, `greater-than`, `less-than`, `is-empty`, `equals-ignore-whitespace`.
func (o NotificationPolicyFilterConditionOutput) Operation() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationPolicyFilterCondition) string { return v.Operation }).(pulumi.StringOutput)
}

// Order of the condition in conditions list
func (o NotificationPolicyFilterConditionOutput) Order() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NotificationPolicyFilterCondition) *int { return v.Order }).(pulumi.IntPtrOutput)
}

type NotificationPolicyFilterConditionArrayOutput struct{ *pulumi.OutputState }

func (NotificationPolicyFilterConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyFilterCondition)(nil)).Elem()
}

func (o NotificationPolicyFilterConditionArrayOutput) ToNotificationPolicyFilterConditionArrayOutput() NotificationPolicyFilterConditionArrayOutput {
	return o
}

func (o NotificationPolicyFilterConditionArrayOutput) ToNotificationPolicyFilterConditionArrayOutputWithContext(ctx context.Context) NotificationPolicyFilterConditionArrayOutput {
	return o
}

func (o NotificationPolicyFilterConditionArrayOutput) Index(i pulumi.IntInput) NotificationPolicyFilterConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationPolicyFilterCondition {
		return vs[0].([]NotificationPolicyFilterCondition)[vs[1].(int)]
	}).(NotificationPolicyFilterConditionOutput)
}

type NotificationPolicyTimeRestriction struct {
	// A definition of hourly definition applied daily, this has to be used with combination: type = `time-of-day`. This is a block, structure is documented below.
	Restriction []NotificationPolicyTimeRestrictionRestriction `pulumi:"restriction"`
	// List of days and hours definitions for field type = `weekday-and-time-of-day`. This is a block, structure is documented below.
	RestrictionList []NotificationPolicyTimeRestrictionRestrictionList `pulumi:"restrictionList"`
	// Defines if restriction should apply daily on given hours or on certain days and hours. Possible values are: `time-of-day`, `weekday-and-time-of-day`
	Type string `pulumi:"type"`
}

// NotificationPolicyTimeRestrictionInput is an input type that accepts NotificationPolicyTimeRestrictionArgs and NotificationPolicyTimeRestrictionOutput values.
// You can construct a concrete instance of `NotificationPolicyTimeRestrictionInput` via:
//
//	NotificationPolicyTimeRestrictionArgs{...}
type NotificationPolicyTimeRestrictionInput interface {
	pulumi.Input

	ToNotificationPolicyTimeRestrictionOutput() NotificationPolicyTimeRestrictionOutput
	ToNotificationPolicyTimeRestrictionOutputWithContext(context.Context) NotificationPolicyTimeRestrictionOutput
}

type NotificationPolicyTimeRestrictionArgs struct {
	// A definition of hourly definition applied daily, this has to be used with combination: type = `time-of-day`. This is a block, structure is documented below.
	Restriction NotificationPolicyTimeRestrictionRestrictionArrayInput `pulumi:"restriction"`
	// List of days and hours definitions for field type = `weekday-and-time-of-day`. This is a block, structure is documented below.
	RestrictionList NotificationPolicyTimeRestrictionRestrictionListArrayInput `pulumi:"restrictionList"`
	// Defines if restriction should apply daily on given hours or on certain days and hours. Possible values are: `time-of-day`, `weekday-and-time-of-day`
	Type pulumi.StringInput `pulumi:"type"`
}

func (NotificationPolicyTimeRestrictionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyTimeRestriction)(nil)).Elem()
}

func (i NotificationPolicyTimeRestrictionArgs) ToNotificationPolicyTimeRestrictionOutput() NotificationPolicyTimeRestrictionOutput {
	return i.ToNotificationPolicyTimeRestrictionOutputWithContext(context.Background())
}

func (i NotificationPolicyTimeRestrictionArgs) ToNotificationPolicyTimeRestrictionOutputWithContext(ctx context.Context) NotificationPolicyTimeRestrictionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyTimeRestrictionOutput)
}

// NotificationPolicyTimeRestrictionArrayInput is an input type that accepts NotificationPolicyTimeRestrictionArray and NotificationPolicyTimeRestrictionArrayOutput values.
// You can construct a concrete instance of `NotificationPolicyTimeRestrictionArrayInput` via:
//
//	NotificationPolicyTimeRestrictionArray{ NotificationPolicyTimeRestrictionArgs{...} }
type NotificationPolicyTimeRestrictionArrayInput interface {
	pulumi.Input

	ToNotificationPolicyTimeRestrictionArrayOutput() NotificationPolicyTimeRestrictionArrayOutput
	ToNotificationPolicyTimeRestrictionArrayOutputWithContext(context.Context) NotificationPolicyTimeRestrictionArrayOutput
}

type NotificationPolicyTimeRestrictionArray []NotificationPolicyTimeRestrictionInput

func (NotificationPolicyTimeRestrictionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyTimeRestriction)(nil)).Elem()
}

func (i NotificationPolicyTimeRestrictionArray) ToNotificationPolicyTimeRestrictionArrayOutput() NotificationPolicyTimeRestrictionArrayOutput {
	return i.ToNotificationPolicyTimeRestrictionArrayOutputWithContext(context.Background())
}

func (i NotificationPolicyTimeRestrictionArray) ToNotificationPolicyTimeRestrictionArrayOutputWithContext(ctx context.Context) NotificationPolicyTimeRestrictionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyTimeRestrictionArrayOutput)
}

type NotificationPolicyTimeRestrictionOutput struct{ *pulumi.OutputState }

func (NotificationPolicyTimeRestrictionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyTimeRestriction)(nil)).Elem()
}

func (o NotificationPolicyTimeRestrictionOutput) ToNotificationPolicyTimeRestrictionOutput() NotificationPolicyTimeRestrictionOutput {
	return o
}

func (o NotificationPolicyTimeRestrictionOutput) ToNotificationPolicyTimeRestrictionOutputWithContext(ctx context.Context) NotificationPolicyTimeRestrictionOutput {
	return o
}

// A definition of hourly definition applied daily, this has to be used with combination: type = `time-of-day`. This is a block, structure is documented below.
func (o NotificationPolicyTimeRestrictionOutput) Restriction() NotificationPolicyTimeRestrictionRestrictionArrayOutput {
	return o.ApplyT(func(v NotificationPolicyTimeRestriction) []NotificationPolicyTimeRestrictionRestriction {
		return v.Restriction
	}).(NotificationPolicyTimeRestrictionRestrictionArrayOutput)
}

// List of days and hours definitions for field type = `weekday-and-time-of-day`. This is a block, structure is documented below.
func (o NotificationPolicyTimeRestrictionOutput) RestrictionList() NotificationPolicyTimeRestrictionRestrictionListArrayOutput {
	return o.ApplyT(func(v NotificationPolicyTimeRestriction) []NotificationPolicyTimeRestrictionRestrictionList {
		return v.RestrictionList
	}).(NotificationPolicyTimeRestrictionRestrictionListArrayOutput)
}

// Defines if restriction should apply daily on given hours or on certain days and hours. Possible values are: `time-of-day`, `weekday-and-time-of-day`
func (o NotificationPolicyTimeRestrictionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationPolicyTimeRestriction) string { return v.Type }).(pulumi.StringOutput)
}

type NotificationPolicyTimeRestrictionArrayOutput struct{ *pulumi.OutputState }

func (NotificationPolicyTimeRestrictionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyTimeRestriction)(nil)).Elem()
}

func (o NotificationPolicyTimeRestrictionArrayOutput) ToNotificationPolicyTimeRestrictionArrayOutput() NotificationPolicyTimeRestrictionArrayOutput {
	return o
}

func (o NotificationPolicyTimeRestrictionArrayOutput) ToNotificationPolicyTimeRestrictionArrayOutputWithContext(ctx context.Context) NotificationPolicyTimeRestrictionArrayOutput {
	return o
}

func (o NotificationPolicyTimeRestrictionArrayOutput) Index(i pulumi.IntInput) NotificationPolicyTimeRestrictionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationPolicyTimeRestriction {
		return vs[0].([]NotificationPolicyTimeRestriction)[vs[1].(int)]
	}).(NotificationPolicyTimeRestrictionOutput)
}

type NotificationPolicyTimeRestrictionRestriction struct {
	// Ending hour of restriction.
	EndHour int `pulumi:"endHour"`
	// Ending minute of restriction on defined `endHour`
	EndMin int `pulumi:"endMin"`
	// Starting hour of restriction.
	StartHour int `pulumi:"startHour"`
	// Staring minute of restriction on defined `startHour`
	StartMin int `pulumi:"startMin"`
}

// NotificationPolicyTimeRestrictionRestrictionInput is an input type that accepts NotificationPolicyTimeRestrictionRestrictionArgs and NotificationPolicyTimeRestrictionRestrictionOutput values.
// You can construct a concrete instance of `NotificationPolicyTimeRestrictionRestrictionInput` via:
//
//	NotificationPolicyTimeRestrictionRestrictionArgs{...}
type NotificationPolicyTimeRestrictionRestrictionInput interface {
	pulumi.Input

	ToNotificationPolicyTimeRestrictionRestrictionOutput() NotificationPolicyTimeRestrictionRestrictionOutput
	ToNotificationPolicyTimeRestrictionRestrictionOutputWithContext(context.Context) NotificationPolicyTimeRestrictionRestrictionOutput
}

type NotificationPolicyTimeRestrictionRestrictionArgs struct {
	// Ending hour of restriction.
	EndHour pulumi.IntInput `pulumi:"endHour"`
	// Ending minute of restriction on defined `endHour`
	EndMin pulumi.IntInput `pulumi:"endMin"`
	// Starting hour of restriction.
	StartHour pulumi.IntInput `pulumi:"startHour"`
	// Staring minute of restriction on defined `startHour`
	StartMin pulumi.IntInput `pulumi:"startMin"`
}

func (NotificationPolicyTimeRestrictionRestrictionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyTimeRestrictionRestriction)(nil)).Elem()
}

func (i NotificationPolicyTimeRestrictionRestrictionArgs) ToNotificationPolicyTimeRestrictionRestrictionOutput() NotificationPolicyTimeRestrictionRestrictionOutput {
	return i.ToNotificationPolicyTimeRestrictionRestrictionOutputWithContext(context.Background())
}

func (i NotificationPolicyTimeRestrictionRestrictionArgs) ToNotificationPolicyTimeRestrictionRestrictionOutputWithContext(ctx context.Context) NotificationPolicyTimeRestrictionRestrictionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyTimeRestrictionRestrictionOutput)
}

// NotificationPolicyTimeRestrictionRestrictionArrayInput is an input type that accepts NotificationPolicyTimeRestrictionRestrictionArray and NotificationPolicyTimeRestrictionRestrictionArrayOutput values.
// You can construct a concrete instance of `NotificationPolicyTimeRestrictionRestrictionArrayInput` via:
//
//	NotificationPolicyTimeRestrictionRestrictionArray{ NotificationPolicyTimeRestrictionRestrictionArgs{...} }
type NotificationPolicyTimeRestrictionRestrictionArrayInput interface {
	pulumi.Input

	ToNotificationPolicyTimeRestrictionRestrictionArrayOutput() NotificationPolicyTimeRestrictionRestrictionArrayOutput
	ToNotificationPolicyTimeRestrictionRestrictionArrayOutputWithContext(context.Context) NotificationPolicyTimeRestrictionRestrictionArrayOutput
}

type NotificationPolicyTimeRestrictionRestrictionArray []NotificationPolicyTimeRestrictionRestrictionInput

func (NotificationPolicyTimeRestrictionRestrictionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyTimeRestrictionRestriction)(nil)).Elem()
}

func (i NotificationPolicyTimeRestrictionRestrictionArray) ToNotificationPolicyTimeRestrictionRestrictionArrayOutput() NotificationPolicyTimeRestrictionRestrictionArrayOutput {
	return i.ToNotificationPolicyTimeRestrictionRestrictionArrayOutputWithContext(context.Background())
}

func (i NotificationPolicyTimeRestrictionRestrictionArray) ToNotificationPolicyTimeRestrictionRestrictionArrayOutputWithContext(ctx context.Context) NotificationPolicyTimeRestrictionRestrictionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyTimeRestrictionRestrictionArrayOutput)
}

type NotificationPolicyTimeRestrictionRestrictionOutput struct{ *pulumi.OutputState }

func (NotificationPolicyTimeRestrictionRestrictionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyTimeRestrictionRestriction)(nil)).Elem()
}

func (o NotificationPolicyTimeRestrictionRestrictionOutput) ToNotificationPolicyTimeRestrictionRestrictionOutput() NotificationPolicyTimeRestrictionRestrictionOutput {
	return o
}

func (o NotificationPolicyTimeRestrictionRestrictionOutput) ToNotificationPolicyTimeRestrictionRestrictionOutputWithContext(ctx context.Context) NotificationPolicyTimeRestrictionRestrictionOutput {
	return o
}

// Ending hour of restriction.
func (o NotificationPolicyTimeRestrictionRestrictionOutput) EndHour() pulumi.IntOutput {
	return o.ApplyT(func(v NotificationPolicyTimeRestrictionRestriction) int { return v.EndHour }).(pulumi.IntOutput)
}

// Ending minute of restriction on defined `endHour`
func (o NotificationPolicyTimeRestrictionRestrictionOutput) EndMin() pulumi.IntOutput {
	return o.ApplyT(func(v NotificationPolicyTimeRestrictionRestriction) int { return v.EndMin }).(pulumi.IntOutput)
}

// Starting hour of restriction.
func (o NotificationPolicyTimeRestrictionRestrictionOutput) StartHour() pulumi.IntOutput {
	return o.ApplyT(func(v NotificationPolicyTimeRestrictionRestriction) int { return v.StartHour }).(pulumi.IntOutput)
}

// Staring minute of restriction on defined `startHour`
func (o NotificationPolicyTimeRestrictionRestrictionOutput) StartMin() pulumi.IntOutput {
	return o.ApplyT(func(v NotificationPolicyTimeRestrictionRestriction) int { return v.StartMin }).(pulumi.IntOutput)
}

type NotificationPolicyTimeRestrictionRestrictionArrayOutput struct{ *pulumi.OutputState }

func (NotificationPolicyTimeRestrictionRestrictionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyTimeRestrictionRestriction)(nil)).Elem()
}

func (o NotificationPolicyTimeRestrictionRestrictionArrayOutput) ToNotificationPolicyTimeRestrictionRestrictionArrayOutput() NotificationPolicyTimeRestrictionRestrictionArrayOutput {
	return o
}

func (o NotificationPolicyTimeRestrictionRestrictionArrayOutput) ToNotificationPolicyTimeRestrictionRestrictionArrayOutputWithContext(ctx context.Context) NotificationPolicyTimeRestrictionRestrictionArrayOutput {
	return o
}

func (o NotificationPolicyTimeRestrictionRestrictionArrayOutput) Index(i pulumi.IntInput) NotificationPolicyTimeRestrictionRestrictionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationPolicyTimeRestrictionRestriction {
		return vs[0].([]NotificationPolicyTimeRestrictionRestriction)[vs[1].(int)]
	}).(NotificationPolicyTimeRestrictionRestrictionOutput)
}

type NotificationPolicyTimeRestrictionRestrictionList struct {
	// Ending day of restriction (eg. `wednesday`)
	EndDay string `pulumi:"endDay"`
	// Ending hour of restriction on defined `endDay`
	EndHour int `pulumi:"endHour"`
	// Ending minute of restriction on defined `endHour`
	EndMin int `pulumi:"endMin"`
	// Starting day of restriction (eg. `monday`)
	StartDay string `pulumi:"startDay"`
	// Starting hour of restriction on defined `startDay`
	StartHour int `pulumi:"startHour"`
	// Staring minute of restriction on defined `startHour`
	StartMin int `pulumi:"startMin"`
}

// NotificationPolicyTimeRestrictionRestrictionListInput is an input type that accepts NotificationPolicyTimeRestrictionRestrictionListArgs and NotificationPolicyTimeRestrictionRestrictionListOutput values.
// You can construct a concrete instance of `NotificationPolicyTimeRestrictionRestrictionListInput` via:
//
//	NotificationPolicyTimeRestrictionRestrictionListArgs{...}
type NotificationPolicyTimeRestrictionRestrictionListInput interface {
	pulumi.Input

	ToNotificationPolicyTimeRestrictionRestrictionListOutput() NotificationPolicyTimeRestrictionRestrictionListOutput
	ToNotificationPolicyTimeRestrictionRestrictionListOutputWithContext(context.Context) NotificationPolicyTimeRestrictionRestrictionListOutput
}

type NotificationPolicyTimeRestrictionRestrictionListArgs struct {
	// Ending day of restriction (eg. `wednesday`)
	EndDay pulumi.StringInput `pulumi:"endDay"`
	// Ending hour of restriction on defined `endDay`
	EndHour pulumi.IntInput `pulumi:"endHour"`
	// Ending minute of restriction on defined `endHour`
	EndMin pulumi.IntInput `pulumi:"endMin"`
	// Starting day of restriction (eg. `monday`)
	StartDay pulumi.StringInput `pulumi:"startDay"`
	// Starting hour of restriction on defined `startDay`
	StartHour pulumi.IntInput `pulumi:"startHour"`
	// Staring minute of restriction on defined `startHour`
	StartMin pulumi.IntInput `pulumi:"startMin"`
}

func (NotificationPolicyTimeRestrictionRestrictionListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyTimeRestrictionRestrictionList)(nil)).Elem()
}

func (i NotificationPolicyTimeRestrictionRestrictionListArgs) ToNotificationPolicyTimeRestrictionRestrictionListOutput() NotificationPolicyTimeRestrictionRestrictionListOutput {
	return i.ToNotificationPolicyTimeRestrictionRestrictionListOutputWithContext(context.Background())
}

func (i NotificationPolicyTimeRestrictionRestrictionListArgs) ToNotificationPolicyTimeRestrictionRestrictionListOutputWithContext(ctx context.Context) NotificationPolicyTimeRestrictionRestrictionListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyTimeRestrictionRestrictionListOutput)
}

// NotificationPolicyTimeRestrictionRestrictionListArrayInput is an input type that accepts NotificationPolicyTimeRestrictionRestrictionListArray and NotificationPolicyTimeRestrictionRestrictionListArrayOutput values.
// You can construct a concrete instance of `NotificationPolicyTimeRestrictionRestrictionListArrayInput` via:
//
//	NotificationPolicyTimeRestrictionRestrictionListArray{ NotificationPolicyTimeRestrictionRestrictionListArgs{...} }
type NotificationPolicyTimeRestrictionRestrictionListArrayInput interface {
	pulumi.Input

	ToNotificationPolicyTimeRestrictionRestrictionListArrayOutput() NotificationPolicyTimeRestrictionRestrictionListArrayOutput
	ToNotificationPolicyTimeRestrictionRestrictionListArrayOutputWithContext(context.Context) NotificationPolicyTimeRestrictionRestrictionListArrayOutput
}

type NotificationPolicyTimeRestrictionRestrictionListArray []NotificationPolicyTimeRestrictionRestrictionListInput

func (NotificationPolicyTimeRestrictionRestrictionListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyTimeRestrictionRestrictionList)(nil)).Elem()
}

func (i NotificationPolicyTimeRestrictionRestrictionListArray) ToNotificationPolicyTimeRestrictionRestrictionListArrayOutput() NotificationPolicyTimeRestrictionRestrictionListArrayOutput {
	return i.ToNotificationPolicyTimeRestrictionRestrictionListArrayOutputWithContext(context.Background())
}

func (i NotificationPolicyTimeRestrictionRestrictionListArray) ToNotificationPolicyTimeRestrictionRestrictionListArrayOutputWithContext(ctx context.Context) NotificationPolicyTimeRestrictionRestrictionListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyTimeRestrictionRestrictionListArrayOutput)
}

type NotificationPolicyTimeRestrictionRestrictionListOutput struct{ *pulumi.OutputState }

func (NotificationPolicyTimeRestrictionRestrictionListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyTimeRestrictionRestrictionList)(nil)).Elem()
}

func (o NotificationPolicyTimeRestrictionRestrictionListOutput) ToNotificationPolicyTimeRestrictionRestrictionListOutput() NotificationPolicyTimeRestrictionRestrictionListOutput {
	return o
}

func (o NotificationPolicyTimeRestrictionRestrictionListOutput) ToNotificationPolicyTimeRestrictionRestrictionListOutputWithContext(ctx context.Context) NotificationPolicyTimeRestrictionRestrictionListOutput {
	return o
}

// Ending day of restriction (eg. `wednesday`)
func (o NotificationPolicyTimeRestrictionRestrictionListOutput) EndDay() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationPolicyTimeRestrictionRestrictionList) string { return v.EndDay }).(pulumi.StringOutput)
}

// Ending hour of restriction on defined `endDay`
func (o NotificationPolicyTimeRestrictionRestrictionListOutput) EndHour() pulumi.IntOutput {
	return o.ApplyT(func(v NotificationPolicyTimeRestrictionRestrictionList) int { return v.EndHour }).(pulumi.IntOutput)
}

// Ending minute of restriction on defined `endHour`
func (o NotificationPolicyTimeRestrictionRestrictionListOutput) EndMin() pulumi.IntOutput {
	return o.ApplyT(func(v NotificationPolicyTimeRestrictionRestrictionList) int { return v.EndMin }).(pulumi.IntOutput)
}

// Starting day of restriction (eg. `monday`)
func (o NotificationPolicyTimeRestrictionRestrictionListOutput) StartDay() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationPolicyTimeRestrictionRestrictionList) string { return v.StartDay }).(pulumi.StringOutput)
}

// Starting hour of restriction on defined `startDay`
func (o NotificationPolicyTimeRestrictionRestrictionListOutput) StartHour() pulumi.IntOutput {
	return o.ApplyT(func(v NotificationPolicyTimeRestrictionRestrictionList) int { return v.StartHour }).(pulumi.IntOutput)
}

// Staring minute of restriction on defined `startHour`
func (o NotificationPolicyTimeRestrictionRestrictionListOutput) StartMin() pulumi.IntOutput {
	return o.ApplyT(func(v NotificationPolicyTimeRestrictionRestrictionList) int { return v.StartMin }).(pulumi.IntOutput)
}

type NotificationPolicyTimeRestrictionRestrictionListArrayOutput struct{ *pulumi.OutputState }

func (NotificationPolicyTimeRestrictionRestrictionListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyTimeRestrictionRestrictionList)(nil)).Elem()
}

func (o NotificationPolicyTimeRestrictionRestrictionListArrayOutput) ToNotificationPolicyTimeRestrictionRestrictionListArrayOutput() NotificationPolicyTimeRestrictionRestrictionListArrayOutput {
	return o
}

func (o NotificationPolicyTimeRestrictionRestrictionListArrayOutput) ToNotificationPolicyTimeRestrictionRestrictionListArrayOutputWithContext(ctx context.Context) NotificationPolicyTimeRestrictionRestrictionListArrayOutput {
	return o
}

func (o NotificationPolicyTimeRestrictionRestrictionListArrayOutput) Index(i pulumi.IntInput) NotificationPolicyTimeRestrictionRestrictionListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationPolicyTimeRestrictionRestrictionList {
		return vs[0].([]NotificationPolicyTimeRestrictionRestrictionList)[vs[1].(int)]
	}).(NotificationPolicyTimeRestrictionRestrictionListOutput)
}

type NotificationRuleCriteria struct {
	// Defines the fields and values when the condition applies
	Conditions []NotificationRuleCriteriaCondition `pulumi:"conditions"`
	// Kind of matching filter. Possible values: `match-all`, `match-any-condition`, `match-all-conditions`
	Type string `pulumi:"type"`
}

// NotificationRuleCriteriaInput is an input type that accepts NotificationRuleCriteriaArgs and NotificationRuleCriteriaOutput values.
// You can construct a concrete instance of `NotificationRuleCriteriaInput` via:
//
//	NotificationRuleCriteriaArgs{...}
type NotificationRuleCriteriaInput interface {
	pulumi.Input

	ToNotificationRuleCriteriaOutput() NotificationRuleCriteriaOutput
	ToNotificationRuleCriteriaOutputWithContext(context.Context) NotificationRuleCriteriaOutput
}

type NotificationRuleCriteriaArgs struct {
	// Defines the fields and values when the condition applies
	Conditions NotificationRuleCriteriaConditionArrayInput `pulumi:"conditions"`
	// Kind of matching filter. Possible values: `match-all`, `match-any-condition`, `match-all-conditions`
	Type pulumi.StringInput `pulumi:"type"`
}

func (NotificationRuleCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationRuleCriteria)(nil)).Elem()
}

func (i NotificationRuleCriteriaArgs) ToNotificationRuleCriteriaOutput() NotificationRuleCriteriaOutput {
	return i.ToNotificationRuleCriteriaOutputWithContext(context.Background())
}

func (i NotificationRuleCriteriaArgs) ToNotificationRuleCriteriaOutputWithContext(ctx context.Context) NotificationRuleCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationRuleCriteriaOutput)
}

// NotificationRuleCriteriaArrayInput is an input type that accepts NotificationRuleCriteriaArray and NotificationRuleCriteriaArrayOutput values.
// You can construct a concrete instance of `NotificationRuleCriteriaArrayInput` via:
//
//	NotificationRuleCriteriaArray{ NotificationRuleCriteriaArgs{...} }
type NotificationRuleCriteriaArrayInput interface {
	pulumi.Input

	ToNotificationRuleCriteriaArrayOutput() NotificationRuleCriteriaArrayOutput
	ToNotificationRuleCriteriaArrayOutputWithContext(context.Context) NotificationRuleCriteriaArrayOutput
}

type NotificationRuleCriteriaArray []NotificationRuleCriteriaInput

func (NotificationRuleCriteriaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationRuleCriteria)(nil)).Elem()
}

func (i NotificationRuleCriteriaArray) ToNotificationRuleCriteriaArrayOutput() NotificationRuleCriteriaArrayOutput {
	return i.ToNotificationRuleCriteriaArrayOutputWithContext(context.Background())
}

func (i NotificationRuleCriteriaArray) ToNotificationRuleCriteriaArrayOutputWithContext(ctx context.Context) NotificationRuleCriteriaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationRuleCriteriaArrayOutput)
}

type NotificationRuleCriteriaOutput struct{ *pulumi.OutputState }

func (NotificationRuleCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationRuleCriteria)(nil)).Elem()
}

func (o NotificationRuleCriteriaOutput) ToNotificationRuleCriteriaOutput() NotificationRuleCriteriaOutput {
	return o
}

func (o NotificationRuleCriteriaOutput) ToNotificationRuleCriteriaOutputWithContext(ctx context.Context) NotificationRuleCriteriaOutput {
	return o
}

// Defines the fields and values when the condition applies
func (o NotificationRuleCriteriaOutput) Conditions() NotificationRuleCriteriaConditionArrayOutput {
	return o.ApplyT(func(v NotificationRuleCriteria) []NotificationRuleCriteriaCondition { return v.Conditions }).(NotificationRuleCriteriaConditionArrayOutput)
}

// Kind of matching filter. Possible values: `match-all`, `match-any-condition`, `match-all-conditions`
func (o NotificationRuleCriteriaOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationRuleCriteria) string { return v.Type }).(pulumi.StringOutput)
}

type NotificationRuleCriteriaArrayOutput struct{ *pulumi.OutputState }

func (NotificationRuleCriteriaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationRuleCriteria)(nil)).Elem()
}

func (o NotificationRuleCriteriaArrayOutput) ToNotificationRuleCriteriaArrayOutput() NotificationRuleCriteriaArrayOutput {
	return o
}

func (o NotificationRuleCriteriaArrayOutput) ToNotificationRuleCriteriaArrayOutputWithContext(ctx context.Context) NotificationRuleCriteriaArrayOutput {
	return o
}

func (o NotificationRuleCriteriaArrayOutput) Index(i pulumi.IntInput) NotificationRuleCriteriaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationRuleCriteria {
		return vs[0].([]NotificationRuleCriteria)[vs[1].(int)]
	}).(NotificationRuleCriteriaOutput)
}

type NotificationRuleCriteriaCondition struct {
	// User defined value that will be compared with alert field according to the operation. Default: empty string
	ExpectedValue *string `pulumi:"expectedValue"`
	// Possible values: `message`, `alias`, `description`, `source`, `entity`, `tags`, `actions`, `details`, `extra-properties`, `recipients`, `teams`, `priority`
	Field string `pulumi:"field"`
	// If 'field' is set as 'extra-properties', key could be used for key-value pair
	Key *string `pulumi:"key"`
	// Indicates behaviour of the given operation. Default: `false`
	Not *bool `pulumi:"not"`
	// Possible values: `matches`, `contains`, `starts-with`, `ends-with`, `equals`, `contains-key`, `contains-value`, `greater-than`, `less-than`, `is-empty`, `equals-ignore-whitespace`
	Operation string `pulumi:"operation"`
	// Order of the condition in conditions list
	Order *int `pulumi:"order"`
}

// NotificationRuleCriteriaConditionInput is an input type that accepts NotificationRuleCriteriaConditionArgs and NotificationRuleCriteriaConditionOutput values.
// You can construct a concrete instance of `NotificationRuleCriteriaConditionInput` via:
//
//	NotificationRuleCriteriaConditionArgs{...}
type NotificationRuleCriteriaConditionInput interface {
	pulumi.Input

	ToNotificationRuleCriteriaConditionOutput() NotificationRuleCriteriaConditionOutput
	ToNotificationRuleCriteriaConditionOutputWithContext(context.Context) NotificationRuleCriteriaConditionOutput
}

type NotificationRuleCriteriaConditionArgs struct {
	// User defined value that will be compared with alert field according to the operation. Default: empty string
	ExpectedValue pulumi.StringPtrInput `pulumi:"expectedValue"`
	// Possible values: `message`, `alias`, `description`, `source`, `entity`, `tags`, `actions`, `details`, `extra-properties`, `recipients`, `teams`, `priority`
	Field pulumi.StringInput `pulumi:"field"`
	// If 'field' is set as 'extra-properties', key could be used for key-value pair
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Indicates behaviour of the given operation. Default: `false`
	Not pulumi.BoolPtrInput `pulumi:"not"`
	// Possible values: `matches`, `contains`, `starts-with`, `ends-with`, `equals`, `contains-key`, `contains-value`, `greater-than`, `less-than`, `is-empty`, `equals-ignore-whitespace`
	Operation pulumi.StringInput `pulumi:"operation"`
	// Order of the condition in conditions list
	Order pulumi.IntPtrInput `pulumi:"order"`
}

func (NotificationRuleCriteriaConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationRuleCriteriaCondition)(nil)).Elem()
}

func (i NotificationRuleCriteriaConditionArgs) ToNotificationRuleCriteriaConditionOutput() NotificationRuleCriteriaConditionOutput {
	return i.ToNotificationRuleCriteriaConditionOutputWithContext(context.Background())
}

func (i NotificationRuleCriteriaConditionArgs) ToNotificationRuleCriteriaConditionOutputWithContext(ctx context.Context) NotificationRuleCriteriaConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationRuleCriteriaConditionOutput)
}

// NotificationRuleCriteriaConditionArrayInput is an input type that accepts NotificationRuleCriteriaConditionArray and NotificationRuleCriteriaConditionArrayOutput values.
// You can construct a concrete instance of `NotificationRuleCriteriaConditionArrayInput` via:
//
//	NotificationRuleCriteriaConditionArray{ NotificationRuleCriteriaConditionArgs{...} }
type NotificationRuleCriteriaConditionArrayInput interface {
	pulumi.Input

	ToNotificationRuleCriteriaConditionArrayOutput() NotificationRuleCriteriaConditionArrayOutput
	ToNotificationRuleCriteriaConditionArrayOutputWithContext(context.Context) NotificationRuleCriteriaConditionArrayOutput
}

type NotificationRuleCriteriaConditionArray []NotificationRuleCriteriaConditionInput

func (NotificationRuleCriteriaConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationRuleCriteriaCondition)(nil)).Elem()
}

func (i NotificationRuleCriteriaConditionArray) ToNotificationRuleCriteriaConditionArrayOutput() NotificationRuleCriteriaConditionArrayOutput {
	return i.ToNotificationRuleCriteriaConditionArrayOutputWithContext(context.Background())
}

func (i NotificationRuleCriteriaConditionArray) ToNotificationRuleCriteriaConditionArrayOutputWithContext(ctx context.Context) NotificationRuleCriteriaConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationRuleCriteriaConditionArrayOutput)
}

type NotificationRuleCriteriaConditionOutput struct{ *pulumi.OutputState }

func (NotificationRuleCriteriaConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationRuleCriteriaCondition)(nil)).Elem()
}

func (o NotificationRuleCriteriaConditionOutput) ToNotificationRuleCriteriaConditionOutput() NotificationRuleCriteriaConditionOutput {
	return o
}

func (o NotificationRuleCriteriaConditionOutput) ToNotificationRuleCriteriaConditionOutputWithContext(ctx context.Context) NotificationRuleCriteriaConditionOutput {
	return o
}

// User defined value that will be compared with alert field according to the operation. Default: empty string
func (o NotificationRuleCriteriaConditionOutput) ExpectedValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationRuleCriteriaCondition) *string { return v.ExpectedValue }).(pulumi.StringPtrOutput)
}

// Possible values: `message`, `alias`, `description`, `source`, `entity`, `tags`, `actions`, `details`, `extra-properties`, `recipients`, `teams`, `priority`
func (o NotificationRuleCriteriaConditionOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationRuleCriteriaCondition) string { return v.Field }).(pulumi.StringOutput)
}

// If 'field' is set as 'extra-properties', key could be used for key-value pair
func (o NotificationRuleCriteriaConditionOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationRuleCriteriaCondition) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Indicates behaviour of the given operation. Default: `false`
func (o NotificationRuleCriteriaConditionOutput) Not() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NotificationRuleCriteriaCondition) *bool { return v.Not }).(pulumi.BoolPtrOutput)
}

// Possible values: `matches`, `contains`, `starts-with`, `ends-with`, `equals`, `contains-key`, `contains-value`, `greater-than`, `less-than`, `is-empty`, `equals-ignore-whitespace`
func (o NotificationRuleCriteriaConditionOutput) Operation() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationRuleCriteriaCondition) string { return v.Operation }).(pulumi.StringOutput)
}

// Order of the condition in conditions list
func (o NotificationRuleCriteriaConditionOutput) Order() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NotificationRuleCriteriaCondition) *int { return v.Order }).(pulumi.IntPtrOutput)
}

type NotificationRuleCriteriaConditionArrayOutput struct{ *pulumi.OutputState }

func (NotificationRuleCriteriaConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationRuleCriteriaCondition)(nil)).Elem()
}

func (o NotificationRuleCriteriaConditionArrayOutput) ToNotificationRuleCriteriaConditionArrayOutput() NotificationRuleCriteriaConditionArrayOutput {
	return o
}

func (o NotificationRuleCriteriaConditionArrayOutput) ToNotificationRuleCriteriaConditionArrayOutputWithContext(ctx context.Context) NotificationRuleCriteriaConditionArrayOutput {
	return o
}

func (o NotificationRuleCriteriaConditionArrayOutput) Index(i pulumi.IntInput) NotificationRuleCriteriaConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationRuleCriteriaCondition {
		return vs[0].([]NotificationRuleCriteriaCondition)[vs[1].(int)]
	}).(NotificationRuleCriteriaConditionOutput)
}

type NotificationRuleRepeat struct {
	// If policy should be enabled. Default: `true`
	Enabled   *bool `pulumi:"enabled"`
	LoopAfter int   `pulumi:"loopAfter"`
}

// NotificationRuleRepeatInput is an input type that accepts NotificationRuleRepeatArgs and NotificationRuleRepeatOutput values.
// You can construct a concrete instance of `NotificationRuleRepeatInput` via:
//
//	NotificationRuleRepeatArgs{...}
type NotificationRuleRepeatInput interface {
	pulumi.Input

	ToNotificationRuleRepeatOutput() NotificationRuleRepeatOutput
	ToNotificationRuleRepeatOutputWithContext(context.Context) NotificationRuleRepeatOutput
}

type NotificationRuleRepeatArgs struct {
	// If policy should be enabled. Default: `true`
	Enabled   pulumi.BoolPtrInput `pulumi:"enabled"`
	LoopAfter pulumi.IntInput     `pulumi:"loopAfter"`
}

func (NotificationRuleRepeatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationRuleRepeat)(nil)).Elem()
}

func (i NotificationRuleRepeatArgs) ToNotificationRuleRepeatOutput() NotificationRuleRepeatOutput {
	return i.ToNotificationRuleRepeatOutputWithContext(context.Background())
}

func (i NotificationRuleRepeatArgs) ToNotificationRuleRepeatOutputWithContext(ctx context.Context) NotificationRuleRepeatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationRuleRepeatOutput)
}

// NotificationRuleRepeatArrayInput is an input type that accepts NotificationRuleRepeatArray and NotificationRuleRepeatArrayOutput values.
// You can construct a concrete instance of `NotificationRuleRepeatArrayInput` via:
//
//	NotificationRuleRepeatArray{ NotificationRuleRepeatArgs{...} }
type NotificationRuleRepeatArrayInput interface {
	pulumi.Input

	ToNotificationRuleRepeatArrayOutput() NotificationRuleRepeatArrayOutput
	ToNotificationRuleRepeatArrayOutputWithContext(context.Context) NotificationRuleRepeatArrayOutput
}

type NotificationRuleRepeatArray []NotificationRuleRepeatInput

func (NotificationRuleRepeatArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationRuleRepeat)(nil)).Elem()
}

func (i NotificationRuleRepeatArray) ToNotificationRuleRepeatArrayOutput() NotificationRuleRepeatArrayOutput {
	return i.ToNotificationRuleRepeatArrayOutputWithContext(context.Background())
}

func (i NotificationRuleRepeatArray) ToNotificationRuleRepeatArrayOutputWithContext(ctx context.Context) NotificationRuleRepeatArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationRuleRepeatArrayOutput)
}

type NotificationRuleRepeatOutput struct{ *pulumi.OutputState }

func (NotificationRuleRepeatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationRuleRepeat)(nil)).Elem()
}

func (o NotificationRuleRepeatOutput) ToNotificationRuleRepeatOutput() NotificationRuleRepeatOutput {
	return o
}

func (o NotificationRuleRepeatOutput) ToNotificationRuleRepeatOutputWithContext(ctx context.Context) NotificationRuleRepeatOutput {
	return o
}

// If policy should be enabled. Default: `true`
func (o NotificationRuleRepeatOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NotificationRuleRepeat) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o NotificationRuleRepeatOutput) LoopAfter() pulumi.IntOutput {
	return o.ApplyT(func(v NotificationRuleRepeat) int { return v.LoopAfter }).(pulumi.IntOutput)
}

type NotificationRuleRepeatArrayOutput struct{ *pulumi.OutputState }

func (NotificationRuleRepeatArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationRuleRepeat)(nil)).Elem()
}

func (o NotificationRuleRepeatArrayOutput) ToNotificationRuleRepeatArrayOutput() NotificationRuleRepeatArrayOutput {
	return o
}

func (o NotificationRuleRepeatArrayOutput) ToNotificationRuleRepeatArrayOutputWithContext(ctx context.Context) NotificationRuleRepeatArrayOutput {
	return o
}

func (o NotificationRuleRepeatArrayOutput) Index(i pulumi.IntInput) NotificationRuleRepeatOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationRuleRepeat {
		return vs[0].([]NotificationRuleRepeat)[vs[1].(int)]
	}).(NotificationRuleRepeatOutput)
}

type NotificationRuleSchedule struct {
	// Name of the notification policy
	Name string `pulumi:"name"`
	// Kind of matching filter. Possible values: `match-all`, `match-any-condition`, `match-all-conditions`
	Type string `pulumi:"type"`
}

// NotificationRuleScheduleInput is an input type that accepts NotificationRuleScheduleArgs and NotificationRuleScheduleOutput values.
// You can construct a concrete instance of `NotificationRuleScheduleInput` via:
//
//	NotificationRuleScheduleArgs{...}
type NotificationRuleScheduleInput interface {
	pulumi.Input

	ToNotificationRuleScheduleOutput() NotificationRuleScheduleOutput
	ToNotificationRuleScheduleOutputWithContext(context.Context) NotificationRuleScheduleOutput
}

type NotificationRuleScheduleArgs struct {
	// Name of the notification policy
	Name pulumi.StringInput `pulumi:"name"`
	// Kind of matching filter. Possible values: `match-all`, `match-any-condition`, `match-all-conditions`
	Type pulumi.StringInput `pulumi:"type"`
}

func (NotificationRuleScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationRuleSchedule)(nil)).Elem()
}

func (i NotificationRuleScheduleArgs) ToNotificationRuleScheduleOutput() NotificationRuleScheduleOutput {
	return i.ToNotificationRuleScheduleOutputWithContext(context.Background())
}

func (i NotificationRuleScheduleArgs) ToNotificationRuleScheduleOutputWithContext(ctx context.Context) NotificationRuleScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationRuleScheduleOutput)
}

// NotificationRuleScheduleArrayInput is an input type that accepts NotificationRuleScheduleArray and NotificationRuleScheduleArrayOutput values.
// You can construct a concrete instance of `NotificationRuleScheduleArrayInput` via:
//
//	NotificationRuleScheduleArray{ NotificationRuleScheduleArgs{...} }
type NotificationRuleScheduleArrayInput interface {
	pulumi.Input

	ToNotificationRuleScheduleArrayOutput() NotificationRuleScheduleArrayOutput
	ToNotificationRuleScheduleArrayOutputWithContext(context.Context) NotificationRuleScheduleArrayOutput
}

type NotificationRuleScheduleArray []NotificationRuleScheduleInput

func (NotificationRuleScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationRuleSchedule)(nil)).Elem()
}

func (i NotificationRuleScheduleArray) ToNotificationRuleScheduleArrayOutput() NotificationRuleScheduleArrayOutput {
	return i.ToNotificationRuleScheduleArrayOutputWithContext(context.Background())
}

func (i NotificationRuleScheduleArray) ToNotificationRuleScheduleArrayOutputWithContext(ctx context.Context) NotificationRuleScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationRuleScheduleArrayOutput)
}

type NotificationRuleScheduleOutput struct{ *pulumi.OutputState }

func (NotificationRuleScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationRuleSchedule)(nil)).Elem()
}

func (o NotificationRuleScheduleOutput) ToNotificationRuleScheduleOutput() NotificationRuleScheduleOutput {
	return o
}

func (o NotificationRuleScheduleOutput) ToNotificationRuleScheduleOutputWithContext(ctx context.Context) NotificationRuleScheduleOutput {
	return o
}

// Name of the notification policy
func (o NotificationRuleScheduleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationRuleSchedule) string { return v.Name }).(pulumi.StringOutput)
}

// Kind of matching filter. Possible values: `match-all`, `match-any-condition`, `match-all-conditions`
func (o NotificationRuleScheduleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationRuleSchedule) string { return v.Type }).(pulumi.StringOutput)
}

type NotificationRuleScheduleArrayOutput struct{ *pulumi.OutputState }

func (NotificationRuleScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationRuleSchedule)(nil)).Elem()
}

func (o NotificationRuleScheduleArrayOutput) ToNotificationRuleScheduleArrayOutput() NotificationRuleScheduleArrayOutput {
	return o
}

func (o NotificationRuleScheduleArrayOutput) ToNotificationRuleScheduleArrayOutputWithContext(ctx context.Context) NotificationRuleScheduleArrayOutput {
	return o
}

func (o NotificationRuleScheduleArrayOutput) Index(i pulumi.IntInput) NotificationRuleScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationRuleSchedule {
		return vs[0].([]NotificationRuleSchedule)[vs[1].(int)]
	}).(NotificationRuleScheduleOutput)
}

type NotificationRuleStep struct {
	// Defines the contact that notification will be sent to. This is a block, structure is documented below.
	Contacts []NotificationRuleStepContact `pulumi:"contacts"`
	// Defined if this step is enabled. Default: `true`
	Enabled *bool `pulumi:"enabled"`
	// Time period, in minutes, notification will be sent after.
	SendAfter *int `pulumi:"sendAfter"`
}

// NotificationRuleStepInput is an input type that accepts NotificationRuleStepArgs and NotificationRuleStepOutput values.
// You can construct a concrete instance of `NotificationRuleStepInput` via:
//
//	NotificationRuleStepArgs{...}
type NotificationRuleStepInput interface {
	pulumi.Input

	ToNotificationRuleStepOutput() NotificationRuleStepOutput
	ToNotificationRuleStepOutputWithContext(context.Context) NotificationRuleStepOutput
}

type NotificationRuleStepArgs struct {
	// Defines the contact that notification will be sent to. This is a block, structure is documented below.
	Contacts NotificationRuleStepContactArrayInput `pulumi:"contacts"`
	// Defined if this step is enabled. Default: `true`
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Time period, in minutes, notification will be sent after.
	SendAfter pulumi.IntPtrInput `pulumi:"sendAfter"`
}

func (NotificationRuleStepArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationRuleStep)(nil)).Elem()
}

func (i NotificationRuleStepArgs) ToNotificationRuleStepOutput() NotificationRuleStepOutput {
	return i.ToNotificationRuleStepOutputWithContext(context.Background())
}

func (i NotificationRuleStepArgs) ToNotificationRuleStepOutputWithContext(ctx context.Context) NotificationRuleStepOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationRuleStepOutput)
}

// NotificationRuleStepArrayInput is an input type that accepts NotificationRuleStepArray and NotificationRuleStepArrayOutput values.
// You can construct a concrete instance of `NotificationRuleStepArrayInput` via:
//
//	NotificationRuleStepArray{ NotificationRuleStepArgs{...} }
type NotificationRuleStepArrayInput interface {
	pulumi.Input

	ToNotificationRuleStepArrayOutput() NotificationRuleStepArrayOutput
	ToNotificationRuleStepArrayOutputWithContext(context.Context) NotificationRuleStepArrayOutput
}

type NotificationRuleStepArray []NotificationRuleStepInput

func (NotificationRuleStepArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationRuleStep)(nil)).Elem()
}

func (i NotificationRuleStepArray) ToNotificationRuleStepArrayOutput() NotificationRuleStepArrayOutput {
	return i.ToNotificationRuleStepArrayOutputWithContext(context.Background())
}

func (i NotificationRuleStepArray) ToNotificationRuleStepArrayOutputWithContext(ctx context.Context) NotificationRuleStepArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationRuleStepArrayOutput)
}

type NotificationRuleStepOutput struct{ *pulumi.OutputState }

func (NotificationRuleStepOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationRuleStep)(nil)).Elem()
}

func (o NotificationRuleStepOutput) ToNotificationRuleStepOutput() NotificationRuleStepOutput {
	return o
}

func (o NotificationRuleStepOutput) ToNotificationRuleStepOutputWithContext(ctx context.Context) NotificationRuleStepOutput {
	return o
}

// Defines the contact that notification will be sent to. This is a block, structure is documented below.
func (o NotificationRuleStepOutput) Contacts() NotificationRuleStepContactArrayOutput {
	return o.ApplyT(func(v NotificationRuleStep) []NotificationRuleStepContact { return v.Contacts }).(NotificationRuleStepContactArrayOutput)
}

// Defined if this step is enabled. Default: `true`
func (o NotificationRuleStepOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NotificationRuleStep) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Time period, in minutes, notification will be sent after.
func (o NotificationRuleStepOutput) SendAfter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NotificationRuleStep) *int { return v.SendAfter }).(pulumi.IntPtrOutput)
}

type NotificationRuleStepArrayOutput struct{ *pulumi.OutputState }

func (NotificationRuleStepArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationRuleStep)(nil)).Elem()
}

func (o NotificationRuleStepArrayOutput) ToNotificationRuleStepArrayOutput() NotificationRuleStepArrayOutput {
	return o
}

func (o NotificationRuleStepArrayOutput) ToNotificationRuleStepArrayOutputWithContext(ctx context.Context) NotificationRuleStepArrayOutput {
	return o
}

func (o NotificationRuleStepArrayOutput) Index(i pulumi.IntInput) NotificationRuleStepOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationRuleStep {
		return vs[0].([]NotificationRuleStep)[vs[1].(int)]
	}).(NotificationRuleStepOutput)
}

type NotificationRuleStepContact struct {
	// Contact method. Possible values: `email`, `sms`, `voice`, `mobile`
	Method string `pulumi:"method"`
	// Address of a given method (eg. email address for `email`, phone number for `sms`/`voice` or mobile application name for `mobile`)
	To string `pulumi:"to"`
}

// NotificationRuleStepContactInput is an input type that accepts NotificationRuleStepContactArgs and NotificationRuleStepContactOutput values.
// You can construct a concrete instance of `NotificationRuleStepContactInput` via:
//
//	NotificationRuleStepContactArgs{...}
type NotificationRuleStepContactInput interface {
	pulumi.Input

	ToNotificationRuleStepContactOutput() NotificationRuleStepContactOutput
	ToNotificationRuleStepContactOutputWithContext(context.Context) NotificationRuleStepContactOutput
}

type NotificationRuleStepContactArgs struct {
	// Contact method. Possible values: `email`, `sms`, `voice`, `mobile`
	Method pulumi.StringInput `pulumi:"method"`
	// Address of a given method (eg. email address for `email`, phone number for `sms`/`voice` or mobile application name for `mobile`)
	To pulumi.StringInput `pulumi:"to"`
}

func (NotificationRuleStepContactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationRuleStepContact)(nil)).Elem()
}

func (i NotificationRuleStepContactArgs) ToNotificationRuleStepContactOutput() NotificationRuleStepContactOutput {
	return i.ToNotificationRuleStepContactOutputWithContext(context.Background())
}

func (i NotificationRuleStepContactArgs) ToNotificationRuleStepContactOutputWithContext(ctx context.Context) NotificationRuleStepContactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationRuleStepContactOutput)
}

// NotificationRuleStepContactArrayInput is an input type that accepts NotificationRuleStepContactArray and NotificationRuleStepContactArrayOutput values.
// You can construct a concrete instance of `NotificationRuleStepContactArrayInput` via:
//
//	NotificationRuleStepContactArray{ NotificationRuleStepContactArgs{...} }
type NotificationRuleStepContactArrayInput interface {
	pulumi.Input

	ToNotificationRuleStepContactArrayOutput() NotificationRuleStepContactArrayOutput
	ToNotificationRuleStepContactArrayOutputWithContext(context.Context) NotificationRuleStepContactArrayOutput
}

type NotificationRuleStepContactArray []NotificationRuleStepContactInput

func (NotificationRuleStepContactArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationRuleStepContact)(nil)).Elem()
}

func (i NotificationRuleStepContactArray) ToNotificationRuleStepContactArrayOutput() NotificationRuleStepContactArrayOutput {
	return i.ToNotificationRuleStepContactArrayOutputWithContext(context.Background())
}

func (i NotificationRuleStepContactArray) ToNotificationRuleStepContactArrayOutputWithContext(ctx context.Context) NotificationRuleStepContactArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationRuleStepContactArrayOutput)
}

type NotificationRuleStepContactOutput struct{ *pulumi.OutputState }

func (NotificationRuleStepContactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationRuleStepContact)(nil)).Elem()
}

func (o NotificationRuleStepContactOutput) ToNotificationRuleStepContactOutput() NotificationRuleStepContactOutput {
	return o
}

func (o NotificationRuleStepContactOutput) ToNotificationRuleStepContactOutputWithContext(ctx context.Context) NotificationRuleStepContactOutput {
	return o
}

// Contact method. Possible values: `email`, `sms`, `voice`, `mobile`
func (o NotificationRuleStepContactOutput) Method() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationRuleStepContact) string { return v.Method }).(pulumi.StringOutput)
}

// Address of a given method (eg. email address for `email`, phone number for `sms`/`voice` or mobile application name for `mobile`)
func (o NotificationRuleStepContactOutput) To() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationRuleStepContact) string { return v.To }).(pulumi.StringOutput)
}

type NotificationRuleStepContactArrayOutput struct{ *pulumi.OutputState }

func (NotificationRuleStepContactArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationRuleStepContact)(nil)).Elem()
}

func (o NotificationRuleStepContactArrayOutput) ToNotificationRuleStepContactArrayOutput() NotificationRuleStepContactArrayOutput {
	return o
}

func (o NotificationRuleStepContactArrayOutput) ToNotificationRuleStepContactArrayOutputWithContext(ctx context.Context) NotificationRuleStepContactArrayOutput {
	return o
}

func (o NotificationRuleStepContactArrayOutput) Index(i pulumi.IntInput) NotificationRuleStepContactOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationRuleStepContact {
		return vs[0].([]NotificationRuleStepContact)[vs[1].(int)]
	}).(NotificationRuleStepContactOutput)
}

type NotificationRuleTimeRestriction struct {
	Restriction  []NotificationRuleTimeRestrictionRestriction `pulumi:"restriction"`
	Restrictions []NotificationRuleTimeRestrictionRestriction `pulumi:"restrictions"`
	// Kind of matching filter. Possible values: `match-all`, `match-any-condition`, `match-all-conditions`
	Type string `pulumi:"type"`
}

// NotificationRuleTimeRestrictionInput is an input type that accepts NotificationRuleTimeRestrictionArgs and NotificationRuleTimeRestrictionOutput values.
// You can construct a concrete instance of `NotificationRuleTimeRestrictionInput` via:
//
//	NotificationRuleTimeRestrictionArgs{...}
type NotificationRuleTimeRestrictionInput interface {
	pulumi.Input

	ToNotificationRuleTimeRestrictionOutput() NotificationRuleTimeRestrictionOutput
	ToNotificationRuleTimeRestrictionOutputWithContext(context.Context) NotificationRuleTimeRestrictionOutput
}

type NotificationRuleTimeRestrictionArgs struct {
	Restriction  NotificationRuleTimeRestrictionRestrictionArrayInput `pulumi:"restriction"`
	Restrictions NotificationRuleTimeRestrictionRestrictionArrayInput `pulumi:"restrictions"`
	// Kind of matching filter. Possible values: `match-all`, `match-any-condition`, `match-all-conditions`
	Type pulumi.StringInput `pulumi:"type"`
}

func (NotificationRuleTimeRestrictionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationRuleTimeRestriction)(nil)).Elem()
}

func (i NotificationRuleTimeRestrictionArgs) ToNotificationRuleTimeRestrictionOutput() NotificationRuleTimeRestrictionOutput {
	return i.ToNotificationRuleTimeRestrictionOutputWithContext(context.Background())
}

func (i NotificationRuleTimeRestrictionArgs) ToNotificationRuleTimeRestrictionOutputWithContext(ctx context.Context) NotificationRuleTimeRestrictionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationRuleTimeRestrictionOutput)
}

// NotificationRuleTimeRestrictionArrayInput is an input type that accepts NotificationRuleTimeRestrictionArray and NotificationRuleTimeRestrictionArrayOutput values.
// You can construct a concrete instance of `NotificationRuleTimeRestrictionArrayInput` via:
//
//	NotificationRuleTimeRestrictionArray{ NotificationRuleTimeRestrictionArgs{...} }
type NotificationRuleTimeRestrictionArrayInput interface {
	pulumi.Input

	ToNotificationRuleTimeRestrictionArrayOutput() NotificationRuleTimeRestrictionArrayOutput
	ToNotificationRuleTimeRestrictionArrayOutputWithContext(context.Context) NotificationRuleTimeRestrictionArrayOutput
}

type NotificationRuleTimeRestrictionArray []NotificationRuleTimeRestrictionInput

func (NotificationRuleTimeRestrictionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationRuleTimeRestriction)(nil)).Elem()
}

func (i NotificationRuleTimeRestrictionArray) ToNotificationRuleTimeRestrictionArrayOutput() NotificationRuleTimeRestrictionArrayOutput {
	return i.ToNotificationRuleTimeRestrictionArrayOutputWithContext(context.Background())
}

func (i NotificationRuleTimeRestrictionArray) ToNotificationRuleTimeRestrictionArrayOutputWithContext(ctx context.Context) NotificationRuleTimeRestrictionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationRuleTimeRestrictionArrayOutput)
}

type NotificationRuleTimeRestrictionOutput struct{ *pulumi.OutputState }

func (NotificationRuleTimeRestrictionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationRuleTimeRestriction)(nil)).Elem()
}

func (o NotificationRuleTimeRestrictionOutput) ToNotificationRuleTimeRestrictionOutput() NotificationRuleTimeRestrictionOutput {
	return o
}

func (o NotificationRuleTimeRestrictionOutput) ToNotificationRuleTimeRestrictionOutputWithContext(ctx context.Context) NotificationRuleTimeRestrictionOutput {
	return o
}

func (o NotificationRuleTimeRestrictionOutput) Restriction() NotificationRuleTimeRestrictionRestrictionArrayOutput {
	return o.ApplyT(func(v NotificationRuleTimeRestriction) []NotificationRuleTimeRestrictionRestriction {
		return v.Restriction
	}).(NotificationRuleTimeRestrictionRestrictionArrayOutput)
}

func (o NotificationRuleTimeRestrictionOutput) Restrictions() NotificationRuleTimeRestrictionRestrictionArrayOutput {
	return o.ApplyT(func(v NotificationRuleTimeRestriction) []NotificationRuleTimeRestrictionRestriction {
		return v.Restrictions
	}).(NotificationRuleTimeRestrictionRestrictionArrayOutput)
}

// Kind of matching filter. Possible values: `match-all`, `match-any-condition`, `match-all-conditions`
func (o NotificationRuleTimeRestrictionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationRuleTimeRestriction) string { return v.Type }).(pulumi.StringOutput)
}

type NotificationRuleTimeRestrictionArrayOutput struct{ *pulumi.OutputState }

func (NotificationRuleTimeRestrictionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationRuleTimeRestriction)(nil)).Elem()
}

func (o NotificationRuleTimeRestrictionArrayOutput) ToNotificationRuleTimeRestrictionArrayOutput() NotificationRuleTimeRestrictionArrayOutput {
	return o
}

func (o NotificationRuleTimeRestrictionArrayOutput) ToNotificationRuleTimeRestrictionArrayOutputWithContext(ctx context.Context) NotificationRuleTimeRestrictionArrayOutput {
	return o
}

func (o NotificationRuleTimeRestrictionArrayOutput) Index(i pulumi.IntInput) NotificationRuleTimeRestrictionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationRuleTimeRestriction {
		return vs[0].([]NotificationRuleTimeRestriction)[vs[1].(int)]
	}).(NotificationRuleTimeRestrictionOutput)
}

type NotificationRuleTimeRestrictionRestriction struct {
	EndDay    string `pulumi:"endDay"`
	EndHour   int    `pulumi:"endHour"`
	EndMin    int    `pulumi:"endMin"`
	StartDay  string `pulumi:"startDay"`
	StartHour int    `pulumi:"startHour"`
	StartMin  int    `pulumi:"startMin"`
}

// NotificationRuleTimeRestrictionRestrictionInput is an input type that accepts NotificationRuleTimeRestrictionRestrictionArgs and NotificationRuleTimeRestrictionRestrictionOutput values.
// You can construct a concrete instance of `NotificationRuleTimeRestrictionRestrictionInput` via:
//
//	NotificationRuleTimeRestrictionRestrictionArgs{...}
type NotificationRuleTimeRestrictionRestrictionInput interface {
	pulumi.Input

	ToNotificationRuleTimeRestrictionRestrictionOutput() NotificationRuleTimeRestrictionRestrictionOutput
	ToNotificationRuleTimeRestrictionRestrictionOutputWithContext(context.Context) NotificationRuleTimeRestrictionRestrictionOutput
}

type NotificationRuleTimeRestrictionRestrictionArgs struct {
	EndDay    pulumi.StringInput `pulumi:"endDay"`
	EndHour   pulumi.IntInput    `pulumi:"endHour"`
	EndMin    pulumi.IntInput    `pulumi:"endMin"`
	StartDay  pulumi.StringInput `pulumi:"startDay"`
	StartHour pulumi.IntInput    `pulumi:"startHour"`
	StartMin  pulumi.IntInput    `pulumi:"startMin"`
}

func (NotificationRuleTimeRestrictionRestrictionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationRuleTimeRestrictionRestriction)(nil)).Elem()
}

func (i NotificationRuleTimeRestrictionRestrictionArgs) ToNotificationRuleTimeRestrictionRestrictionOutput() NotificationRuleTimeRestrictionRestrictionOutput {
	return i.ToNotificationRuleTimeRestrictionRestrictionOutputWithContext(context.Background())
}

func (i NotificationRuleTimeRestrictionRestrictionArgs) ToNotificationRuleTimeRestrictionRestrictionOutputWithContext(ctx context.Context) NotificationRuleTimeRestrictionRestrictionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationRuleTimeRestrictionRestrictionOutput)
}

// NotificationRuleTimeRestrictionRestrictionArrayInput is an input type that accepts NotificationRuleTimeRestrictionRestrictionArray and NotificationRuleTimeRestrictionRestrictionArrayOutput values.
// You can construct a concrete instance of `NotificationRuleTimeRestrictionRestrictionArrayInput` via:
//
//	NotificationRuleTimeRestrictionRestrictionArray{ NotificationRuleTimeRestrictionRestrictionArgs{...} }
type NotificationRuleTimeRestrictionRestrictionArrayInput interface {
	pulumi.Input

	ToNotificationRuleTimeRestrictionRestrictionArrayOutput() NotificationRuleTimeRestrictionRestrictionArrayOutput
	ToNotificationRuleTimeRestrictionRestrictionArrayOutputWithContext(context.Context) NotificationRuleTimeRestrictionRestrictionArrayOutput
}

type NotificationRuleTimeRestrictionRestrictionArray []NotificationRuleTimeRestrictionRestrictionInput

func (NotificationRuleTimeRestrictionRestrictionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationRuleTimeRestrictionRestriction)(nil)).Elem()
}

func (i NotificationRuleTimeRestrictionRestrictionArray) ToNotificationRuleTimeRestrictionRestrictionArrayOutput() NotificationRuleTimeRestrictionRestrictionArrayOutput {
	return i.ToNotificationRuleTimeRestrictionRestrictionArrayOutputWithContext(context.Background())
}

func (i NotificationRuleTimeRestrictionRestrictionArray) ToNotificationRuleTimeRestrictionRestrictionArrayOutputWithContext(ctx context.Context) NotificationRuleTimeRestrictionRestrictionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationRuleTimeRestrictionRestrictionArrayOutput)
}

type NotificationRuleTimeRestrictionRestrictionOutput struct{ *pulumi.OutputState }

func (NotificationRuleTimeRestrictionRestrictionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationRuleTimeRestrictionRestriction)(nil)).Elem()
}

func (o NotificationRuleTimeRestrictionRestrictionOutput) ToNotificationRuleTimeRestrictionRestrictionOutput() NotificationRuleTimeRestrictionRestrictionOutput {
	return o
}

func (o NotificationRuleTimeRestrictionRestrictionOutput) ToNotificationRuleTimeRestrictionRestrictionOutputWithContext(ctx context.Context) NotificationRuleTimeRestrictionRestrictionOutput {
	return o
}

func (o NotificationRuleTimeRestrictionRestrictionOutput) EndDay() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationRuleTimeRestrictionRestriction) string { return v.EndDay }).(pulumi.StringOutput)
}

func (o NotificationRuleTimeRestrictionRestrictionOutput) EndHour() pulumi.IntOutput {
	return o.ApplyT(func(v NotificationRuleTimeRestrictionRestriction) int { return v.EndHour }).(pulumi.IntOutput)
}

func (o NotificationRuleTimeRestrictionRestrictionOutput) EndMin() pulumi.IntOutput {
	return o.ApplyT(func(v NotificationRuleTimeRestrictionRestriction) int { return v.EndMin }).(pulumi.IntOutput)
}

func (o NotificationRuleTimeRestrictionRestrictionOutput) StartDay() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationRuleTimeRestrictionRestriction) string { return v.StartDay }).(pulumi.StringOutput)
}

func (o NotificationRuleTimeRestrictionRestrictionOutput) StartHour() pulumi.IntOutput {
	return o.ApplyT(func(v NotificationRuleTimeRestrictionRestriction) int { return v.StartHour }).(pulumi.IntOutput)
}

func (o NotificationRuleTimeRestrictionRestrictionOutput) StartMin() pulumi.IntOutput {
	return o.ApplyT(func(v NotificationRuleTimeRestrictionRestriction) int { return v.StartMin }).(pulumi.IntOutput)
}

type NotificationRuleTimeRestrictionRestrictionArrayOutput struct{ *pulumi.OutputState }

func (NotificationRuleTimeRestrictionRestrictionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationRuleTimeRestrictionRestriction)(nil)).Elem()
}

func (o NotificationRuleTimeRestrictionRestrictionArrayOutput) ToNotificationRuleTimeRestrictionRestrictionArrayOutput() NotificationRuleTimeRestrictionRestrictionArrayOutput {
	return o
}

func (o NotificationRuleTimeRestrictionRestrictionArrayOutput) ToNotificationRuleTimeRestrictionRestrictionArrayOutputWithContext(ctx context.Context) NotificationRuleTimeRestrictionRestrictionArrayOutput {
	return o
}

func (o NotificationRuleTimeRestrictionRestrictionArrayOutput) Index(i pulumi.IntInput) NotificationRuleTimeRestrictionRestrictionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationRuleTimeRestrictionRestriction {
		return vs[0].([]NotificationRuleTimeRestrictionRestriction)[vs[1].(int)]
	}).(NotificationRuleTimeRestrictionRestrictionOutput)
}

type ScheduleRotationParticipant struct {
	// The id of the responder.
	Id *string `pulumi:"id"`
	// The responder type.
	Type string `pulumi:"type"`
}

// ScheduleRotationParticipantInput is an input type that accepts ScheduleRotationParticipantArgs and ScheduleRotationParticipantOutput values.
// You can construct a concrete instance of `ScheduleRotationParticipantInput` via:
//
//	ScheduleRotationParticipantArgs{...}
type ScheduleRotationParticipantInput interface {
	pulumi.Input

	ToScheduleRotationParticipantOutput() ScheduleRotationParticipantOutput
	ToScheduleRotationParticipantOutputWithContext(context.Context) ScheduleRotationParticipantOutput
}

type ScheduleRotationParticipantArgs struct {
	// The id of the responder.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The responder type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ScheduleRotationParticipantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleRotationParticipant)(nil)).Elem()
}

func (i ScheduleRotationParticipantArgs) ToScheduleRotationParticipantOutput() ScheduleRotationParticipantOutput {
	return i.ToScheduleRotationParticipantOutputWithContext(context.Background())
}

func (i ScheduleRotationParticipantArgs) ToScheduleRotationParticipantOutputWithContext(ctx context.Context) ScheduleRotationParticipantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleRotationParticipantOutput)
}

// ScheduleRotationParticipantArrayInput is an input type that accepts ScheduleRotationParticipantArray and ScheduleRotationParticipantArrayOutput values.
// You can construct a concrete instance of `ScheduleRotationParticipantArrayInput` via:
//
//	ScheduleRotationParticipantArray{ ScheduleRotationParticipantArgs{...} }
type ScheduleRotationParticipantArrayInput interface {
	pulumi.Input

	ToScheduleRotationParticipantArrayOutput() ScheduleRotationParticipantArrayOutput
	ToScheduleRotationParticipantArrayOutputWithContext(context.Context) ScheduleRotationParticipantArrayOutput
}

type ScheduleRotationParticipantArray []ScheduleRotationParticipantInput

func (ScheduleRotationParticipantArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleRotationParticipant)(nil)).Elem()
}

func (i ScheduleRotationParticipantArray) ToScheduleRotationParticipantArrayOutput() ScheduleRotationParticipantArrayOutput {
	return i.ToScheduleRotationParticipantArrayOutputWithContext(context.Background())
}

func (i ScheduleRotationParticipantArray) ToScheduleRotationParticipantArrayOutputWithContext(ctx context.Context) ScheduleRotationParticipantArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleRotationParticipantArrayOutput)
}

type ScheduleRotationParticipantOutput struct{ *pulumi.OutputState }

func (ScheduleRotationParticipantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleRotationParticipant)(nil)).Elem()
}

func (o ScheduleRotationParticipantOutput) ToScheduleRotationParticipantOutput() ScheduleRotationParticipantOutput {
	return o
}

func (o ScheduleRotationParticipantOutput) ToScheduleRotationParticipantOutputWithContext(ctx context.Context) ScheduleRotationParticipantOutput {
	return o
}

// The id of the responder.
func (o ScheduleRotationParticipantOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScheduleRotationParticipant) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The responder type.
func (o ScheduleRotationParticipantOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleRotationParticipant) string { return v.Type }).(pulumi.StringOutput)
}

type ScheduleRotationParticipantArrayOutput struct{ *pulumi.OutputState }

func (ScheduleRotationParticipantArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleRotationParticipant)(nil)).Elem()
}

func (o ScheduleRotationParticipantArrayOutput) ToScheduleRotationParticipantArrayOutput() ScheduleRotationParticipantArrayOutput {
	return o
}

func (o ScheduleRotationParticipantArrayOutput) ToScheduleRotationParticipantArrayOutputWithContext(ctx context.Context) ScheduleRotationParticipantArrayOutput {
	return o
}

func (o ScheduleRotationParticipantArrayOutput) Index(i pulumi.IntInput) ScheduleRotationParticipantOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScheduleRotationParticipant {
		return vs[0].([]ScheduleRotationParticipant)[vs[1].(int)]
	}).(ScheduleRotationParticipantOutput)
}

type ScheduleRotationTimeRestriction struct {
	// It is a restriction object which is described below. In this case startDay/endDay fields are not supported. This can be used only if time restriction type is `time-of-day`.
	Restriction []ScheduleRotationTimeRestrictionRestriction `pulumi:"restriction"`
	// It is a restriction object which is described below. This can be used only if time restriction type is `weekday-and-time-of-day`.
	RestrictionList []ScheduleRotationTimeRestrictionRestrictionList `pulumi:"restrictionList"`
	// This parameter should be set to `time-of-day` or `weekday-and-time-of-day`.
	Type string `pulumi:"type"`
}

// ScheduleRotationTimeRestrictionInput is an input type that accepts ScheduleRotationTimeRestrictionArgs and ScheduleRotationTimeRestrictionOutput values.
// You can construct a concrete instance of `ScheduleRotationTimeRestrictionInput` via:
//
//	ScheduleRotationTimeRestrictionArgs{...}
type ScheduleRotationTimeRestrictionInput interface {
	pulumi.Input

	ToScheduleRotationTimeRestrictionOutput() ScheduleRotationTimeRestrictionOutput
	ToScheduleRotationTimeRestrictionOutputWithContext(context.Context) ScheduleRotationTimeRestrictionOutput
}

type ScheduleRotationTimeRestrictionArgs struct {
	// It is a restriction object which is described below. In this case startDay/endDay fields are not supported. This can be used only if time restriction type is `time-of-day`.
	Restriction ScheduleRotationTimeRestrictionRestrictionArrayInput `pulumi:"restriction"`
	// It is a restriction object which is described below. This can be used only if time restriction type is `weekday-and-time-of-day`.
	RestrictionList ScheduleRotationTimeRestrictionRestrictionListArrayInput `pulumi:"restrictionList"`
	// This parameter should be set to `time-of-day` or `weekday-and-time-of-day`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ScheduleRotationTimeRestrictionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleRotationTimeRestriction)(nil)).Elem()
}

func (i ScheduleRotationTimeRestrictionArgs) ToScheduleRotationTimeRestrictionOutput() ScheduleRotationTimeRestrictionOutput {
	return i.ToScheduleRotationTimeRestrictionOutputWithContext(context.Background())
}

func (i ScheduleRotationTimeRestrictionArgs) ToScheduleRotationTimeRestrictionOutputWithContext(ctx context.Context) ScheduleRotationTimeRestrictionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleRotationTimeRestrictionOutput)
}

// ScheduleRotationTimeRestrictionArrayInput is an input type that accepts ScheduleRotationTimeRestrictionArray and ScheduleRotationTimeRestrictionArrayOutput values.
// You can construct a concrete instance of `ScheduleRotationTimeRestrictionArrayInput` via:
//
//	ScheduleRotationTimeRestrictionArray{ ScheduleRotationTimeRestrictionArgs{...} }
type ScheduleRotationTimeRestrictionArrayInput interface {
	pulumi.Input

	ToScheduleRotationTimeRestrictionArrayOutput() ScheduleRotationTimeRestrictionArrayOutput
	ToScheduleRotationTimeRestrictionArrayOutputWithContext(context.Context) ScheduleRotationTimeRestrictionArrayOutput
}

type ScheduleRotationTimeRestrictionArray []ScheduleRotationTimeRestrictionInput

func (ScheduleRotationTimeRestrictionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleRotationTimeRestriction)(nil)).Elem()
}

func (i ScheduleRotationTimeRestrictionArray) ToScheduleRotationTimeRestrictionArrayOutput() ScheduleRotationTimeRestrictionArrayOutput {
	return i.ToScheduleRotationTimeRestrictionArrayOutputWithContext(context.Background())
}

func (i ScheduleRotationTimeRestrictionArray) ToScheduleRotationTimeRestrictionArrayOutputWithContext(ctx context.Context) ScheduleRotationTimeRestrictionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleRotationTimeRestrictionArrayOutput)
}

type ScheduleRotationTimeRestrictionOutput struct{ *pulumi.OutputState }

func (ScheduleRotationTimeRestrictionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleRotationTimeRestriction)(nil)).Elem()
}

func (o ScheduleRotationTimeRestrictionOutput) ToScheduleRotationTimeRestrictionOutput() ScheduleRotationTimeRestrictionOutput {
	return o
}

func (o ScheduleRotationTimeRestrictionOutput) ToScheduleRotationTimeRestrictionOutputWithContext(ctx context.Context) ScheduleRotationTimeRestrictionOutput {
	return o
}

// It is a restriction object which is described below. In this case startDay/endDay fields are not supported. This can be used only if time restriction type is `time-of-day`.
func (o ScheduleRotationTimeRestrictionOutput) Restriction() ScheduleRotationTimeRestrictionRestrictionArrayOutput {
	return o.ApplyT(func(v ScheduleRotationTimeRestriction) []ScheduleRotationTimeRestrictionRestriction {
		return v.Restriction
	}).(ScheduleRotationTimeRestrictionRestrictionArrayOutput)
}

// It is a restriction object which is described below. This can be used only if time restriction type is `weekday-and-time-of-day`.
func (o ScheduleRotationTimeRestrictionOutput) RestrictionList() ScheduleRotationTimeRestrictionRestrictionListArrayOutput {
	return o.ApplyT(func(v ScheduleRotationTimeRestriction) []ScheduleRotationTimeRestrictionRestrictionList {
		return v.RestrictionList
	}).(ScheduleRotationTimeRestrictionRestrictionListArrayOutput)
}

// This parameter should be set to `time-of-day` or `weekday-and-time-of-day`.
func (o ScheduleRotationTimeRestrictionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleRotationTimeRestriction) string { return v.Type }).(pulumi.StringOutput)
}

type ScheduleRotationTimeRestrictionArrayOutput struct{ *pulumi.OutputState }

func (ScheduleRotationTimeRestrictionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleRotationTimeRestriction)(nil)).Elem()
}

func (o ScheduleRotationTimeRestrictionArrayOutput) ToScheduleRotationTimeRestrictionArrayOutput() ScheduleRotationTimeRestrictionArrayOutput {
	return o
}

func (o ScheduleRotationTimeRestrictionArrayOutput) ToScheduleRotationTimeRestrictionArrayOutputWithContext(ctx context.Context) ScheduleRotationTimeRestrictionArrayOutput {
	return o
}

func (o ScheduleRotationTimeRestrictionArrayOutput) Index(i pulumi.IntInput) ScheduleRotationTimeRestrictionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScheduleRotationTimeRestriction {
		return vs[0].([]ScheduleRotationTimeRestriction)[vs[1].(int)]
	}).(ScheduleRotationTimeRestrictionOutput)
}

type ScheduleRotationTimeRestrictionRestriction struct {
	// Value of the hour that frame will end.
	EndHour int `pulumi:"endHour"`
	// Value of the minute that frame will end. Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically.
	EndMin int `pulumi:"endMin"`
	// Value of the hour that frame will start.
	StartHour int `pulumi:"startHour"`
	// Value of the minute that frame will start. Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically.
	StartMin int `pulumi:"startMin"`
}

// ScheduleRotationTimeRestrictionRestrictionInput is an input type that accepts ScheduleRotationTimeRestrictionRestrictionArgs and ScheduleRotationTimeRestrictionRestrictionOutput values.
// You can construct a concrete instance of `ScheduleRotationTimeRestrictionRestrictionInput` via:
//
//	ScheduleRotationTimeRestrictionRestrictionArgs{...}
type ScheduleRotationTimeRestrictionRestrictionInput interface {
	pulumi.Input

	ToScheduleRotationTimeRestrictionRestrictionOutput() ScheduleRotationTimeRestrictionRestrictionOutput
	ToScheduleRotationTimeRestrictionRestrictionOutputWithContext(context.Context) ScheduleRotationTimeRestrictionRestrictionOutput
}

type ScheduleRotationTimeRestrictionRestrictionArgs struct {
	// Value of the hour that frame will end.
	EndHour pulumi.IntInput `pulumi:"endHour"`
	// Value of the minute that frame will end. Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically.
	EndMin pulumi.IntInput `pulumi:"endMin"`
	// Value of the hour that frame will start.
	StartHour pulumi.IntInput `pulumi:"startHour"`
	// Value of the minute that frame will start. Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically.
	StartMin pulumi.IntInput `pulumi:"startMin"`
}

func (ScheduleRotationTimeRestrictionRestrictionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleRotationTimeRestrictionRestriction)(nil)).Elem()
}

func (i ScheduleRotationTimeRestrictionRestrictionArgs) ToScheduleRotationTimeRestrictionRestrictionOutput() ScheduleRotationTimeRestrictionRestrictionOutput {
	return i.ToScheduleRotationTimeRestrictionRestrictionOutputWithContext(context.Background())
}

func (i ScheduleRotationTimeRestrictionRestrictionArgs) ToScheduleRotationTimeRestrictionRestrictionOutputWithContext(ctx context.Context) ScheduleRotationTimeRestrictionRestrictionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleRotationTimeRestrictionRestrictionOutput)
}

// ScheduleRotationTimeRestrictionRestrictionArrayInput is an input type that accepts ScheduleRotationTimeRestrictionRestrictionArray and ScheduleRotationTimeRestrictionRestrictionArrayOutput values.
// You can construct a concrete instance of `ScheduleRotationTimeRestrictionRestrictionArrayInput` via:
//
//	ScheduleRotationTimeRestrictionRestrictionArray{ ScheduleRotationTimeRestrictionRestrictionArgs{...} }
type ScheduleRotationTimeRestrictionRestrictionArrayInput interface {
	pulumi.Input

	ToScheduleRotationTimeRestrictionRestrictionArrayOutput() ScheduleRotationTimeRestrictionRestrictionArrayOutput
	ToScheduleRotationTimeRestrictionRestrictionArrayOutputWithContext(context.Context) ScheduleRotationTimeRestrictionRestrictionArrayOutput
}

type ScheduleRotationTimeRestrictionRestrictionArray []ScheduleRotationTimeRestrictionRestrictionInput

func (ScheduleRotationTimeRestrictionRestrictionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleRotationTimeRestrictionRestriction)(nil)).Elem()
}

func (i ScheduleRotationTimeRestrictionRestrictionArray) ToScheduleRotationTimeRestrictionRestrictionArrayOutput() ScheduleRotationTimeRestrictionRestrictionArrayOutput {
	return i.ToScheduleRotationTimeRestrictionRestrictionArrayOutputWithContext(context.Background())
}

func (i ScheduleRotationTimeRestrictionRestrictionArray) ToScheduleRotationTimeRestrictionRestrictionArrayOutputWithContext(ctx context.Context) ScheduleRotationTimeRestrictionRestrictionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleRotationTimeRestrictionRestrictionArrayOutput)
}

type ScheduleRotationTimeRestrictionRestrictionOutput struct{ *pulumi.OutputState }

func (ScheduleRotationTimeRestrictionRestrictionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleRotationTimeRestrictionRestriction)(nil)).Elem()
}

func (o ScheduleRotationTimeRestrictionRestrictionOutput) ToScheduleRotationTimeRestrictionRestrictionOutput() ScheduleRotationTimeRestrictionRestrictionOutput {
	return o
}

func (o ScheduleRotationTimeRestrictionRestrictionOutput) ToScheduleRotationTimeRestrictionRestrictionOutputWithContext(ctx context.Context) ScheduleRotationTimeRestrictionRestrictionOutput {
	return o
}

// Value of the hour that frame will end.
func (o ScheduleRotationTimeRestrictionRestrictionOutput) EndHour() pulumi.IntOutput {
	return o.ApplyT(func(v ScheduleRotationTimeRestrictionRestriction) int { return v.EndHour }).(pulumi.IntOutput)
}

// Value of the minute that frame will end. Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically.
func (o ScheduleRotationTimeRestrictionRestrictionOutput) EndMin() pulumi.IntOutput {
	return o.ApplyT(func(v ScheduleRotationTimeRestrictionRestriction) int { return v.EndMin }).(pulumi.IntOutput)
}

// Value of the hour that frame will start.
func (o ScheduleRotationTimeRestrictionRestrictionOutput) StartHour() pulumi.IntOutput {
	return o.ApplyT(func(v ScheduleRotationTimeRestrictionRestriction) int { return v.StartHour }).(pulumi.IntOutput)
}

// Value of the minute that frame will start. Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically.
func (o ScheduleRotationTimeRestrictionRestrictionOutput) StartMin() pulumi.IntOutput {
	return o.ApplyT(func(v ScheduleRotationTimeRestrictionRestriction) int { return v.StartMin }).(pulumi.IntOutput)
}

type ScheduleRotationTimeRestrictionRestrictionArrayOutput struct{ *pulumi.OutputState }

func (ScheduleRotationTimeRestrictionRestrictionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleRotationTimeRestrictionRestriction)(nil)).Elem()
}

func (o ScheduleRotationTimeRestrictionRestrictionArrayOutput) ToScheduleRotationTimeRestrictionRestrictionArrayOutput() ScheduleRotationTimeRestrictionRestrictionArrayOutput {
	return o
}

func (o ScheduleRotationTimeRestrictionRestrictionArrayOutput) ToScheduleRotationTimeRestrictionRestrictionArrayOutputWithContext(ctx context.Context) ScheduleRotationTimeRestrictionRestrictionArrayOutput {
	return o
}

func (o ScheduleRotationTimeRestrictionRestrictionArrayOutput) Index(i pulumi.IntInput) ScheduleRotationTimeRestrictionRestrictionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScheduleRotationTimeRestrictionRestriction {
		return vs[0].([]ScheduleRotationTimeRestrictionRestriction)[vs[1].(int)]
	}).(ScheduleRotationTimeRestrictionRestrictionOutput)
}

type ScheduleRotationTimeRestrictionRestrictionList struct {
	// Value of the day that frame will end.
	EndDay string `pulumi:"endDay"`
	// Value of the hour that frame will end.
	EndHour int `pulumi:"endHour"`
	// Value of the minute that frame will end. Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically.
	//
	// Both `startDay` and `endDay` can assume only `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`, or `sunday` values.
	EndMin int `pulumi:"endMin"`
	// Value of the day that frame will start.
	StartDay string `pulumi:"startDay"`
	// Value of the hour that frame will start
	StartHour int `pulumi:"startHour"`
	// Value of the minute that frame will start. Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically.
	StartMin int `pulumi:"startMin"`
}

// ScheduleRotationTimeRestrictionRestrictionListInput is an input type that accepts ScheduleRotationTimeRestrictionRestrictionListArgs and ScheduleRotationTimeRestrictionRestrictionListOutput values.
// You can construct a concrete instance of `ScheduleRotationTimeRestrictionRestrictionListInput` via:
//
//	ScheduleRotationTimeRestrictionRestrictionListArgs{...}
type ScheduleRotationTimeRestrictionRestrictionListInput interface {
	pulumi.Input

	ToScheduleRotationTimeRestrictionRestrictionListOutput() ScheduleRotationTimeRestrictionRestrictionListOutput
	ToScheduleRotationTimeRestrictionRestrictionListOutputWithContext(context.Context) ScheduleRotationTimeRestrictionRestrictionListOutput
}

type ScheduleRotationTimeRestrictionRestrictionListArgs struct {
	// Value of the day that frame will end.
	EndDay pulumi.StringInput `pulumi:"endDay"`
	// Value of the hour that frame will end.
	EndHour pulumi.IntInput `pulumi:"endHour"`
	// Value of the minute that frame will end. Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically.
	//
	// Both `startDay` and `endDay` can assume only `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`, or `sunday` values.
	EndMin pulumi.IntInput `pulumi:"endMin"`
	// Value of the day that frame will start.
	StartDay pulumi.StringInput `pulumi:"startDay"`
	// Value of the hour that frame will start
	StartHour pulumi.IntInput `pulumi:"startHour"`
	// Value of the minute that frame will start. Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically.
	StartMin pulumi.IntInput `pulumi:"startMin"`
}

func (ScheduleRotationTimeRestrictionRestrictionListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleRotationTimeRestrictionRestrictionList)(nil)).Elem()
}

func (i ScheduleRotationTimeRestrictionRestrictionListArgs) ToScheduleRotationTimeRestrictionRestrictionListOutput() ScheduleRotationTimeRestrictionRestrictionListOutput {
	return i.ToScheduleRotationTimeRestrictionRestrictionListOutputWithContext(context.Background())
}

func (i ScheduleRotationTimeRestrictionRestrictionListArgs) ToScheduleRotationTimeRestrictionRestrictionListOutputWithContext(ctx context.Context) ScheduleRotationTimeRestrictionRestrictionListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleRotationTimeRestrictionRestrictionListOutput)
}

// ScheduleRotationTimeRestrictionRestrictionListArrayInput is an input type that accepts ScheduleRotationTimeRestrictionRestrictionListArray and ScheduleRotationTimeRestrictionRestrictionListArrayOutput values.
// You can construct a concrete instance of `ScheduleRotationTimeRestrictionRestrictionListArrayInput` via:
//
//	ScheduleRotationTimeRestrictionRestrictionListArray{ ScheduleRotationTimeRestrictionRestrictionListArgs{...} }
type ScheduleRotationTimeRestrictionRestrictionListArrayInput interface {
	pulumi.Input

	ToScheduleRotationTimeRestrictionRestrictionListArrayOutput() ScheduleRotationTimeRestrictionRestrictionListArrayOutput
	ToScheduleRotationTimeRestrictionRestrictionListArrayOutputWithContext(context.Context) ScheduleRotationTimeRestrictionRestrictionListArrayOutput
}

type ScheduleRotationTimeRestrictionRestrictionListArray []ScheduleRotationTimeRestrictionRestrictionListInput

func (ScheduleRotationTimeRestrictionRestrictionListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleRotationTimeRestrictionRestrictionList)(nil)).Elem()
}

func (i ScheduleRotationTimeRestrictionRestrictionListArray) ToScheduleRotationTimeRestrictionRestrictionListArrayOutput() ScheduleRotationTimeRestrictionRestrictionListArrayOutput {
	return i.ToScheduleRotationTimeRestrictionRestrictionListArrayOutputWithContext(context.Background())
}

func (i ScheduleRotationTimeRestrictionRestrictionListArray) ToScheduleRotationTimeRestrictionRestrictionListArrayOutputWithContext(ctx context.Context) ScheduleRotationTimeRestrictionRestrictionListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleRotationTimeRestrictionRestrictionListArrayOutput)
}

type ScheduleRotationTimeRestrictionRestrictionListOutput struct{ *pulumi.OutputState }

func (ScheduleRotationTimeRestrictionRestrictionListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleRotationTimeRestrictionRestrictionList)(nil)).Elem()
}

func (o ScheduleRotationTimeRestrictionRestrictionListOutput) ToScheduleRotationTimeRestrictionRestrictionListOutput() ScheduleRotationTimeRestrictionRestrictionListOutput {
	return o
}

func (o ScheduleRotationTimeRestrictionRestrictionListOutput) ToScheduleRotationTimeRestrictionRestrictionListOutputWithContext(ctx context.Context) ScheduleRotationTimeRestrictionRestrictionListOutput {
	return o
}

// Value of the day that frame will end.
func (o ScheduleRotationTimeRestrictionRestrictionListOutput) EndDay() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleRotationTimeRestrictionRestrictionList) string { return v.EndDay }).(pulumi.StringOutput)
}

// Value of the hour that frame will end.
func (o ScheduleRotationTimeRestrictionRestrictionListOutput) EndHour() pulumi.IntOutput {
	return o.ApplyT(func(v ScheduleRotationTimeRestrictionRestrictionList) int { return v.EndHour }).(pulumi.IntOutput)
}

// Value of the minute that frame will end. Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically.
//
// Both `startDay` and `endDay` can assume only `monday`, `tuesday`, `wednesday`, `thursday`, `friday`, `saturday`, or `sunday` values.
func (o ScheduleRotationTimeRestrictionRestrictionListOutput) EndMin() pulumi.IntOutput {
	return o.ApplyT(func(v ScheduleRotationTimeRestrictionRestrictionList) int { return v.EndMin }).(pulumi.IntOutput)
}

// Value of the day that frame will start.
func (o ScheduleRotationTimeRestrictionRestrictionListOutput) StartDay() pulumi.StringOutput {
	return o.ApplyT(func(v ScheduleRotationTimeRestrictionRestrictionList) string { return v.StartDay }).(pulumi.StringOutput)
}

// Value of the hour that frame will start
func (o ScheduleRotationTimeRestrictionRestrictionListOutput) StartHour() pulumi.IntOutput {
	return o.ApplyT(func(v ScheduleRotationTimeRestrictionRestrictionList) int { return v.StartHour }).(pulumi.IntOutput)
}

// Value of the minute that frame will start. Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically.
func (o ScheduleRotationTimeRestrictionRestrictionListOutput) StartMin() pulumi.IntOutput {
	return o.ApplyT(func(v ScheduleRotationTimeRestrictionRestrictionList) int { return v.StartMin }).(pulumi.IntOutput)
}

type ScheduleRotationTimeRestrictionRestrictionListArrayOutput struct{ *pulumi.OutputState }

func (ScheduleRotationTimeRestrictionRestrictionListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScheduleRotationTimeRestrictionRestrictionList)(nil)).Elem()
}

func (o ScheduleRotationTimeRestrictionRestrictionListArrayOutput) ToScheduleRotationTimeRestrictionRestrictionListArrayOutput() ScheduleRotationTimeRestrictionRestrictionListArrayOutput {
	return o
}

func (o ScheduleRotationTimeRestrictionRestrictionListArrayOutput) ToScheduleRotationTimeRestrictionRestrictionListArrayOutputWithContext(ctx context.Context) ScheduleRotationTimeRestrictionRestrictionListArrayOutput {
	return o
}

func (o ScheduleRotationTimeRestrictionRestrictionListArrayOutput) Index(i pulumi.IntInput) ScheduleRotationTimeRestrictionRestrictionListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScheduleRotationTimeRestrictionRestrictionList {
		return vs[0].([]ScheduleRotationTimeRestrictionRestrictionList)[vs[1].(int)]
	}).(ScheduleRotationTimeRestrictionRestrictionListOutput)
}

type ServiceIncidentRuleIncidentRule struct {
	// A Condition type, supported types are: `match-all`, `match-any-condition`, `match-all-conditions`. Default: `match-all`
	ConditionMatchType *string `pulumi:"conditionMatchType"`
	// Conditions applied to incident. This is a block, structure is documented below.
	Conditions []ServiceIncidentRuleIncidentRuleCondition `pulumi:"conditions"`
	// Properties for incident rule. This is a block, structure is documented below.
	IncidentProperties []ServiceIncidentRuleIncidentRuleIncidentProperty `pulumi:"incidentProperties"`
}

// ServiceIncidentRuleIncidentRuleInput is an input type that accepts ServiceIncidentRuleIncidentRuleArgs and ServiceIncidentRuleIncidentRuleOutput values.
// You can construct a concrete instance of `ServiceIncidentRuleIncidentRuleInput` via:
//
//	ServiceIncidentRuleIncidentRuleArgs{...}
type ServiceIncidentRuleIncidentRuleInput interface {
	pulumi.Input

	ToServiceIncidentRuleIncidentRuleOutput() ServiceIncidentRuleIncidentRuleOutput
	ToServiceIncidentRuleIncidentRuleOutputWithContext(context.Context) ServiceIncidentRuleIncidentRuleOutput
}

type ServiceIncidentRuleIncidentRuleArgs struct {
	// A Condition type, supported types are: `match-all`, `match-any-condition`, `match-all-conditions`. Default: `match-all`
	ConditionMatchType pulumi.StringPtrInput `pulumi:"conditionMatchType"`
	// Conditions applied to incident. This is a block, structure is documented below.
	Conditions ServiceIncidentRuleIncidentRuleConditionArrayInput `pulumi:"conditions"`
	// Properties for incident rule. This is a block, structure is documented below.
	IncidentProperties ServiceIncidentRuleIncidentRuleIncidentPropertyArrayInput `pulumi:"incidentProperties"`
}

func (ServiceIncidentRuleIncidentRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceIncidentRuleIncidentRule)(nil)).Elem()
}

func (i ServiceIncidentRuleIncidentRuleArgs) ToServiceIncidentRuleIncidentRuleOutput() ServiceIncidentRuleIncidentRuleOutput {
	return i.ToServiceIncidentRuleIncidentRuleOutputWithContext(context.Background())
}

func (i ServiceIncidentRuleIncidentRuleArgs) ToServiceIncidentRuleIncidentRuleOutputWithContext(ctx context.Context) ServiceIncidentRuleIncidentRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceIncidentRuleIncidentRuleOutput)
}

// ServiceIncidentRuleIncidentRuleArrayInput is an input type that accepts ServiceIncidentRuleIncidentRuleArray and ServiceIncidentRuleIncidentRuleArrayOutput values.
// You can construct a concrete instance of `ServiceIncidentRuleIncidentRuleArrayInput` via:
//
//	ServiceIncidentRuleIncidentRuleArray{ ServiceIncidentRuleIncidentRuleArgs{...} }
type ServiceIncidentRuleIncidentRuleArrayInput interface {
	pulumi.Input

	ToServiceIncidentRuleIncidentRuleArrayOutput() ServiceIncidentRuleIncidentRuleArrayOutput
	ToServiceIncidentRuleIncidentRuleArrayOutputWithContext(context.Context) ServiceIncidentRuleIncidentRuleArrayOutput
}

type ServiceIncidentRuleIncidentRuleArray []ServiceIncidentRuleIncidentRuleInput

func (ServiceIncidentRuleIncidentRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceIncidentRuleIncidentRule)(nil)).Elem()
}

func (i ServiceIncidentRuleIncidentRuleArray) ToServiceIncidentRuleIncidentRuleArrayOutput() ServiceIncidentRuleIncidentRuleArrayOutput {
	return i.ToServiceIncidentRuleIncidentRuleArrayOutputWithContext(context.Background())
}

func (i ServiceIncidentRuleIncidentRuleArray) ToServiceIncidentRuleIncidentRuleArrayOutputWithContext(ctx context.Context) ServiceIncidentRuleIncidentRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceIncidentRuleIncidentRuleArrayOutput)
}

type ServiceIncidentRuleIncidentRuleOutput struct{ *pulumi.OutputState }

func (ServiceIncidentRuleIncidentRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceIncidentRuleIncidentRule)(nil)).Elem()
}

func (o ServiceIncidentRuleIncidentRuleOutput) ToServiceIncidentRuleIncidentRuleOutput() ServiceIncidentRuleIncidentRuleOutput {
	return o
}

func (o ServiceIncidentRuleIncidentRuleOutput) ToServiceIncidentRuleIncidentRuleOutputWithContext(ctx context.Context) ServiceIncidentRuleIncidentRuleOutput {
	return o
}

// A Condition type, supported types are: `match-all`, `match-any-condition`, `match-all-conditions`. Default: `match-all`
func (o ServiceIncidentRuleIncidentRuleOutput) ConditionMatchType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceIncidentRuleIncidentRule) *string { return v.ConditionMatchType }).(pulumi.StringPtrOutput)
}

// Conditions applied to incident. This is a block, structure is documented below.
func (o ServiceIncidentRuleIncidentRuleOutput) Conditions() ServiceIncidentRuleIncidentRuleConditionArrayOutput {
	return o.ApplyT(func(v ServiceIncidentRuleIncidentRule) []ServiceIncidentRuleIncidentRuleCondition {
		return v.Conditions
	}).(ServiceIncidentRuleIncidentRuleConditionArrayOutput)
}

// Properties for incident rule. This is a block, structure is documented below.
func (o ServiceIncidentRuleIncidentRuleOutput) IncidentProperties() ServiceIncidentRuleIncidentRuleIncidentPropertyArrayOutput {
	return o.ApplyT(func(v ServiceIncidentRuleIncidentRule) []ServiceIncidentRuleIncidentRuleIncidentProperty {
		return v.IncidentProperties
	}).(ServiceIncidentRuleIncidentRuleIncidentPropertyArrayOutput)
}

type ServiceIncidentRuleIncidentRuleArrayOutput struct{ *pulumi.OutputState }

func (ServiceIncidentRuleIncidentRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceIncidentRuleIncidentRule)(nil)).Elem()
}

func (o ServiceIncidentRuleIncidentRuleArrayOutput) ToServiceIncidentRuleIncidentRuleArrayOutput() ServiceIncidentRuleIncidentRuleArrayOutput {
	return o
}

func (o ServiceIncidentRuleIncidentRuleArrayOutput) ToServiceIncidentRuleIncidentRuleArrayOutputWithContext(ctx context.Context) ServiceIncidentRuleIncidentRuleArrayOutput {
	return o
}

func (o ServiceIncidentRuleIncidentRuleArrayOutput) Index(i pulumi.IntInput) ServiceIncidentRuleIncidentRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceIncidentRuleIncidentRule {
		return vs[0].([]ServiceIncidentRuleIncidentRule)[vs[1].(int)]
	}).(ServiceIncidentRuleIncidentRuleOutput)
}

type ServiceIncidentRuleIncidentRuleCondition struct {
	// User defined value that will be compared with alert field according to the operation. Default: empty string
	ExpectedValue *string `pulumi:"expectedValue"`
	// Specifies which alert field will be used in condition. Possible values are `message`, `alias`, `description`, `source`, `entity`, `tags`, `actions`, `details`, `extra-properties`, `recipients`, `teams`, `priority`
	Field string  `pulumi:"field"`
	Key   *string `pulumi:"key"`
	// Indicates behaviour of the given operation. Default: false
	Not *bool `pulumi:"not"`
	// It is the operation that will be executed for the given field and key. Possible operations are `matches`, `contains`, `starts-with`, `ends-with`, `equals`, `contains-key`, `contains-value`, `greater-than`, `less-than`, `is-empty`, `equals-ignore-whitespace`.
	Operation string `pulumi:"operation"`
}

// ServiceIncidentRuleIncidentRuleConditionInput is an input type that accepts ServiceIncidentRuleIncidentRuleConditionArgs and ServiceIncidentRuleIncidentRuleConditionOutput values.
// You can construct a concrete instance of `ServiceIncidentRuleIncidentRuleConditionInput` via:
//
//	ServiceIncidentRuleIncidentRuleConditionArgs{...}
type ServiceIncidentRuleIncidentRuleConditionInput interface {
	pulumi.Input

	ToServiceIncidentRuleIncidentRuleConditionOutput() ServiceIncidentRuleIncidentRuleConditionOutput
	ToServiceIncidentRuleIncidentRuleConditionOutputWithContext(context.Context) ServiceIncidentRuleIncidentRuleConditionOutput
}

type ServiceIncidentRuleIncidentRuleConditionArgs struct {
	// User defined value that will be compared with alert field according to the operation. Default: empty string
	ExpectedValue pulumi.StringPtrInput `pulumi:"expectedValue"`
	// Specifies which alert field will be used in condition. Possible values are `message`, `alias`, `description`, `source`, `entity`, `tags`, `actions`, `details`, `extra-properties`, `recipients`, `teams`, `priority`
	Field pulumi.StringInput    `pulumi:"field"`
	Key   pulumi.StringPtrInput `pulumi:"key"`
	// Indicates behaviour of the given operation. Default: false
	Not pulumi.BoolPtrInput `pulumi:"not"`
	// It is the operation that will be executed for the given field and key. Possible operations are `matches`, `contains`, `starts-with`, `ends-with`, `equals`, `contains-key`, `contains-value`, `greater-than`, `less-than`, `is-empty`, `equals-ignore-whitespace`.
	Operation pulumi.StringInput `pulumi:"operation"`
}

func (ServiceIncidentRuleIncidentRuleConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceIncidentRuleIncidentRuleCondition)(nil)).Elem()
}

func (i ServiceIncidentRuleIncidentRuleConditionArgs) ToServiceIncidentRuleIncidentRuleConditionOutput() ServiceIncidentRuleIncidentRuleConditionOutput {
	return i.ToServiceIncidentRuleIncidentRuleConditionOutputWithContext(context.Background())
}

func (i ServiceIncidentRuleIncidentRuleConditionArgs) ToServiceIncidentRuleIncidentRuleConditionOutputWithContext(ctx context.Context) ServiceIncidentRuleIncidentRuleConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceIncidentRuleIncidentRuleConditionOutput)
}

// ServiceIncidentRuleIncidentRuleConditionArrayInput is an input type that accepts ServiceIncidentRuleIncidentRuleConditionArray and ServiceIncidentRuleIncidentRuleConditionArrayOutput values.
// You can construct a concrete instance of `ServiceIncidentRuleIncidentRuleConditionArrayInput` via:
//
//	ServiceIncidentRuleIncidentRuleConditionArray{ ServiceIncidentRuleIncidentRuleConditionArgs{...} }
type ServiceIncidentRuleIncidentRuleConditionArrayInput interface {
	pulumi.Input

	ToServiceIncidentRuleIncidentRuleConditionArrayOutput() ServiceIncidentRuleIncidentRuleConditionArrayOutput
	ToServiceIncidentRuleIncidentRuleConditionArrayOutputWithContext(context.Context) ServiceIncidentRuleIncidentRuleConditionArrayOutput
}

type ServiceIncidentRuleIncidentRuleConditionArray []ServiceIncidentRuleIncidentRuleConditionInput

func (ServiceIncidentRuleIncidentRuleConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceIncidentRuleIncidentRuleCondition)(nil)).Elem()
}

func (i ServiceIncidentRuleIncidentRuleConditionArray) ToServiceIncidentRuleIncidentRuleConditionArrayOutput() ServiceIncidentRuleIncidentRuleConditionArrayOutput {
	return i.ToServiceIncidentRuleIncidentRuleConditionArrayOutputWithContext(context.Background())
}

func (i ServiceIncidentRuleIncidentRuleConditionArray) ToServiceIncidentRuleIncidentRuleConditionArrayOutputWithContext(ctx context.Context) ServiceIncidentRuleIncidentRuleConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceIncidentRuleIncidentRuleConditionArrayOutput)
}

type ServiceIncidentRuleIncidentRuleConditionOutput struct{ *pulumi.OutputState }

func (ServiceIncidentRuleIncidentRuleConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceIncidentRuleIncidentRuleCondition)(nil)).Elem()
}

func (o ServiceIncidentRuleIncidentRuleConditionOutput) ToServiceIncidentRuleIncidentRuleConditionOutput() ServiceIncidentRuleIncidentRuleConditionOutput {
	return o
}

func (o ServiceIncidentRuleIncidentRuleConditionOutput) ToServiceIncidentRuleIncidentRuleConditionOutputWithContext(ctx context.Context) ServiceIncidentRuleIncidentRuleConditionOutput {
	return o
}

// User defined value that will be compared with alert field according to the operation. Default: empty string
func (o ServiceIncidentRuleIncidentRuleConditionOutput) ExpectedValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceIncidentRuleIncidentRuleCondition) *string { return v.ExpectedValue }).(pulumi.StringPtrOutput)
}

// Specifies which alert field will be used in condition. Possible values are `message`, `alias`, `description`, `source`, `entity`, `tags`, `actions`, `details`, `extra-properties`, `recipients`, `teams`, `priority`
func (o ServiceIncidentRuleIncidentRuleConditionOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceIncidentRuleIncidentRuleCondition) string { return v.Field }).(pulumi.StringOutput)
}

func (o ServiceIncidentRuleIncidentRuleConditionOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceIncidentRuleIncidentRuleCondition) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Indicates behaviour of the given operation. Default: false
func (o ServiceIncidentRuleIncidentRuleConditionOutput) Not() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceIncidentRuleIncidentRuleCondition) *bool { return v.Not }).(pulumi.BoolPtrOutput)
}

// It is the operation that will be executed for the given field and key. Possible operations are `matches`, `contains`, `starts-with`, `ends-with`, `equals`, `contains-key`, `contains-value`, `greater-than`, `less-than`, `is-empty`, `equals-ignore-whitespace`.
func (o ServiceIncidentRuleIncidentRuleConditionOutput) Operation() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceIncidentRuleIncidentRuleCondition) string { return v.Operation }).(pulumi.StringOutput)
}

type ServiceIncidentRuleIncidentRuleConditionArrayOutput struct{ *pulumi.OutputState }

func (ServiceIncidentRuleIncidentRuleConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceIncidentRuleIncidentRuleCondition)(nil)).Elem()
}

func (o ServiceIncidentRuleIncidentRuleConditionArrayOutput) ToServiceIncidentRuleIncidentRuleConditionArrayOutput() ServiceIncidentRuleIncidentRuleConditionArrayOutput {
	return o
}

func (o ServiceIncidentRuleIncidentRuleConditionArrayOutput) ToServiceIncidentRuleIncidentRuleConditionArrayOutputWithContext(ctx context.Context) ServiceIncidentRuleIncidentRuleConditionArrayOutput {
	return o
}

func (o ServiceIncidentRuleIncidentRuleConditionArrayOutput) Index(i pulumi.IntInput) ServiceIncidentRuleIncidentRuleConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceIncidentRuleIncidentRuleCondition {
		return vs[0].([]ServiceIncidentRuleIncidentRuleCondition)[vs[1].(int)]
	}).(ServiceIncidentRuleIncidentRuleConditionOutput)
}

type ServiceIncidentRuleIncidentRuleIncidentProperty struct {
	// Description field of the incident rule.
	Description *string `pulumi:"description"`
	// Map of key-value pairs to use as custom properties of the alert.
	Details map[string]string `pulumi:"details"`
	// Message of the related incident rule.
	Message string `pulumi:"message"`
	// Priority level of the alert. Possible values are `P1`, `P2`, `P3`, `P4` and `P5`
	Priority string `pulumi:"priority"`
	// DEtails about stakeholders for this rule. This is a block, structure is documented below.
	StakeholderProperties []ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderProperty `pulumi:"stakeholderProperties"`
	// Tags of the alert.
	Tags []string `pulumi:"tags"`
}

// ServiceIncidentRuleIncidentRuleIncidentPropertyInput is an input type that accepts ServiceIncidentRuleIncidentRuleIncidentPropertyArgs and ServiceIncidentRuleIncidentRuleIncidentPropertyOutput values.
// You can construct a concrete instance of `ServiceIncidentRuleIncidentRuleIncidentPropertyInput` via:
//
//	ServiceIncidentRuleIncidentRuleIncidentPropertyArgs{...}
type ServiceIncidentRuleIncidentRuleIncidentPropertyInput interface {
	pulumi.Input

	ToServiceIncidentRuleIncidentRuleIncidentPropertyOutput() ServiceIncidentRuleIncidentRuleIncidentPropertyOutput
	ToServiceIncidentRuleIncidentRuleIncidentPropertyOutputWithContext(context.Context) ServiceIncidentRuleIncidentRuleIncidentPropertyOutput
}

type ServiceIncidentRuleIncidentRuleIncidentPropertyArgs struct {
	// Description field of the incident rule.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Map of key-value pairs to use as custom properties of the alert.
	Details pulumi.StringMapInput `pulumi:"details"`
	// Message of the related incident rule.
	Message pulumi.StringInput `pulumi:"message"`
	// Priority level of the alert. Possible values are `P1`, `P2`, `P3`, `P4` and `P5`
	Priority pulumi.StringInput `pulumi:"priority"`
	// DEtails about stakeholders for this rule. This is a block, structure is documented below.
	StakeholderProperties ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyArrayInput `pulumi:"stakeholderProperties"`
	// Tags of the alert.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
}

func (ServiceIncidentRuleIncidentRuleIncidentPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceIncidentRuleIncidentRuleIncidentProperty)(nil)).Elem()
}

func (i ServiceIncidentRuleIncidentRuleIncidentPropertyArgs) ToServiceIncidentRuleIncidentRuleIncidentPropertyOutput() ServiceIncidentRuleIncidentRuleIncidentPropertyOutput {
	return i.ToServiceIncidentRuleIncidentRuleIncidentPropertyOutputWithContext(context.Background())
}

func (i ServiceIncidentRuleIncidentRuleIncidentPropertyArgs) ToServiceIncidentRuleIncidentRuleIncidentPropertyOutputWithContext(ctx context.Context) ServiceIncidentRuleIncidentRuleIncidentPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceIncidentRuleIncidentRuleIncidentPropertyOutput)
}

// ServiceIncidentRuleIncidentRuleIncidentPropertyArrayInput is an input type that accepts ServiceIncidentRuleIncidentRuleIncidentPropertyArray and ServiceIncidentRuleIncidentRuleIncidentPropertyArrayOutput values.
// You can construct a concrete instance of `ServiceIncidentRuleIncidentRuleIncidentPropertyArrayInput` via:
//
//	ServiceIncidentRuleIncidentRuleIncidentPropertyArray{ ServiceIncidentRuleIncidentRuleIncidentPropertyArgs{...} }
type ServiceIncidentRuleIncidentRuleIncidentPropertyArrayInput interface {
	pulumi.Input

	ToServiceIncidentRuleIncidentRuleIncidentPropertyArrayOutput() ServiceIncidentRuleIncidentRuleIncidentPropertyArrayOutput
	ToServiceIncidentRuleIncidentRuleIncidentPropertyArrayOutputWithContext(context.Context) ServiceIncidentRuleIncidentRuleIncidentPropertyArrayOutput
}

type ServiceIncidentRuleIncidentRuleIncidentPropertyArray []ServiceIncidentRuleIncidentRuleIncidentPropertyInput

func (ServiceIncidentRuleIncidentRuleIncidentPropertyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceIncidentRuleIncidentRuleIncidentProperty)(nil)).Elem()
}

func (i ServiceIncidentRuleIncidentRuleIncidentPropertyArray) ToServiceIncidentRuleIncidentRuleIncidentPropertyArrayOutput() ServiceIncidentRuleIncidentRuleIncidentPropertyArrayOutput {
	return i.ToServiceIncidentRuleIncidentRuleIncidentPropertyArrayOutputWithContext(context.Background())
}

func (i ServiceIncidentRuleIncidentRuleIncidentPropertyArray) ToServiceIncidentRuleIncidentRuleIncidentPropertyArrayOutputWithContext(ctx context.Context) ServiceIncidentRuleIncidentRuleIncidentPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceIncidentRuleIncidentRuleIncidentPropertyArrayOutput)
}

type ServiceIncidentRuleIncidentRuleIncidentPropertyOutput struct{ *pulumi.OutputState }

func (ServiceIncidentRuleIncidentRuleIncidentPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceIncidentRuleIncidentRuleIncidentProperty)(nil)).Elem()
}

func (o ServiceIncidentRuleIncidentRuleIncidentPropertyOutput) ToServiceIncidentRuleIncidentRuleIncidentPropertyOutput() ServiceIncidentRuleIncidentRuleIncidentPropertyOutput {
	return o
}

func (o ServiceIncidentRuleIncidentRuleIncidentPropertyOutput) ToServiceIncidentRuleIncidentRuleIncidentPropertyOutputWithContext(ctx context.Context) ServiceIncidentRuleIncidentRuleIncidentPropertyOutput {
	return o
}

// Description field of the incident rule.
func (o ServiceIncidentRuleIncidentRuleIncidentPropertyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceIncidentRuleIncidentRuleIncidentProperty) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Map of key-value pairs to use as custom properties of the alert.
func (o ServiceIncidentRuleIncidentRuleIncidentPropertyOutput) Details() pulumi.StringMapOutput {
	return o.ApplyT(func(v ServiceIncidentRuleIncidentRuleIncidentProperty) map[string]string { return v.Details }).(pulumi.StringMapOutput)
}

// Message of the related incident rule.
func (o ServiceIncidentRuleIncidentRuleIncidentPropertyOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceIncidentRuleIncidentRuleIncidentProperty) string { return v.Message }).(pulumi.StringOutput)
}

// Priority level of the alert. Possible values are `P1`, `P2`, `P3`, `P4` and `P5`
func (o ServiceIncidentRuleIncidentRuleIncidentPropertyOutput) Priority() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceIncidentRuleIncidentRuleIncidentProperty) string { return v.Priority }).(pulumi.StringOutput)
}

// DEtails about stakeholders for this rule. This is a block, structure is documented below.
func (o ServiceIncidentRuleIncidentRuleIncidentPropertyOutput) StakeholderProperties() ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyArrayOutput {
	return o.ApplyT(func(v ServiceIncidentRuleIncidentRuleIncidentProperty) []ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderProperty {
		return v.StakeholderProperties
	}).(ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyArrayOutput)
}

// Tags of the alert.
func (o ServiceIncidentRuleIncidentRuleIncidentPropertyOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceIncidentRuleIncidentRuleIncidentProperty) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

type ServiceIncidentRuleIncidentRuleIncidentPropertyArrayOutput struct{ *pulumi.OutputState }

func (ServiceIncidentRuleIncidentRuleIncidentPropertyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceIncidentRuleIncidentRuleIncidentProperty)(nil)).Elem()
}

func (o ServiceIncidentRuleIncidentRuleIncidentPropertyArrayOutput) ToServiceIncidentRuleIncidentRuleIncidentPropertyArrayOutput() ServiceIncidentRuleIncidentRuleIncidentPropertyArrayOutput {
	return o
}

func (o ServiceIncidentRuleIncidentRuleIncidentPropertyArrayOutput) ToServiceIncidentRuleIncidentRuleIncidentPropertyArrayOutputWithContext(ctx context.Context) ServiceIncidentRuleIncidentRuleIncidentPropertyArrayOutput {
	return o
}

func (o ServiceIncidentRuleIncidentRuleIncidentPropertyArrayOutput) Index(i pulumi.IntInput) ServiceIncidentRuleIncidentRuleIncidentPropertyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceIncidentRuleIncidentRuleIncidentProperty {
		return vs[0].([]ServiceIncidentRuleIncidentRuleIncidentProperty)[vs[1].(int)]
	}).(ServiceIncidentRuleIncidentRuleIncidentPropertyOutput)
}

type ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderProperty struct {
	// Description that is generally used to provide a detailed information about the alert.
	Description *string `pulumi:"description"`
	// Option to enable stakeholder notifications.Default value is true.
	Enable *bool `pulumi:"enable"`
	// Message that is to be passed to audience that is generally used to provide a content information about the alert.
	Message string `pulumi:"message"`
}

// ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyInput is an input type that accepts ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyArgs and ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyOutput values.
// You can construct a concrete instance of `ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyInput` via:
//
//	ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyArgs{...}
type ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyInput interface {
	pulumi.Input

	ToServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyOutput() ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyOutput
	ToServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyOutputWithContext(context.Context) ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyOutput
}

type ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyArgs struct {
	// Description that is generally used to provide a detailed information about the alert.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Option to enable stakeholder notifications.Default value is true.
	Enable pulumi.BoolPtrInput `pulumi:"enable"`
	// Message that is to be passed to audience that is generally used to provide a content information about the alert.
	Message pulumi.StringInput `pulumi:"message"`
}

func (ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderProperty)(nil)).Elem()
}

func (i ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyArgs) ToServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyOutput() ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyOutput {
	return i.ToServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyOutputWithContext(context.Background())
}

func (i ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyArgs) ToServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyOutputWithContext(ctx context.Context) ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyOutput)
}

// ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyArrayInput is an input type that accepts ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyArray and ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyArrayOutput values.
// You can construct a concrete instance of `ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyArrayInput` via:
//
//	ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyArray{ ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyArgs{...} }
type ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyArrayInput interface {
	pulumi.Input

	ToServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyArrayOutput() ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyArrayOutput
	ToServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyArrayOutputWithContext(context.Context) ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyArrayOutput
}

type ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyArray []ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyInput

func (ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderProperty)(nil)).Elem()
}

func (i ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyArray) ToServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyArrayOutput() ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyArrayOutput {
	return i.ToServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyArrayOutputWithContext(context.Background())
}

func (i ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyArray) ToServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyArrayOutputWithContext(ctx context.Context) ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyArrayOutput)
}

type ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyOutput struct{ *pulumi.OutputState }

func (ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderProperty)(nil)).Elem()
}

func (o ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyOutput) ToServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyOutput() ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyOutput {
	return o
}

func (o ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyOutput) ToServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyOutputWithContext(ctx context.Context) ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyOutput {
	return o
}

// Description that is generally used to provide a detailed information about the alert.
func (o ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderProperty) *string {
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Option to enable stakeholder notifications.Default value is true.
func (o ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderProperty) *bool { return v.Enable }).(pulumi.BoolPtrOutput)
}

// Message that is to be passed to audience that is generally used to provide a content information about the alert.
func (o ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderProperty) string { return v.Message }).(pulumi.StringOutput)
}

type ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyArrayOutput struct{ *pulumi.OutputState }

func (ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderProperty)(nil)).Elem()
}

func (o ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyArrayOutput) ToServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyArrayOutput() ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyArrayOutput {
	return o
}

func (o ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyArrayOutput) ToServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyArrayOutputWithContext(ctx context.Context) ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyArrayOutput {
	return o
}

func (o ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyArrayOutput) Index(i pulumi.IntInput) ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderProperty {
		return vs[0].([]ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderProperty)[vs[1].(int)]
	}).(ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyOutput)
}

type TeamMember struct {
	// The UUID for the member to add to this Team.
	Id string `pulumi:"id"`
	// The role for the user within the Team - can be either `admin` or `user`. Default: `user`.
	Role     *string `pulumi:"role"`
	Username *string `pulumi:"username"`
}

// TeamMemberInput is an input type that accepts TeamMemberArgs and TeamMemberOutput values.
// You can construct a concrete instance of `TeamMemberInput` via:
//
//	TeamMemberArgs{...}
type TeamMemberInput interface {
	pulumi.Input

	ToTeamMemberOutput() TeamMemberOutput
	ToTeamMemberOutputWithContext(context.Context) TeamMemberOutput
}

type TeamMemberArgs struct {
	// The UUID for the member to add to this Team.
	Id pulumi.StringInput `pulumi:"id"`
	// The role for the user within the Team - can be either `admin` or `user`. Default: `user`.
	Role     pulumi.StringPtrInput `pulumi:"role"`
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (TeamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamMember)(nil)).Elem()
}

func (i TeamMemberArgs) ToTeamMemberOutput() TeamMemberOutput {
	return i.ToTeamMemberOutputWithContext(context.Background())
}

func (i TeamMemberArgs) ToTeamMemberOutputWithContext(ctx context.Context) TeamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamMemberOutput)
}

// TeamMemberArrayInput is an input type that accepts TeamMemberArray and TeamMemberArrayOutput values.
// You can construct a concrete instance of `TeamMemberArrayInput` via:
//
//	TeamMemberArray{ TeamMemberArgs{...} }
type TeamMemberArrayInput interface {
	pulumi.Input

	ToTeamMemberArrayOutput() TeamMemberArrayOutput
	ToTeamMemberArrayOutputWithContext(context.Context) TeamMemberArrayOutput
}

type TeamMemberArray []TeamMemberInput

func (TeamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TeamMember)(nil)).Elem()
}

func (i TeamMemberArray) ToTeamMemberArrayOutput() TeamMemberArrayOutput {
	return i.ToTeamMemberArrayOutputWithContext(context.Background())
}

func (i TeamMemberArray) ToTeamMemberArrayOutputWithContext(ctx context.Context) TeamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamMemberArrayOutput)
}

type TeamMemberOutput struct{ *pulumi.OutputState }

func (TeamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamMember)(nil)).Elem()
}

func (o TeamMemberOutput) ToTeamMemberOutput() TeamMemberOutput {
	return o
}

func (o TeamMemberOutput) ToTeamMemberOutputWithContext(ctx context.Context) TeamMemberOutput {
	return o
}

// The UUID for the member to add to this Team.
func (o TeamMemberOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v TeamMember) string { return v.Id }).(pulumi.StringOutput)
}

// The role for the user within the Team - can be either `admin` or `user`. Default: `user`.
func (o TeamMemberOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TeamMember) *string { return v.Role }).(pulumi.StringPtrOutput)
}

func (o TeamMemberOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TeamMember) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type TeamMemberArrayOutput struct{ *pulumi.OutputState }

func (TeamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TeamMember)(nil)).Elem()
}

func (o TeamMemberArrayOutput) ToTeamMemberArrayOutput() TeamMemberArrayOutput {
	return o
}

func (o TeamMemberArrayOutput) ToTeamMemberArrayOutputWithContext(ctx context.Context) TeamMemberArrayOutput {
	return o
}

func (o TeamMemberArrayOutput) Index(i pulumi.IntInput) TeamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TeamMember {
		return vs[0].([]TeamMember)[vs[1].(int)]
	}).(TeamMemberOutput)
}

type TeamRoutingRuleCriteria struct {
	// List of conditions will be checked before applying team routing rule. This field declaration should be omitted if the criteria type is set to match-all.
	Conditions []TeamRoutingRuleCriteriaCondition `pulumi:"conditions"`
	// Type of the operation will be applied on conditions. Should be one of `match-all`, `match-any-condition` or `match-all-conditions`.
	Type string `pulumi:"type"`
}

// TeamRoutingRuleCriteriaInput is an input type that accepts TeamRoutingRuleCriteriaArgs and TeamRoutingRuleCriteriaOutput values.
// You can construct a concrete instance of `TeamRoutingRuleCriteriaInput` via:
//
//	TeamRoutingRuleCriteriaArgs{...}
type TeamRoutingRuleCriteriaInput interface {
	pulumi.Input

	ToTeamRoutingRuleCriteriaOutput() TeamRoutingRuleCriteriaOutput
	ToTeamRoutingRuleCriteriaOutputWithContext(context.Context) TeamRoutingRuleCriteriaOutput
}

type TeamRoutingRuleCriteriaArgs struct {
	// List of conditions will be checked before applying team routing rule. This field declaration should be omitted if the criteria type is set to match-all.
	Conditions TeamRoutingRuleCriteriaConditionArrayInput `pulumi:"conditions"`
	// Type of the operation will be applied on conditions. Should be one of `match-all`, `match-any-condition` or `match-all-conditions`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TeamRoutingRuleCriteriaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamRoutingRuleCriteria)(nil)).Elem()
}

func (i TeamRoutingRuleCriteriaArgs) ToTeamRoutingRuleCriteriaOutput() TeamRoutingRuleCriteriaOutput {
	return i.ToTeamRoutingRuleCriteriaOutputWithContext(context.Background())
}

func (i TeamRoutingRuleCriteriaArgs) ToTeamRoutingRuleCriteriaOutputWithContext(ctx context.Context) TeamRoutingRuleCriteriaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamRoutingRuleCriteriaOutput)
}

// TeamRoutingRuleCriteriaArrayInput is an input type that accepts TeamRoutingRuleCriteriaArray and TeamRoutingRuleCriteriaArrayOutput values.
// You can construct a concrete instance of `TeamRoutingRuleCriteriaArrayInput` via:
//
//	TeamRoutingRuleCriteriaArray{ TeamRoutingRuleCriteriaArgs{...} }
type TeamRoutingRuleCriteriaArrayInput interface {
	pulumi.Input

	ToTeamRoutingRuleCriteriaArrayOutput() TeamRoutingRuleCriteriaArrayOutput
	ToTeamRoutingRuleCriteriaArrayOutputWithContext(context.Context) TeamRoutingRuleCriteriaArrayOutput
}

type TeamRoutingRuleCriteriaArray []TeamRoutingRuleCriteriaInput

func (TeamRoutingRuleCriteriaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TeamRoutingRuleCriteria)(nil)).Elem()
}

func (i TeamRoutingRuleCriteriaArray) ToTeamRoutingRuleCriteriaArrayOutput() TeamRoutingRuleCriteriaArrayOutput {
	return i.ToTeamRoutingRuleCriteriaArrayOutputWithContext(context.Background())
}

func (i TeamRoutingRuleCriteriaArray) ToTeamRoutingRuleCriteriaArrayOutputWithContext(ctx context.Context) TeamRoutingRuleCriteriaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamRoutingRuleCriteriaArrayOutput)
}

type TeamRoutingRuleCriteriaOutput struct{ *pulumi.OutputState }

func (TeamRoutingRuleCriteriaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamRoutingRuleCriteria)(nil)).Elem()
}

func (o TeamRoutingRuleCriteriaOutput) ToTeamRoutingRuleCriteriaOutput() TeamRoutingRuleCriteriaOutput {
	return o
}

func (o TeamRoutingRuleCriteriaOutput) ToTeamRoutingRuleCriteriaOutputWithContext(ctx context.Context) TeamRoutingRuleCriteriaOutput {
	return o
}

// List of conditions will be checked before applying team routing rule. This field declaration should be omitted if the criteria type is set to match-all.
func (o TeamRoutingRuleCriteriaOutput) Conditions() TeamRoutingRuleCriteriaConditionArrayOutput {
	return o.ApplyT(func(v TeamRoutingRuleCriteria) []TeamRoutingRuleCriteriaCondition { return v.Conditions }).(TeamRoutingRuleCriteriaConditionArrayOutput)
}

// Type of the operation will be applied on conditions. Should be one of `match-all`, `match-any-condition` or `match-all-conditions`.
func (o TeamRoutingRuleCriteriaOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TeamRoutingRuleCriteria) string { return v.Type }).(pulumi.StringOutput)
}

type TeamRoutingRuleCriteriaArrayOutput struct{ *pulumi.OutputState }

func (TeamRoutingRuleCriteriaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TeamRoutingRuleCriteria)(nil)).Elem()
}

func (o TeamRoutingRuleCriteriaArrayOutput) ToTeamRoutingRuleCriteriaArrayOutput() TeamRoutingRuleCriteriaArrayOutput {
	return o
}

func (o TeamRoutingRuleCriteriaArrayOutput) ToTeamRoutingRuleCriteriaArrayOutputWithContext(ctx context.Context) TeamRoutingRuleCriteriaArrayOutput {
	return o
}

func (o TeamRoutingRuleCriteriaArrayOutput) Index(i pulumi.IntInput) TeamRoutingRuleCriteriaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TeamRoutingRuleCriteria {
		return vs[0].([]TeamRoutingRuleCriteria)[vs[1].(int)]
	}).(TeamRoutingRuleCriteriaOutput)
}

type TeamRoutingRuleCriteriaCondition struct {
	ExpectedValue *string `pulumi:"expectedValue"`
	// Specifies which alert field will be used in condition. Possible values are `message`, `alias`, `description`, `source`, `entity`, `tags`, `actions`, `extra-properties`, `recipients`, `teams` or `priority`.
	Field string `pulumi:"field"`
	// If field is set as extra-properties, key could be used for key-value pair.
	Key *string `pulumi:"key"`
	// Indicates behaviour of the given operation. Default value is false.
	Not *bool `pulumi:"not"`
	// (true) It is the operation that will be executed for the given field and key. Possible operations are `matches`, `contains`, `starts-with`, `ends-with`, `equals`, `contains-key`, `contains-value`, `greater-than`, `less-than`, `is-empty` and `equals-ignore-whitespace`.
	Operation string `pulumi:"operation"`
	// Order of the condition in conditions list.
	Order *int `pulumi:"order"`
}

// TeamRoutingRuleCriteriaConditionInput is an input type that accepts TeamRoutingRuleCriteriaConditionArgs and TeamRoutingRuleCriteriaConditionOutput values.
// You can construct a concrete instance of `TeamRoutingRuleCriteriaConditionInput` via:
//
//	TeamRoutingRuleCriteriaConditionArgs{...}
type TeamRoutingRuleCriteriaConditionInput interface {
	pulumi.Input

	ToTeamRoutingRuleCriteriaConditionOutput() TeamRoutingRuleCriteriaConditionOutput
	ToTeamRoutingRuleCriteriaConditionOutputWithContext(context.Context) TeamRoutingRuleCriteriaConditionOutput
}

type TeamRoutingRuleCriteriaConditionArgs struct {
	ExpectedValue pulumi.StringPtrInput `pulumi:"expectedValue"`
	// Specifies which alert field will be used in condition. Possible values are `message`, `alias`, `description`, `source`, `entity`, `tags`, `actions`, `extra-properties`, `recipients`, `teams` or `priority`.
	Field pulumi.StringInput `pulumi:"field"`
	// If field is set as extra-properties, key could be used for key-value pair.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Indicates behaviour of the given operation. Default value is false.
	Not pulumi.BoolPtrInput `pulumi:"not"`
	// (true) It is the operation that will be executed for the given field and key. Possible operations are `matches`, `contains`, `starts-with`, `ends-with`, `equals`, `contains-key`, `contains-value`, `greater-than`, `less-than`, `is-empty` and `equals-ignore-whitespace`.
	Operation pulumi.StringInput `pulumi:"operation"`
	// Order of the condition in conditions list.
	Order pulumi.IntPtrInput `pulumi:"order"`
}

func (TeamRoutingRuleCriteriaConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamRoutingRuleCriteriaCondition)(nil)).Elem()
}

func (i TeamRoutingRuleCriteriaConditionArgs) ToTeamRoutingRuleCriteriaConditionOutput() TeamRoutingRuleCriteriaConditionOutput {
	return i.ToTeamRoutingRuleCriteriaConditionOutputWithContext(context.Background())
}

func (i TeamRoutingRuleCriteriaConditionArgs) ToTeamRoutingRuleCriteriaConditionOutputWithContext(ctx context.Context) TeamRoutingRuleCriteriaConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamRoutingRuleCriteriaConditionOutput)
}

// TeamRoutingRuleCriteriaConditionArrayInput is an input type that accepts TeamRoutingRuleCriteriaConditionArray and TeamRoutingRuleCriteriaConditionArrayOutput values.
// You can construct a concrete instance of `TeamRoutingRuleCriteriaConditionArrayInput` via:
//
//	TeamRoutingRuleCriteriaConditionArray{ TeamRoutingRuleCriteriaConditionArgs{...} }
type TeamRoutingRuleCriteriaConditionArrayInput interface {
	pulumi.Input

	ToTeamRoutingRuleCriteriaConditionArrayOutput() TeamRoutingRuleCriteriaConditionArrayOutput
	ToTeamRoutingRuleCriteriaConditionArrayOutputWithContext(context.Context) TeamRoutingRuleCriteriaConditionArrayOutput
}

type TeamRoutingRuleCriteriaConditionArray []TeamRoutingRuleCriteriaConditionInput

func (TeamRoutingRuleCriteriaConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TeamRoutingRuleCriteriaCondition)(nil)).Elem()
}

func (i TeamRoutingRuleCriteriaConditionArray) ToTeamRoutingRuleCriteriaConditionArrayOutput() TeamRoutingRuleCriteriaConditionArrayOutput {
	return i.ToTeamRoutingRuleCriteriaConditionArrayOutputWithContext(context.Background())
}

func (i TeamRoutingRuleCriteriaConditionArray) ToTeamRoutingRuleCriteriaConditionArrayOutputWithContext(ctx context.Context) TeamRoutingRuleCriteriaConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamRoutingRuleCriteriaConditionArrayOutput)
}

type TeamRoutingRuleCriteriaConditionOutput struct{ *pulumi.OutputState }

func (TeamRoutingRuleCriteriaConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamRoutingRuleCriteriaCondition)(nil)).Elem()
}

func (o TeamRoutingRuleCriteriaConditionOutput) ToTeamRoutingRuleCriteriaConditionOutput() TeamRoutingRuleCriteriaConditionOutput {
	return o
}

func (o TeamRoutingRuleCriteriaConditionOutput) ToTeamRoutingRuleCriteriaConditionOutputWithContext(ctx context.Context) TeamRoutingRuleCriteriaConditionOutput {
	return o
}

func (o TeamRoutingRuleCriteriaConditionOutput) ExpectedValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TeamRoutingRuleCriteriaCondition) *string { return v.ExpectedValue }).(pulumi.StringPtrOutput)
}

// Specifies which alert field will be used in condition. Possible values are `message`, `alias`, `description`, `source`, `entity`, `tags`, `actions`, `extra-properties`, `recipients`, `teams` or `priority`.
func (o TeamRoutingRuleCriteriaConditionOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v TeamRoutingRuleCriteriaCondition) string { return v.Field }).(pulumi.StringOutput)
}

// If field is set as extra-properties, key could be used for key-value pair.
func (o TeamRoutingRuleCriteriaConditionOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TeamRoutingRuleCriteriaCondition) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Indicates behaviour of the given operation. Default value is false.
func (o TeamRoutingRuleCriteriaConditionOutput) Not() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TeamRoutingRuleCriteriaCondition) *bool { return v.Not }).(pulumi.BoolPtrOutput)
}

// (true) It is the operation that will be executed for the given field and key. Possible operations are `matches`, `contains`, `starts-with`, `ends-with`, `equals`, `contains-key`, `contains-value`, `greater-than`, `less-than`, `is-empty` and `equals-ignore-whitespace`.
func (o TeamRoutingRuleCriteriaConditionOutput) Operation() pulumi.StringOutput {
	return o.ApplyT(func(v TeamRoutingRuleCriteriaCondition) string { return v.Operation }).(pulumi.StringOutput)
}

// Order of the condition in conditions list.
func (o TeamRoutingRuleCriteriaConditionOutput) Order() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TeamRoutingRuleCriteriaCondition) *int { return v.Order }).(pulumi.IntPtrOutput)
}

type TeamRoutingRuleCriteriaConditionArrayOutput struct{ *pulumi.OutputState }

func (TeamRoutingRuleCriteriaConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TeamRoutingRuleCriteriaCondition)(nil)).Elem()
}

func (o TeamRoutingRuleCriteriaConditionArrayOutput) ToTeamRoutingRuleCriteriaConditionArrayOutput() TeamRoutingRuleCriteriaConditionArrayOutput {
	return o
}

func (o TeamRoutingRuleCriteriaConditionArrayOutput) ToTeamRoutingRuleCriteriaConditionArrayOutputWithContext(ctx context.Context) TeamRoutingRuleCriteriaConditionArrayOutput {
	return o
}

func (o TeamRoutingRuleCriteriaConditionArrayOutput) Index(i pulumi.IntInput) TeamRoutingRuleCriteriaConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TeamRoutingRuleCriteriaCondition {
		return vs[0].([]TeamRoutingRuleCriteriaCondition)[vs[1].(int)]
	}).(TeamRoutingRuleCriteriaConditionOutput)
}

type TeamRoutingRuleNotify struct {
	Id   *string `pulumi:"id"`
	Name *string `pulumi:"name"`
	Type string  `pulumi:"type"`
}

// TeamRoutingRuleNotifyInput is an input type that accepts TeamRoutingRuleNotifyArgs and TeamRoutingRuleNotifyOutput values.
// You can construct a concrete instance of `TeamRoutingRuleNotifyInput` via:
//
//	TeamRoutingRuleNotifyArgs{...}
type TeamRoutingRuleNotifyInput interface {
	pulumi.Input

	ToTeamRoutingRuleNotifyOutput() TeamRoutingRuleNotifyOutput
	ToTeamRoutingRuleNotifyOutputWithContext(context.Context) TeamRoutingRuleNotifyOutput
}

type TeamRoutingRuleNotifyArgs struct {
	Id   pulumi.StringPtrInput `pulumi:"id"`
	Name pulumi.StringPtrInput `pulumi:"name"`
	Type pulumi.StringInput    `pulumi:"type"`
}

func (TeamRoutingRuleNotifyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamRoutingRuleNotify)(nil)).Elem()
}

func (i TeamRoutingRuleNotifyArgs) ToTeamRoutingRuleNotifyOutput() TeamRoutingRuleNotifyOutput {
	return i.ToTeamRoutingRuleNotifyOutputWithContext(context.Background())
}

func (i TeamRoutingRuleNotifyArgs) ToTeamRoutingRuleNotifyOutputWithContext(ctx context.Context) TeamRoutingRuleNotifyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamRoutingRuleNotifyOutput)
}

// TeamRoutingRuleNotifyArrayInput is an input type that accepts TeamRoutingRuleNotifyArray and TeamRoutingRuleNotifyArrayOutput values.
// You can construct a concrete instance of `TeamRoutingRuleNotifyArrayInput` via:
//
//	TeamRoutingRuleNotifyArray{ TeamRoutingRuleNotifyArgs{...} }
type TeamRoutingRuleNotifyArrayInput interface {
	pulumi.Input

	ToTeamRoutingRuleNotifyArrayOutput() TeamRoutingRuleNotifyArrayOutput
	ToTeamRoutingRuleNotifyArrayOutputWithContext(context.Context) TeamRoutingRuleNotifyArrayOutput
}

type TeamRoutingRuleNotifyArray []TeamRoutingRuleNotifyInput

func (TeamRoutingRuleNotifyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TeamRoutingRuleNotify)(nil)).Elem()
}

func (i TeamRoutingRuleNotifyArray) ToTeamRoutingRuleNotifyArrayOutput() TeamRoutingRuleNotifyArrayOutput {
	return i.ToTeamRoutingRuleNotifyArrayOutputWithContext(context.Background())
}

func (i TeamRoutingRuleNotifyArray) ToTeamRoutingRuleNotifyArrayOutputWithContext(ctx context.Context) TeamRoutingRuleNotifyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamRoutingRuleNotifyArrayOutput)
}

type TeamRoutingRuleNotifyOutput struct{ *pulumi.OutputState }

func (TeamRoutingRuleNotifyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamRoutingRuleNotify)(nil)).Elem()
}

func (o TeamRoutingRuleNotifyOutput) ToTeamRoutingRuleNotifyOutput() TeamRoutingRuleNotifyOutput {
	return o
}

func (o TeamRoutingRuleNotifyOutput) ToTeamRoutingRuleNotifyOutputWithContext(ctx context.Context) TeamRoutingRuleNotifyOutput {
	return o
}

func (o TeamRoutingRuleNotifyOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TeamRoutingRuleNotify) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o TeamRoutingRuleNotifyOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TeamRoutingRuleNotify) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o TeamRoutingRuleNotifyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TeamRoutingRuleNotify) string { return v.Type }).(pulumi.StringOutput)
}

type TeamRoutingRuleNotifyArrayOutput struct{ *pulumi.OutputState }

func (TeamRoutingRuleNotifyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TeamRoutingRuleNotify)(nil)).Elem()
}

func (o TeamRoutingRuleNotifyArrayOutput) ToTeamRoutingRuleNotifyArrayOutput() TeamRoutingRuleNotifyArrayOutput {
	return o
}

func (o TeamRoutingRuleNotifyArrayOutput) ToTeamRoutingRuleNotifyArrayOutputWithContext(ctx context.Context) TeamRoutingRuleNotifyArrayOutput {
	return o
}

func (o TeamRoutingRuleNotifyArrayOutput) Index(i pulumi.IntInput) TeamRoutingRuleNotifyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TeamRoutingRuleNotify {
		return vs[0].([]TeamRoutingRuleNotify)[vs[1].(int)]
	}).(TeamRoutingRuleNotifyOutput)
}

type TeamRoutingRuleTimeRestriction struct {
	Restriction     []TeamRoutingRuleTimeRestrictionRestriction     `pulumi:"restriction"`
	RestrictionList []TeamRoutingRuleTimeRestrictionRestrictionList `pulumi:"restrictionList"`
	// Type of the operation will be applied on conditions. Should be one of `match-all`, `match-any-condition` or `match-all-conditions`.
	Type string `pulumi:"type"`
}

// TeamRoutingRuleTimeRestrictionInput is an input type that accepts TeamRoutingRuleTimeRestrictionArgs and TeamRoutingRuleTimeRestrictionOutput values.
// You can construct a concrete instance of `TeamRoutingRuleTimeRestrictionInput` via:
//
//	TeamRoutingRuleTimeRestrictionArgs{...}
type TeamRoutingRuleTimeRestrictionInput interface {
	pulumi.Input

	ToTeamRoutingRuleTimeRestrictionOutput() TeamRoutingRuleTimeRestrictionOutput
	ToTeamRoutingRuleTimeRestrictionOutputWithContext(context.Context) TeamRoutingRuleTimeRestrictionOutput
}

type TeamRoutingRuleTimeRestrictionArgs struct {
	Restriction     TeamRoutingRuleTimeRestrictionRestrictionArrayInput     `pulumi:"restriction"`
	RestrictionList TeamRoutingRuleTimeRestrictionRestrictionListArrayInput `pulumi:"restrictionList"`
	// Type of the operation will be applied on conditions. Should be one of `match-all`, `match-any-condition` or `match-all-conditions`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TeamRoutingRuleTimeRestrictionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamRoutingRuleTimeRestriction)(nil)).Elem()
}

func (i TeamRoutingRuleTimeRestrictionArgs) ToTeamRoutingRuleTimeRestrictionOutput() TeamRoutingRuleTimeRestrictionOutput {
	return i.ToTeamRoutingRuleTimeRestrictionOutputWithContext(context.Background())
}

func (i TeamRoutingRuleTimeRestrictionArgs) ToTeamRoutingRuleTimeRestrictionOutputWithContext(ctx context.Context) TeamRoutingRuleTimeRestrictionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamRoutingRuleTimeRestrictionOutput)
}

// TeamRoutingRuleTimeRestrictionArrayInput is an input type that accepts TeamRoutingRuleTimeRestrictionArray and TeamRoutingRuleTimeRestrictionArrayOutput values.
// You can construct a concrete instance of `TeamRoutingRuleTimeRestrictionArrayInput` via:
//
//	TeamRoutingRuleTimeRestrictionArray{ TeamRoutingRuleTimeRestrictionArgs{...} }
type TeamRoutingRuleTimeRestrictionArrayInput interface {
	pulumi.Input

	ToTeamRoutingRuleTimeRestrictionArrayOutput() TeamRoutingRuleTimeRestrictionArrayOutput
	ToTeamRoutingRuleTimeRestrictionArrayOutputWithContext(context.Context) TeamRoutingRuleTimeRestrictionArrayOutput
}

type TeamRoutingRuleTimeRestrictionArray []TeamRoutingRuleTimeRestrictionInput

func (TeamRoutingRuleTimeRestrictionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TeamRoutingRuleTimeRestriction)(nil)).Elem()
}

func (i TeamRoutingRuleTimeRestrictionArray) ToTeamRoutingRuleTimeRestrictionArrayOutput() TeamRoutingRuleTimeRestrictionArrayOutput {
	return i.ToTeamRoutingRuleTimeRestrictionArrayOutputWithContext(context.Background())
}

func (i TeamRoutingRuleTimeRestrictionArray) ToTeamRoutingRuleTimeRestrictionArrayOutputWithContext(ctx context.Context) TeamRoutingRuleTimeRestrictionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamRoutingRuleTimeRestrictionArrayOutput)
}

type TeamRoutingRuleTimeRestrictionOutput struct{ *pulumi.OutputState }

func (TeamRoutingRuleTimeRestrictionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamRoutingRuleTimeRestriction)(nil)).Elem()
}

func (o TeamRoutingRuleTimeRestrictionOutput) ToTeamRoutingRuleTimeRestrictionOutput() TeamRoutingRuleTimeRestrictionOutput {
	return o
}

func (o TeamRoutingRuleTimeRestrictionOutput) ToTeamRoutingRuleTimeRestrictionOutputWithContext(ctx context.Context) TeamRoutingRuleTimeRestrictionOutput {
	return o
}

func (o TeamRoutingRuleTimeRestrictionOutput) Restriction() TeamRoutingRuleTimeRestrictionRestrictionArrayOutput {
	return o.ApplyT(func(v TeamRoutingRuleTimeRestriction) []TeamRoutingRuleTimeRestrictionRestriction {
		return v.Restriction
	}).(TeamRoutingRuleTimeRestrictionRestrictionArrayOutput)
}

func (o TeamRoutingRuleTimeRestrictionOutput) RestrictionList() TeamRoutingRuleTimeRestrictionRestrictionListArrayOutput {
	return o.ApplyT(func(v TeamRoutingRuleTimeRestriction) []TeamRoutingRuleTimeRestrictionRestrictionList {
		return v.RestrictionList
	}).(TeamRoutingRuleTimeRestrictionRestrictionListArrayOutput)
}

// Type of the operation will be applied on conditions. Should be one of `match-all`, `match-any-condition` or `match-all-conditions`.
func (o TeamRoutingRuleTimeRestrictionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TeamRoutingRuleTimeRestriction) string { return v.Type }).(pulumi.StringOutput)
}

type TeamRoutingRuleTimeRestrictionArrayOutput struct{ *pulumi.OutputState }

func (TeamRoutingRuleTimeRestrictionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TeamRoutingRuleTimeRestriction)(nil)).Elem()
}

func (o TeamRoutingRuleTimeRestrictionArrayOutput) ToTeamRoutingRuleTimeRestrictionArrayOutput() TeamRoutingRuleTimeRestrictionArrayOutput {
	return o
}

func (o TeamRoutingRuleTimeRestrictionArrayOutput) ToTeamRoutingRuleTimeRestrictionArrayOutputWithContext(ctx context.Context) TeamRoutingRuleTimeRestrictionArrayOutput {
	return o
}

func (o TeamRoutingRuleTimeRestrictionArrayOutput) Index(i pulumi.IntInput) TeamRoutingRuleTimeRestrictionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TeamRoutingRuleTimeRestriction {
		return vs[0].([]TeamRoutingRuleTimeRestriction)[vs[1].(int)]
	}).(TeamRoutingRuleTimeRestrictionOutput)
}

type TeamRoutingRuleTimeRestrictionRestriction struct {
	EndHour   int `pulumi:"endHour"`
	EndMin    int `pulumi:"endMin"`
	StartHour int `pulumi:"startHour"`
	StartMin  int `pulumi:"startMin"`
}

// TeamRoutingRuleTimeRestrictionRestrictionInput is an input type that accepts TeamRoutingRuleTimeRestrictionRestrictionArgs and TeamRoutingRuleTimeRestrictionRestrictionOutput values.
// You can construct a concrete instance of `TeamRoutingRuleTimeRestrictionRestrictionInput` via:
//
//	TeamRoutingRuleTimeRestrictionRestrictionArgs{...}
type TeamRoutingRuleTimeRestrictionRestrictionInput interface {
	pulumi.Input

	ToTeamRoutingRuleTimeRestrictionRestrictionOutput() TeamRoutingRuleTimeRestrictionRestrictionOutput
	ToTeamRoutingRuleTimeRestrictionRestrictionOutputWithContext(context.Context) TeamRoutingRuleTimeRestrictionRestrictionOutput
}

type TeamRoutingRuleTimeRestrictionRestrictionArgs struct {
	EndHour   pulumi.IntInput `pulumi:"endHour"`
	EndMin    pulumi.IntInput `pulumi:"endMin"`
	StartHour pulumi.IntInput `pulumi:"startHour"`
	StartMin  pulumi.IntInput `pulumi:"startMin"`
}

func (TeamRoutingRuleTimeRestrictionRestrictionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamRoutingRuleTimeRestrictionRestriction)(nil)).Elem()
}

func (i TeamRoutingRuleTimeRestrictionRestrictionArgs) ToTeamRoutingRuleTimeRestrictionRestrictionOutput() TeamRoutingRuleTimeRestrictionRestrictionOutput {
	return i.ToTeamRoutingRuleTimeRestrictionRestrictionOutputWithContext(context.Background())
}

func (i TeamRoutingRuleTimeRestrictionRestrictionArgs) ToTeamRoutingRuleTimeRestrictionRestrictionOutputWithContext(ctx context.Context) TeamRoutingRuleTimeRestrictionRestrictionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamRoutingRuleTimeRestrictionRestrictionOutput)
}

// TeamRoutingRuleTimeRestrictionRestrictionArrayInput is an input type that accepts TeamRoutingRuleTimeRestrictionRestrictionArray and TeamRoutingRuleTimeRestrictionRestrictionArrayOutput values.
// You can construct a concrete instance of `TeamRoutingRuleTimeRestrictionRestrictionArrayInput` via:
//
//	TeamRoutingRuleTimeRestrictionRestrictionArray{ TeamRoutingRuleTimeRestrictionRestrictionArgs{...} }
type TeamRoutingRuleTimeRestrictionRestrictionArrayInput interface {
	pulumi.Input

	ToTeamRoutingRuleTimeRestrictionRestrictionArrayOutput() TeamRoutingRuleTimeRestrictionRestrictionArrayOutput
	ToTeamRoutingRuleTimeRestrictionRestrictionArrayOutputWithContext(context.Context) TeamRoutingRuleTimeRestrictionRestrictionArrayOutput
}

type TeamRoutingRuleTimeRestrictionRestrictionArray []TeamRoutingRuleTimeRestrictionRestrictionInput

func (TeamRoutingRuleTimeRestrictionRestrictionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TeamRoutingRuleTimeRestrictionRestriction)(nil)).Elem()
}

func (i TeamRoutingRuleTimeRestrictionRestrictionArray) ToTeamRoutingRuleTimeRestrictionRestrictionArrayOutput() TeamRoutingRuleTimeRestrictionRestrictionArrayOutput {
	return i.ToTeamRoutingRuleTimeRestrictionRestrictionArrayOutputWithContext(context.Background())
}

func (i TeamRoutingRuleTimeRestrictionRestrictionArray) ToTeamRoutingRuleTimeRestrictionRestrictionArrayOutputWithContext(ctx context.Context) TeamRoutingRuleTimeRestrictionRestrictionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamRoutingRuleTimeRestrictionRestrictionArrayOutput)
}

type TeamRoutingRuleTimeRestrictionRestrictionOutput struct{ *pulumi.OutputState }

func (TeamRoutingRuleTimeRestrictionRestrictionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamRoutingRuleTimeRestrictionRestriction)(nil)).Elem()
}

func (o TeamRoutingRuleTimeRestrictionRestrictionOutput) ToTeamRoutingRuleTimeRestrictionRestrictionOutput() TeamRoutingRuleTimeRestrictionRestrictionOutput {
	return o
}

func (o TeamRoutingRuleTimeRestrictionRestrictionOutput) ToTeamRoutingRuleTimeRestrictionRestrictionOutputWithContext(ctx context.Context) TeamRoutingRuleTimeRestrictionRestrictionOutput {
	return o
}

func (o TeamRoutingRuleTimeRestrictionRestrictionOutput) EndHour() pulumi.IntOutput {
	return o.ApplyT(func(v TeamRoutingRuleTimeRestrictionRestriction) int { return v.EndHour }).(pulumi.IntOutput)
}

func (o TeamRoutingRuleTimeRestrictionRestrictionOutput) EndMin() pulumi.IntOutput {
	return o.ApplyT(func(v TeamRoutingRuleTimeRestrictionRestriction) int { return v.EndMin }).(pulumi.IntOutput)
}

func (o TeamRoutingRuleTimeRestrictionRestrictionOutput) StartHour() pulumi.IntOutput {
	return o.ApplyT(func(v TeamRoutingRuleTimeRestrictionRestriction) int { return v.StartHour }).(pulumi.IntOutput)
}

func (o TeamRoutingRuleTimeRestrictionRestrictionOutput) StartMin() pulumi.IntOutput {
	return o.ApplyT(func(v TeamRoutingRuleTimeRestrictionRestriction) int { return v.StartMin }).(pulumi.IntOutput)
}

type TeamRoutingRuleTimeRestrictionRestrictionArrayOutput struct{ *pulumi.OutputState }

func (TeamRoutingRuleTimeRestrictionRestrictionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TeamRoutingRuleTimeRestrictionRestriction)(nil)).Elem()
}

func (o TeamRoutingRuleTimeRestrictionRestrictionArrayOutput) ToTeamRoutingRuleTimeRestrictionRestrictionArrayOutput() TeamRoutingRuleTimeRestrictionRestrictionArrayOutput {
	return o
}

func (o TeamRoutingRuleTimeRestrictionRestrictionArrayOutput) ToTeamRoutingRuleTimeRestrictionRestrictionArrayOutputWithContext(ctx context.Context) TeamRoutingRuleTimeRestrictionRestrictionArrayOutput {
	return o
}

func (o TeamRoutingRuleTimeRestrictionRestrictionArrayOutput) Index(i pulumi.IntInput) TeamRoutingRuleTimeRestrictionRestrictionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TeamRoutingRuleTimeRestrictionRestriction {
		return vs[0].([]TeamRoutingRuleTimeRestrictionRestriction)[vs[1].(int)]
	}).(TeamRoutingRuleTimeRestrictionRestrictionOutput)
}

type TeamRoutingRuleTimeRestrictionRestrictionList struct {
	EndDay    string `pulumi:"endDay"`
	EndHour   int    `pulumi:"endHour"`
	EndMin    int    `pulumi:"endMin"`
	StartDay  string `pulumi:"startDay"`
	StartHour int    `pulumi:"startHour"`
	StartMin  int    `pulumi:"startMin"`
}

// TeamRoutingRuleTimeRestrictionRestrictionListInput is an input type that accepts TeamRoutingRuleTimeRestrictionRestrictionListArgs and TeamRoutingRuleTimeRestrictionRestrictionListOutput values.
// You can construct a concrete instance of `TeamRoutingRuleTimeRestrictionRestrictionListInput` via:
//
//	TeamRoutingRuleTimeRestrictionRestrictionListArgs{...}
type TeamRoutingRuleTimeRestrictionRestrictionListInput interface {
	pulumi.Input

	ToTeamRoutingRuleTimeRestrictionRestrictionListOutput() TeamRoutingRuleTimeRestrictionRestrictionListOutput
	ToTeamRoutingRuleTimeRestrictionRestrictionListOutputWithContext(context.Context) TeamRoutingRuleTimeRestrictionRestrictionListOutput
}

type TeamRoutingRuleTimeRestrictionRestrictionListArgs struct {
	EndDay    pulumi.StringInput `pulumi:"endDay"`
	EndHour   pulumi.IntInput    `pulumi:"endHour"`
	EndMin    pulumi.IntInput    `pulumi:"endMin"`
	StartDay  pulumi.StringInput `pulumi:"startDay"`
	StartHour pulumi.IntInput    `pulumi:"startHour"`
	StartMin  pulumi.IntInput    `pulumi:"startMin"`
}

func (TeamRoutingRuleTimeRestrictionRestrictionListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamRoutingRuleTimeRestrictionRestrictionList)(nil)).Elem()
}

func (i TeamRoutingRuleTimeRestrictionRestrictionListArgs) ToTeamRoutingRuleTimeRestrictionRestrictionListOutput() TeamRoutingRuleTimeRestrictionRestrictionListOutput {
	return i.ToTeamRoutingRuleTimeRestrictionRestrictionListOutputWithContext(context.Background())
}

func (i TeamRoutingRuleTimeRestrictionRestrictionListArgs) ToTeamRoutingRuleTimeRestrictionRestrictionListOutputWithContext(ctx context.Context) TeamRoutingRuleTimeRestrictionRestrictionListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamRoutingRuleTimeRestrictionRestrictionListOutput)
}

// TeamRoutingRuleTimeRestrictionRestrictionListArrayInput is an input type that accepts TeamRoutingRuleTimeRestrictionRestrictionListArray and TeamRoutingRuleTimeRestrictionRestrictionListArrayOutput values.
// You can construct a concrete instance of `TeamRoutingRuleTimeRestrictionRestrictionListArrayInput` via:
//
//	TeamRoutingRuleTimeRestrictionRestrictionListArray{ TeamRoutingRuleTimeRestrictionRestrictionListArgs{...} }
type TeamRoutingRuleTimeRestrictionRestrictionListArrayInput interface {
	pulumi.Input

	ToTeamRoutingRuleTimeRestrictionRestrictionListArrayOutput() TeamRoutingRuleTimeRestrictionRestrictionListArrayOutput
	ToTeamRoutingRuleTimeRestrictionRestrictionListArrayOutputWithContext(context.Context) TeamRoutingRuleTimeRestrictionRestrictionListArrayOutput
}

type TeamRoutingRuleTimeRestrictionRestrictionListArray []TeamRoutingRuleTimeRestrictionRestrictionListInput

func (TeamRoutingRuleTimeRestrictionRestrictionListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TeamRoutingRuleTimeRestrictionRestrictionList)(nil)).Elem()
}

func (i TeamRoutingRuleTimeRestrictionRestrictionListArray) ToTeamRoutingRuleTimeRestrictionRestrictionListArrayOutput() TeamRoutingRuleTimeRestrictionRestrictionListArrayOutput {
	return i.ToTeamRoutingRuleTimeRestrictionRestrictionListArrayOutputWithContext(context.Background())
}

func (i TeamRoutingRuleTimeRestrictionRestrictionListArray) ToTeamRoutingRuleTimeRestrictionRestrictionListArrayOutputWithContext(ctx context.Context) TeamRoutingRuleTimeRestrictionRestrictionListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamRoutingRuleTimeRestrictionRestrictionListArrayOutput)
}

type TeamRoutingRuleTimeRestrictionRestrictionListOutput struct{ *pulumi.OutputState }

func (TeamRoutingRuleTimeRestrictionRestrictionListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamRoutingRuleTimeRestrictionRestrictionList)(nil)).Elem()
}

func (o TeamRoutingRuleTimeRestrictionRestrictionListOutput) ToTeamRoutingRuleTimeRestrictionRestrictionListOutput() TeamRoutingRuleTimeRestrictionRestrictionListOutput {
	return o
}

func (o TeamRoutingRuleTimeRestrictionRestrictionListOutput) ToTeamRoutingRuleTimeRestrictionRestrictionListOutputWithContext(ctx context.Context) TeamRoutingRuleTimeRestrictionRestrictionListOutput {
	return o
}

func (o TeamRoutingRuleTimeRestrictionRestrictionListOutput) EndDay() pulumi.StringOutput {
	return o.ApplyT(func(v TeamRoutingRuleTimeRestrictionRestrictionList) string { return v.EndDay }).(pulumi.StringOutput)
}

func (o TeamRoutingRuleTimeRestrictionRestrictionListOutput) EndHour() pulumi.IntOutput {
	return o.ApplyT(func(v TeamRoutingRuleTimeRestrictionRestrictionList) int { return v.EndHour }).(pulumi.IntOutput)
}

func (o TeamRoutingRuleTimeRestrictionRestrictionListOutput) EndMin() pulumi.IntOutput {
	return o.ApplyT(func(v TeamRoutingRuleTimeRestrictionRestrictionList) int { return v.EndMin }).(pulumi.IntOutput)
}

func (o TeamRoutingRuleTimeRestrictionRestrictionListOutput) StartDay() pulumi.StringOutput {
	return o.ApplyT(func(v TeamRoutingRuleTimeRestrictionRestrictionList) string { return v.StartDay }).(pulumi.StringOutput)
}

func (o TeamRoutingRuleTimeRestrictionRestrictionListOutput) StartHour() pulumi.IntOutput {
	return o.ApplyT(func(v TeamRoutingRuleTimeRestrictionRestrictionList) int { return v.StartHour }).(pulumi.IntOutput)
}

func (o TeamRoutingRuleTimeRestrictionRestrictionListOutput) StartMin() pulumi.IntOutput {
	return o.ApplyT(func(v TeamRoutingRuleTimeRestrictionRestrictionList) int { return v.StartMin }).(pulumi.IntOutput)
}

type TeamRoutingRuleTimeRestrictionRestrictionListArrayOutput struct{ *pulumi.OutputState }

func (TeamRoutingRuleTimeRestrictionRestrictionListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TeamRoutingRuleTimeRestrictionRestrictionList)(nil)).Elem()
}

func (o TeamRoutingRuleTimeRestrictionRestrictionListArrayOutput) ToTeamRoutingRuleTimeRestrictionRestrictionListArrayOutput() TeamRoutingRuleTimeRestrictionRestrictionListArrayOutput {
	return o
}

func (o TeamRoutingRuleTimeRestrictionRestrictionListArrayOutput) ToTeamRoutingRuleTimeRestrictionRestrictionListArrayOutputWithContext(ctx context.Context) TeamRoutingRuleTimeRestrictionRestrictionListArrayOutput {
	return o
}

func (o TeamRoutingRuleTimeRestrictionRestrictionListArrayOutput) Index(i pulumi.IntInput) TeamRoutingRuleTimeRestrictionRestrictionListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TeamRoutingRuleTimeRestrictionRestrictionList {
		return vs[0].([]TeamRoutingRuleTimeRestrictionRestrictionList)[vs[1].(int)]
	}).(TeamRoutingRuleTimeRestrictionRestrictionListOutput)
}

type UserUserAddress struct {
	City    string `pulumi:"city"`
	Country string `pulumi:"country"`
	Line    string `pulumi:"line"`
	State   string `pulumi:"state"`
	Zipcode string `pulumi:"zipcode"`
}

// UserUserAddressInput is an input type that accepts UserUserAddressArgs and UserUserAddressOutput values.
// You can construct a concrete instance of `UserUserAddressInput` via:
//
//	UserUserAddressArgs{...}
type UserUserAddressInput interface {
	pulumi.Input

	ToUserUserAddressOutput() UserUserAddressOutput
	ToUserUserAddressOutputWithContext(context.Context) UserUserAddressOutput
}

type UserUserAddressArgs struct {
	City    pulumi.StringInput `pulumi:"city"`
	Country pulumi.StringInput `pulumi:"country"`
	Line    pulumi.StringInput `pulumi:"line"`
	State   pulumi.StringInput `pulumi:"state"`
	Zipcode pulumi.StringInput `pulumi:"zipcode"`
}

func (UserUserAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserUserAddress)(nil)).Elem()
}

func (i UserUserAddressArgs) ToUserUserAddressOutput() UserUserAddressOutput {
	return i.ToUserUserAddressOutputWithContext(context.Background())
}

func (i UserUserAddressArgs) ToUserUserAddressOutputWithContext(ctx context.Context) UserUserAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserUserAddressOutput)
}

// UserUserAddressArrayInput is an input type that accepts UserUserAddressArray and UserUserAddressArrayOutput values.
// You can construct a concrete instance of `UserUserAddressArrayInput` via:
//
//	UserUserAddressArray{ UserUserAddressArgs{...} }
type UserUserAddressArrayInput interface {
	pulumi.Input

	ToUserUserAddressArrayOutput() UserUserAddressArrayOutput
	ToUserUserAddressArrayOutputWithContext(context.Context) UserUserAddressArrayOutput
}

type UserUserAddressArray []UserUserAddressInput

func (UserUserAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserUserAddress)(nil)).Elem()
}

func (i UserUserAddressArray) ToUserUserAddressArrayOutput() UserUserAddressArrayOutput {
	return i.ToUserUserAddressArrayOutputWithContext(context.Background())
}

func (i UserUserAddressArray) ToUserUserAddressArrayOutputWithContext(ctx context.Context) UserUserAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserUserAddressArrayOutput)
}

type UserUserAddressOutput struct{ *pulumi.OutputState }

func (UserUserAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserUserAddress)(nil)).Elem()
}

func (o UserUserAddressOutput) ToUserUserAddressOutput() UserUserAddressOutput {
	return o
}

func (o UserUserAddressOutput) ToUserUserAddressOutputWithContext(ctx context.Context) UserUserAddressOutput {
	return o
}

func (o UserUserAddressOutput) City() pulumi.StringOutput {
	return o.ApplyT(func(v UserUserAddress) string { return v.City }).(pulumi.StringOutput)
}

func (o UserUserAddressOutput) Country() pulumi.StringOutput {
	return o.ApplyT(func(v UserUserAddress) string { return v.Country }).(pulumi.StringOutput)
}

func (o UserUserAddressOutput) Line() pulumi.StringOutput {
	return o.ApplyT(func(v UserUserAddress) string { return v.Line }).(pulumi.StringOutput)
}

func (o UserUserAddressOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v UserUserAddress) string { return v.State }).(pulumi.StringOutput)
}

func (o UserUserAddressOutput) Zipcode() pulumi.StringOutput {
	return o.ApplyT(func(v UserUserAddress) string { return v.Zipcode }).(pulumi.StringOutput)
}

type UserUserAddressArrayOutput struct{ *pulumi.OutputState }

func (UserUserAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserUserAddress)(nil)).Elem()
}

func (o UserUserAddressArrayOutput) ToUserUserAddressArrayOutput() UserUserAddressArrayOutput {
	return o
}

func (o UserUserAddressArrayOutput) ToUserUserAddressArrayOutputWithContext(ctx context.Context) UserUserAddressArrayOutput {
	return o
}

func (o UserUserAddressArrayOutput) Index(i pulumi.IntInput) UserUserAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserUserAddress {
		return vs[0].([]UserUserAddress)[vs[1].(int)]
	}).(UserUserAddressOutput)
}

type GetEscalationRepeat struct {
	CloseAlertAfterAll   *bool `pulumi:"closeAlertAfterAll"`
	Count                *int  `pulumi:"count"`
	ResetRecipientStates *bool `pulumi:"resetRecipientStates"`
	WaitInterval         *int  `pulumi:"waitInterval"`
}

// GetEscalationRepeatInput is an input type that accepts GetEscalationRepeatArgs and GetEscalationRepeatOutput values.
// You can construct a concrete instance of `GetEscalationRepeatInput` via:
//
//	GetEscalationRepeatArgs{...}
type GetEscalationRepeatInput interface {
	pulumi.Input

	ToGetEscalationRepeatOutput() GetEscalationRepeatOutput
	ToGetEscalationRepeatOutputWithContext(context.Context) GetEscalationRepeatOutput
}

type GetEscalationRepeatArgs struct {
	CloseAlertAfterAll   pulumi.BoolPtrInput `pulumi:"closeAlertAfterAll"`
	Count                pulumi.IntPtrInput  `pulumi:"count"`
	ResetRecipientStates pulumi.BoolPtrInput `pulumi:"resetRecipientStates"`
	WaitInterval         pulumi.IntPtrInput  `pulumi:"waitInterval"`
}

func (GetEscalationRepeatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEscalationRepeat)(nil)).Elem()
}

func (i GetEscalationRepeatArgs) ToGetEscalationRepeatOutput() GetEscalationRepeatOutput {
	return i.ToGetEscalationRepeatOutputWithContext(context.Background())
}

func (i GetEscalationRepeatArgs) ToGetEscalationRepeatOutputWithContext(ctx context.Context) GetEscalationRepeatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEscalationRepeatOutput)
}

// GetEscalationRepeatArrayInput is an input type that accepts GetEscalationRepeatArray and GetEscalationRepeatArrayOutput values.
// You can construct a concrete instance of `GetEscalationRepeatArrayInput` via:
//
//	GetEscalationRepeatArray{ GetEscalationRepeatArgs{...} }
type GetEscalationRepeatArrayInput interface {
	pulumi.Input

	ToGetEscalationRepeatArrayOutput() GetEscalationRepeatArrayOutput
	ToGetEscalationRepeatArrayOutputWithContext(context.Context) GetEscalationRepeatArrayOutput
}

type GetEscalationRepeatArray []GetEscalationRepeatInput

func (GetEscalationRepeatArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEscalationRepeat)(nil)).Elem()
}

func (i GetEscalationRepeatArray) ToGetEscalationRepeatArrayOutput() GetEscalationRepeatArrayOutput {
	return i.ToGetEscalationRepeatArrayOutputWithContext(context.Background())
}

func (i GetEscalationRepeatArray) ToGetEscalationRepeatArrayOutputWithContext(ctx context.Context) GetEscalationRepeatArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEscalationRepeatArrayOutput)
}

type GetEscalationRepeatOutput struct{ *pulumi.OutputState }

func (GetEscalationRepeatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEscalationRepeat)(nil)).Elem()
}

func (o GetEscalationRepeatOutput) ToGetEscalationRepeatOutput() GetEscalationRepeatOutput {
	return o
}

func (o GetEscalationRepeatOutput) ToGetEscalationRepeatOutputWithContext(ctx context.Context) GetEscalationRepeatOutput {
	return o
}

func (o GetEscalationRepeatOutput) CloseAlertAfterAll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetEscalationRepeat) *bool { return v.CloseAlertAfterAll }).(pulumi.BoolPtrOutput)
}

func (o GetEscalationRepeatOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetEscalationRepeat) *int { return v.Count }).(pulumi.IntPtrOutput)
}

func (o GetEscalationRepeatOutput) ResetRecipientStates() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetEscalationRepeat) *bool { return v.ResetRecipientStates }).(pulumi.BoolPtrOutput)
}

func (o GetEscalationRepeatOutput) WaitInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetEscalationRepeat) *int { return v.WaitInterval }).(pulumi.IntPtrOutput)
}

type GetEscalationRepeatArrayOutput struct{ *pulumi.OutputState }

func (GetEscalationRepeatArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEscalationRepeat)(nil)).Elem()
}

func (o GetEscalationRepeatArrayOutput) ToGetEscalationRepeatArrayOutput() GetEscalationRepeatArrayOutput {
	return o
}

func (o GetEscalationRepeatArrayOutput) ToGetEscalationRepeatArrayOutputWithContext(ctx context.Context) GetEscalationRepeatArrayOutput {
	return o
}

func (o GetEscalationRepeatArrayOutput) Index(i pulumi.IntInput) GetEscalationRepeatOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetEscalationRepeat {
		return vs[0].([]GetEscalationRepeat)[vs[1].(int)]
	}).(GetEscalationRepeatOutput)
}

type GetEscalationRule struct {
	Condition  string                       `pulumi:"condition"`
	Delay      int                          `pulumi:"delay"`
	NotifyType string                       `pulumi:"notifyType"`
	Recipients []GetEscalationRuleRecipient `pulumi:"recipients"`
}

// GetEscalationRuleInput is an input type that accepts GetEscalationRuleArgs and GetEscalationRuleOutput values.
// You can construct a concrete instance of `GetEscalationRuleInput` via:
//
//	GetEscalationRuleArgs{...}
type GetEscalationRuleInput interface {
	pulumi.Input

	ToGetEscalationRuleOutput() GetEscalationRuleOutput
	ToGetEscalationRuleOutputWithContext(context.Context) GetEscalationRuleOutput
}

type GetEscalationRuleArgs struct {
	Condition  pulumi.StringInput                   `pulumi:"condition"`
	Delay      pulumi.IntInput                      `pulumi:"delay"`
	NotifyType pulumi.StringInput                   `pulumi:"notifyType"`
	Recipients GetEscalationRuleRecipientArrayInput `pulumi:"recipients"`
}

func (GetEscalationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEscalationRule)(nil)).Elem()
}

func (i GetEscalationRuleArgs) ToGetEscalationRuleOutput() GetEscalationRuleOutput {
	return i.ToGetEscalationRuleOutputWithContext(context.Background())
}

func (i GetEscalationRuleArgs) ToGetEscalationRuleOutputWithContext(ctx context.Context) GetEscalationRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEscalationRuleOutput)
}

// GetEscalationRuleArrayInput is an input type that accepts GetEscalationRuleArray and GetEscalationRuleArrayOutput values.
// You can construct a concrete instance of `GetEscalationRuleArrayInput` via:
//
//	GetEscalationRuleArray{ GetEscalationRuleArgs{...} }
type GetEscalationRuleArrayInput interface {
	pulumi.Input

	ToGetEscalationRuleArrayOutput() GetEscalationRuleArrayOutput
	ToGetEscalationRuleArrayOutputWithContext(context.Context) GetEscalationRuleArrayOutput
}

type GetEscalationRuleArray []GetEscalationRuleInput

func (GetEscalationRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEscalationRule)(nil)).Elem()
}

func (i GetEscalationRuleArray) ToGetEscalationRuleArrayOutput() GetEscalationRuleArrayOutput {
	return i.ToGetEscalationRuleArrayOutputWithContext(context.Background())
}

func (i GetEscalationRuleArray) ToGetEscalationRuleArrayOutputWithContext(ctx context.Context) GetEscalationRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEscalationRuleArrayOutput)
}

type GetEscalationRuleOutput struct{ *pulumi.OutputState }

func (GetEscalationRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEscalationRule)(nil)).Elem()
}

func (o GetEscalationRuleOutput) ToGetEscalationRuleOutput() GetEscalationRuleOutput {
	return o
}

func (o GetEscalationRuleOutput) ToGetEscalationRuleOutputWithContext(ctx context.Context) GetEscalationRuleOutput {
	return o
}

func (o GetEscalationRuleOutput) Condition() pulumi.StringOutput {
	return o.ApplyT(func(v GetEscalationRule) string { return v.Condition }).(pulumi.StringOutput)
}

func (o GetEscalationRuleOutput) Delay() pulumi.IntOutput {
	return o.ApplyT(func(v GetEscalationRule) int { return v.Delay }).(pulumi.IntOutput)
}

func (o GetEscalationRuleOutput) NotifyType() pulumi.StringOutput {
	return o.ApplyT(func(v GetEscalationRule) string { return v.NotifyType }).(pulumi.StringOutput)
}

func (o GetEscalationRuleOutput) Recipients() GetEscalationRuleRecipientArrayOutput {
	return o.ApplyT(func(v GetEscalationRule) []GetEscalationRuleRecipient { return v.Recipients }).(GetEscalationRuleRecipientArrayOutput)
}

type GetEscalationRuleArrayOutput struct{ *pulumi.OutputState }

func (GetEscalationRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEscalationRule)(nil)).Elem()
}

func (o GetEscalationRuleArrayOutput) ToGetEscalationRuleArrayOutput() GetEscalationRuleArrayOutput {
	return o
}

func (o GetEscalationRuleArrayOutput) ToGetEscalationRuleArrayOutputWithContext(ctx context.Context) GetEscalationRuleArrayOutput {
	return o
}

func (o GetEscalationRuleArrayOutput) Index(i pulumi.IntInput) GetEscalationRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetEscalationRule {
		return vs[0].([]GetEscalationRule)[vs[1].(int)]
	}).(GetEscalationRuleOutput)
}

type GetEscalationRuleRecipient struct {
	// The ID of the Opsgenie Escalation.
	Id   *string `pulumi:"id"`
	Type *string `pulumi:"type"`
}

// GetEscalationRuleRecipientInput is an input type that accepts GetEscalationRuleRecipientArgs and GetEscalationRuleRecipientOutput values.
// You can construct a concrete instance of `GetEscalationRuleRecipientInput` via:
//
//	GetEscalationRuleRecipientArgs{...}
type GetEscalationRuleRecipientInput interface {
	pulumi.Input

	ToGetEscalationRuleRecipientOutput() GetEscalationRuleRecipientOutput
	ToGetEscalationRuleRecipientOutputWithContext(context.Context) GetEscalationRuleRecipientOutput
}

type GetEscalationRuleRecipientArgs struct {
	// The ID of the Opsgenie Escalation.
	Id   pulumi.StringPtrInput `pulumi:"id"`
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (GetEscalationRuleRecipientArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEscalationRuleRecipient)(nil)).Elem()
}

func (i GetEscalationRuleRecipientArgs) ToGetEscalationRuleRecipientOutput() GetEscalationRuleRecipientOutput {
	return i.ToGetEscalationRuleRecipientOutputWithContext(context.Background())
}

func (i GetEscalationRuleRecipientArgs) ToGetEscalationRuleRecipientOutputWithContext(ctx context.Context) GetEscalationRuleRecipientOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEscalationRuleRecipientOutput)
}

// GetEscalationRuleRecipientArrayInput is an input type that accepts GetEscalationRuleRecipientArray and GetEscalationRuleRecipientArrayOutput values.
// You can construct a concrete instance of `GetEscalationRuleRecipientArrayInput` via:
//
//	GetEscalationRuleRecipientArray{ GetEscalationRuleRecipientArgs{...} }
type GetEscalationRuleRecipientArrayInput interface {
	pulumi.Input

	ToGetEscalationRuleRecipientArrayOutput() GetEscalationRuleRecipientArrayOutput
	ToGetEscalationRuleRecipientArrayOutputWithContext(context.Context) GetEscalationRuleRecipientArrayOutput
}

type GetEscalationRuleRecipientArray []GetEscalationRuleRecipientInput

func (GetEscalationRuleRecipientArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEscalationRuleRecipient)(nil)).Elem()
}

func (i GetEscalationRuleRecipientArray) ToGetEscalationRuleRecipientArrayOutput() GetEscalationRuleRecipientArrayOutput {
	return i.ToGetEscalationRuleRecipientArrayOutputWithContext(context.Background())
}

func (i GetEscalationRuleRecipientArray) ToGetEscalationRuleRecipientArrayOutputWithContext(ctx context.Context) GetEscalationRuleRecipientArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEscalationRuleRecipientArrayOutput)
}

type GetEscalationRuleRecipientOutput struct{ *pulumi.OutputState }

func (GetEscalationRuleRecipientOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEscalationRuleRecipient)(nil)).Elem()
}

func (o GetEscalationRuleRecipientOutput) ToGetEscalationRuleRecipientOutput() GetEscalationRuleRecipientOutput {
	return o
}

func (o GetEscalationRuleRecipientOutput) ToGetEscalationRuleRecipientOutputWithContext(ctx context.Context) GetEscalationRuleRecipientOutput {
	return o
}

// The ID of the Opsgenie Escalation.
func (o GetEscalationRuleRecipientOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetEscalationRuleRecipient) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o GetEscalationRuleRecipientOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetEscalationRuleRecipient) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type GetEscalationRuleRecipientArrayOutput struct{ *pulumi.OutputState }

func (GetEscalationRuleRecipientArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEscalationRuleRecipient)(nil)).Elem()
}

func (o GetEscalationRuleRecipientArrayOutput) ToGetEscalationRuleRecipientArrayOutput() GetEscalationRuleRecipientArrayOutput {
	return o
}

func (o GetEscalationRuleRecipientArrayOutput) ToGetEscalationRuleRecipientArrayOutputWithContext(ctx context.Context) GetEscalationRuleRecipientArrayOutput {
	return o
}

func (o GetEscalationRuleRecipientArrayOutput) Index(i pulumi.IntInput) GetEscalationRuleRecipientOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetEscalationRuleRecipient {
		return vs[0].([]GetEscalationRuleRecipient)[vs[1].(int)]
	}).(GetEscalationRuleRecipientOutput)
}

type GetTeamMember struct {
	// The ID of the Opsgenie Team.
	Id       *string `pulumi:"id"`
	Role     *string `pulumi:"role"`
	Username *string `pulumi:"username"`
}

// GetTeamMemberInput is an input type that accepts GetTeamMemberArgs and GetTeamMemberOutput values.
// You can construct a concrete instance of `GetTeamMemberInput` via:
//
//	GetTeamMemberArgs{...}
type GetTeamMemberInput interface {
	pulumi.Input

	ToGetTeamMemberOutput() GetTeamMemberOutput
	ToGetTeamMemberOutputWithContext(context.Context) GetTeamMemberOutput
}

type GetTeamMemberArgs struct {
	// The ID of the Opsgenie Team.
	Id       pulumi.StringPtrInput `pulumi:"id"`
	Role     pulumi.StringPtrInput `pulumi:"role"`
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GetTeamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTeamMember)(nil)).Elem()
}

func (i GetTeamMemberArgs) ToGetTeamMemberOutput() GetTeamMemberOutput {
	return i.ToGetTeamMemberOutputWithContext(context.Background())
}

func (i GetTeamMemberArgs) ToGetTeamMemberOutputWithContext(ctx context.Context) GetTeamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTeamMemberOutput)
}

// GetTeamMemberArrayInput is an input type that accepts GetTeamMemberArray and GetTeamMemberArrayOutput values.
// You can construct a concrete instance of `GetTeamMemberArrayInput` via:
//
//	GetTeamMemberArray{ GetTeamMemberArgs{...} }
type GetTeamMemberArrayInput interface {
	pulumi.Input

	ToGetTeamMemberArrayOutput() GetTeamMemberArrayOutput
	ToGetTeamMemberArrayOutputWithContext(context.Context) GetTeamMemberArrayOutput
}

type GetTeamMemberArray []GetTeamMemberInput

func (GetTeamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTeamMember)(nil)).Elem()
}

func (i GetTeamMemberArray) ToGetTeamMemberArrayOutput() GetTeamMemberArrayOutput {
	return i.ToGetTeamMemberArrayOutputWithContext(context.Background())
}

func (i GetTeamMemberArray) ToGetTeamMemberArrayOutputWithContext(ctx context.Context) GetTeamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTeamMemberArrayOutput)
}

type GetTeamMemberOutput struct{ *pulumi.OutputState }

func (GetTeamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTeamMember)(nil)).Elem()
}

func (o GetTeamMemberOutput) ToGetTeamMemberOutput() GetTeamMemberOutput {
	return o
}

func (o GetTeamMemberOutput) ToGetTeamMemberOutputWithContext(ctx context.Context) GetTeamMemberOutput {
	return o
}

// The ID of the Opsgenie Team.
func (o GetTeamMemberOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTeamMember) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o GetTeamMemberOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTeamMember) *string { return v.Role }).(pulumi.StringPtrOutput)
}

func (o GetTeamMemberOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTeamMember) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GetTeamMemberArrayOutput struct{ *pulumi.OutputState }

func (GetTeamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTeamMember)(nil)).Elem()
}

func (o GetTeamMemberArrayOutput) ToGetTeamMemberArrayOutput() GetTeamMemberArrayOutput {
	return o
}

func (o GetTeamMemberArrayOutput) ToGetTeamMemberArrayOutputWithContext(ctx context.Context) GetTeamMemberArrayOutput {
	return o
}

func (o GetTeamMemberArrayOutput) Index(i pulumi.IntInput) GetTeamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTeamMember {
		return vs[0].([]GetTeamMember)[vs[1].(int)]
	}).(GetTeamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AlertPolicyFilterInput)(nil)).Elem(), AlertPolicyFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertPolicyFilterArrayInput)(nil)).Elem(), AlertPolicyFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertPolicyFilterConditionInput)(nil)).Elem(), AlertPolicyFilterConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertPolicyFilterConditionArrayInput)(nil)).Elem(), AlertPolicyFilterConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertPolicyResponderInput)(nil)).Elem(), AlertPolicyResponderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertPolicyResponderArrayInput)(nil)).Elem(), AlertPolicyResponderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertPolicyTimeRestrictionInput)(nil)).Elem(), AlertPolicyTimeRestrictionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertPolicyTimeRestrictionArrayInput)(nil)).Elem(), AlertPolicyTimeRestrictionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertPolicyTimeRestrictionRestrictionInput)(nil)).Elem(), AlertPolicyTimeRestrictionRestrictionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertPolicyTimeRestrictionRestrictionArrayInput)(nil)).Elem(), AlertPolicyTimeRestrictionRestrictionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertPolicyTimeRestrictionRestrictionListInput)(nil)).Elem(), AlertPolicyTimeRestrictionRestrictionListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertPolicyTimeRestrictionRestrictionListArrayInput)(nil)).Elem(), AlertPolicyTimeRestrictionRestrictionListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiIntegrationResponderInput)(nil)).Elem(), ApiIntegrationResponderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiIntegrationResponderArrayInput)(nil)).Elem(), ApiIntegrationResponderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmailIntegrationResponderInput)(nil)).Elem(), EmailIntegrationResponderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EmailIntegrationResponderArrayInput)(nil)).Elem(), EmailIntegrationResponderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EscalationRepeatInput)(nil)).Elem(), EscalationRepeatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EscalationRepeatArrayInput)(nil)).Elem(), EscalationRepeatArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EscalationRuleInput)(nil)).Elem(), EscalationRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EscalationRuleArrayInput)(nil)).Elem(), EscalationRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EscalationRuleRecipientInput)(nil)).Elem(), EscalationRuleRecipientArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EscalationRuleRecipientArrayInput)(nil)).Elem(), EscalationRuleRecipientArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IncidentTemplateStakeholderPropertyInput)(nil)).Elem(), IncidentTemplateStakeholderPropertyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IncidentTemplateStakeholderPropertyArrayInput)(nil)).Elem(), IncidentTemplateStakeholderPropertyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationActionAcknowledgeInput)(nil)).Elem(), IntegrationActionAcknowledgeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationActionAcknowledgeArrayInput)(nil)).Elem(), IntegrationActionAcknowledgeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationActionAcknowledgeFilterInput)(nil)).Elem(), IntegrationActionAcknowledgeFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationActionAcknowledgeFilterArrayInput)(nil)).Elem(), IntegrationActionAcknowledgeFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationActionAcknowledgeFilterConditionInput)(nil)).Elem(), IntegrationActionAcknowledgeFilterConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationActionAcknowledgeFilterConditionArrayInput)(nil)).Elem(), IntegrationActionAcknowledgeFilterConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationActionAddNoteInput)(nil)).Elem(), IntegrationActionAddNoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationActionAddNoteArrayInput)(nil)).Elem(), IntegrationActionAddNoteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationActionAddNoteFilterInput)(nil)).Elem(), IntegrationActionAddNoteFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationActionAddNoteFilterArrayInput)(nil)).Elem(), IntegrationActionAddNoteFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationActionAddNoteFilterConditionInput)(nil)).Elem(), IntegrationActionAddNoteFilterConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationActionAddNoteFilterConditionArrayInput)(nil)).Elem(), IntegrationActionAddNoteFilterConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationActionCloseInput)(nil)).Elem(), IntegrationActionCloseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationActionCloseArrayInput)(nil)).Elem(), IntegrationActionCloseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationActionCloseFilterInput)(nil)).Elem(), IntegrationActionCloseFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationActionCloseFilterArrayInput)(nil)).Elem(), IntegrationActionCloseFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationActionCloseFilterConditionInput)(nil)).Elem(), IntegrationActionCloseFilterConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationActionCloseFilterConditionArrayInput)(nil)).Elem(), IntegrationActionCloseFilterConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationActionCreateInput)(nil)).Elem(), IntegrationActionCreateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationActionCreateArrayInput)(nil)).Elem(), IntegrationActionCreateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationActionCreateFilterInput)(nil)).Elem(), IntegrationActionCreateFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationActionCreateFilterArrayInput)(nil)).Elem(), IntegrationActionCreateFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationActionCreateFilterConditionInput)(nil)).Elem(), IntegrationActionCreateFilterConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationActionCreateFilterConditionArrayInput)(nil)).Elem(), IntegrationActionCreateFilterConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationActionCreateResponderInput)(nil)).Elem(), IntegrationActionCreateResponderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationActionCreateResponderArrayInput)(nil)).Elem(), IntegrationActionCreateResponderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationActionIgnoreInput)(nil)).Elem(), IntegrationActionIgnoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationActionIgnoreArrayInput)(nil)).Elem(), IntegrationActionIgnoreArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationActionIgnoreFilterInput)(nil)).Elem(), IntegrationActionIgnoreFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationActionIgnoreFilterArrayInput)(nil)).Elem(), IntegrationActionIgnoreFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationActionIgnoreFilterConditionInput)(nil)).Elem(), IntegrationActionIgnoreFilterConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntegrationActionIgnoreFilterConditionArrayInput)(nil)).Elem(), IntegrationActionIgnoreFilterConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaintenanceRuleInput)(nil)).Elem(), MaintenanceRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaintenanceRuleArrayInput)(nil)).Elem(), MaintenanceRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaintenanceRuleEntityInput)(nil)).Elem(), MaintenanceRuleEntityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaintenanceRuleEntityArrayInput)(nil)).Elem(), MaintenanceRuleEntityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaintenanceTimeInput)(nil)).Elem(), MaintenanceTimeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaintenanceTimeArrayInput)(nil)).Elem(), MaintenanceTimeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyAutoCloseActionInput)(nil)).Elem(), NotificationPolicyAutoCloseActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyAutoCloseActionArrayInput)(nil)).Elem(), NotificationPolicyAutoCloseActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyAutoCloseActionDurationInput)(nil)).Elem(), NotificationPolicyAutoCloseActionDurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyAutoCloseActionDurationArrayInput)(nil)).Elem(), NotificationPolicyAutoCloseActionDurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyAutoRestartActionInput)(nil)).Elem(), NotificationPolicyAutoRestartActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyAutoRestartActionArrayInput)(nil)).Elem(), NotificationPolicyAutoRestartActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyAutoRestartActionDurationInput)(nil)).Elem(), NotificationPolicyAutoRestartActionDurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyAutoRestartActionDurationArrayInput)(nil)).Elem(), NotificationPolicyAutoRestartActionDurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyDeDuplicationActionInput)(nil)).Elem(), NotificationPolicyDeDuplicationActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyDeDuplicationActionArrayInput)(nil)).Elem(), NotificationPolicyDeDuplicationActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyDeDuplicationActionDurationInput)(nil)).Elem(), NotificationPolicyDeDuplicationActionDurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyDeDuplicationActionDurationArrayInput)(nil)).Elem(), NotificationPolicyDeDuplicationActionDurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyDelayActionInput)(nil)).Elem(), NotificationPolicyDelayActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyDelayActionArrayInput)(nil)).Elem(), NotificationPolicyDelayActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyDelayActionDurationInput)(nil)).Elem(), NotificationPolicyDelayActionDurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyDelayActionDurationArrayInput)(nil)).Elem(), NotificationPolicyDelayActionDurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyFilterInput)(nil)).Elem(), NotificationPolicyFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyFilterArrayInput)(nil)).Elem(), NotificationPolicyFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyFilterConditionInput)(nil)).Elem(), NotificationPolicyFilterConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyFilterConditionArrayInput)(nil)).Elem(), NotificationPolicyFilterConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyTimeRestrictionInput)(nil)).Elem(), NotificationPolicyTimeRestrictionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyTimeRestrictionArrayInput)(nil)).Elem(), NotificationPolicyTimeRestrictionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyTimeRestrictionRestrictionInput)(nil)).Elem(), NotificationPolicyTimeRestrictionRestrictionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyTimeRestrictionRestrictionArrayInput)(nil)).Elem(), NotificationPolicyTimeRestrictionRestrictionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyTimeRestrictionRestrictionListInput)(nil)).Elem(), NotificationPolicyTimeRestrictionRestrictionListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyTimeRestrictionRestrictionListArrayInput)(nil)).Elem(), NotificationPolicyTimeRestrictionRestrictionListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationRuleCriteriaInput)(nil)).Elem(), NotificationRuleCriteriaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationRuleCriteriaArrayInput)(nil)).Elem(), NotificationRuleCriteriaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationRuleCriteriaConditionInput)(nil)).Elem(), NotificationRuleCriteriaConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationRuleCriteriaConditionArrayInput)(nil)).Elem(), NotificationRuleCriteriaConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationRuleRepeatInput)(nil)).Elem(), NotificationRuleRepeatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationRuleRepeatArrayInput)(nil)).Elem(), NotificationRuleRepeatArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationRuleScheduleInput)(nil)).Elem(), NotificationRuleScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationRuleScheduleArrayInput)(nil)).Elem(), NotificationRuleScheduleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationRuleStepInput)(nil)).Elem(), NotificationRuleStepArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationRuleStepArrayInput)(nil)).Elem(), NotificationRuleStepArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationRuleStepContactInput)(nil)).Elem(), NotificationRuleStepContactArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationRuleStepContactArrayInput)(nil)).Elem(), NotificationRuleStepContactArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationRuleTimeRestrictionInput)(nil)).Elem(), NotificationRuleTimeRestrictionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationRuleTimeRestrictionArrayInput)(nil)).Elem(), NotificationRuleTimeRestrictionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationRuleTimeRestrictionRestrictionInput)(nil)).Elem(), NotificationRuleTimeRestrictionRestrictionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationRuleTimeRestrictionRestrictionArrayInput)(nil)).Elem(), NotificationRuleTimeRestrictionRestrictionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleRotationParticipantInput)(nil)).Elem(), ScheduleRotationParticipantArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleRotationParticipantArrayInput)(nil)).Elem(), ScheduleRotationParticipantArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleRotationTimeRestrictionInput)(nil)).Elem(), ScheduleRotationTimeRestrictionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleRotationTimeRestrictionArrayInput)(nil)).Elem(), ScheduleRotationTimeRestrictionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleRotationTimeRestrictionRestrictionInput)(nil)).Elem(), ScheduleRotationTimeRestrictionRestrictionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleRotationTimeRestrictionRestrictionArrayInput)(nil)).Elem(), ScheduleRotationTimeRestrictionRestrictionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleRotationTimeRestrictionRestrictionListInput)(nil)).Elem(), ScheduleRotationTimeRestrictionRestrictionListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleRotationTimeRestrictionRestrictionListArrayInput)(nil)).Elem(), ScheduleRotationTimeRestrictionRestrictionListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceIncidentRuleIncidentRuleInput)(nil)).Elem(), ServiceIncidentRuleIncidentRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceIncidentRuleIncidentRuleArrayInput)(nil)).Elem(), ServiceIncidentRuleIncidentRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceIncidentRuleIncidentRuleConditionInput)(nil)).Elem(), ServiceIncidentRuleIncidentRuleConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceIncidentRuleIncidentRuleConditionArrayInput)(nil)).Elem(), ServiceIncidentRuleIncidentRuleConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceIncidentRuleIncidentRuleIncidentPropertyInput)(nil)).Elem(), ServiceIncidentRuleIncidentRuleIncidentPropertyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceIncidentRuleIncidentRuleIncidentPropertyArrayInput)(nil)).Elem(), ServiceIncidentRuleIncidentRuleIncidentPropertyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyInput)(nil)).Elem(), ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyArrayInput)(nil)).Elem(), ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamMemberInput)(nil)).Elem(), TeamMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamMemberArrayInput)(nil)).Elem(), TeamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamRoutingRuleCriteriaInput)(nil)).Elem(), TeamRoutingRuleCriteriaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamRoutingRuleCriteriaArrayInput)(nil)).Elem(), TeamRoutingRuleCriteriaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamRoutingRuleCriteriaConditionInput)(nil)).Elem(), TeamRoutingRuleCriteriaConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamRoutingRuleCriteriaConditionArrayInput)(nil)).Elem(), TeamRoutingRuleCriteriaConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamRoutingRuleNotifyInput)(nil)).Elem(), TeamRoutingRuleNotifyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamRoutingRuleNotifyArrayInput)(nil)).Elem(), TeamRoutingRuleNotifyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamRoutingRuleTimeRestrictionInput)(nil)).Elem(), TeamRoutingRuleTimeRestrictionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamRoutingRuleTimeRestrictionArrayInput)(nil)).Elem(), TeamRoutingRuleTimeRestrictionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamRoutingRuleTimeRestrictionRestrictionInput)(nil)).Elem(), TeamRoutingRuleTimeRestrictionRestrictionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamRoutingRuleTimeRestrictionRestrictionArrayInput)(nil)).Elem(), TeamRoutingRuleTimeRestrictionRestrictionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamRoutingRuleTimeRestrictionRestrictionListInput)(nil)).Elem(), TeamRoutingRuleTimeRestrictionRestrictionListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamRoutingRuleTimeRestrictionRestrictionListArrayInput)(nil)).Elem(), TeamRoutingRuleTimeRestrictionRestrictionListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserUserAddressInput)(nil)).Elem(), UserUserAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserUserAddressArrayInput)(nil)).Elem(), UserUserAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEscalationRepeatInput)(nil)).Elem(), GetEscalationRepeatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEscalationRepeatArrayInput)(nil)).Elem(), GetEscalationRepeatArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEscalationRuleInput)(nil)).Elem(), GetEscalationRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEscalationRuleArrayInput)(nil)).Elem(), GetEscalationRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEscalationRuleRecipientInput)(nil)).Elem(), GetEscalationRuleRecipientArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEscalationRuleRecipientArrayInput)(nil)).Elem(), GetEscalationRuleRecipientArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTeamMemberInput)(nil)).Elem(), GetTeamMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTeamMemberArrayInput)(nil)).Elem(), GetTeamMemberArray{})
	pulumi.RegisterOutputType(AlertPolicyFilterOutput{})
	pulumi.RegisterOutputType(AlertPolicyFilterArrayOutput{})
	pulumi.RegisterOutputType(AlertPolicyFilterConditionOutput{})
	pulumi.RegisterOutputType(AlertPolicyFilterConditionArrayOutput{})
	pulumi.RegisterOutputType(AlertPolicyResponderOutput{})
	pulumi.RegisterOutputType(AlertPolicyResponderArrayOutput{})
	pulumi.RegisterOutputType(AlertPolicyTimeRestrictionOutput{})
	pulumi.RegisterOutputType(AlertPolicyTimeRestrictionArrayOutput{})
	pulumi.RegisterOutputType(AlertPolicyTimeRestrictionRestrictionOutput{})
	pulumi.RegisterOutputType(AlertPolicyTimeRestrictionRestrictionArrayOutput{})
	pulumi.RegisterOutputType(AlertPolicyTimeRestrictionRestrictionListOutput{})
	pulumi.RegisterOutputType(AlertPolicyTimeRestrictionRestrictionListArrayOutput{})
	pulumi.RegisterOutputType(ApiIntegrationResponderOutput{})
	pulumi.RegisterOutputType(ApiIntegrationResponderArrayOutput{})
	pulumi.RegisterOutputType(EmailIntegrationResponderOutput{})
	pulumi.RegisterOutputType(EmailIntegrationResponderArrayOutput{})
	pulumi.RegisterOutputType(EscalationRepeatOutput{})
	pulumi.RegisterOutputType(EscalationRepeatArrayOutput{})
	pulumi.RegisterOutputType(EscalationRuleOutput{})
	pulumi.RegisterOutputType(EscalationRuleArrayOutput{})
	pulumi.RegisterOutputType(EscalationRuleRecipientOutput{})
	pulumi.RegisterOutputType(EscalationRuleRecipientArrayOutput{})
	pulumi.RegisterOutputType(IncidentTemplateStakeholderPropertyOutput{})
	pulumi.RegisterOutputType(IncidentTemplateStakeholderPropertyArrayOutput{})
	pulumi.RegisterOutputType(IntegrationActionAcknowledgeOutput{})
	pulumi.RegisterOutputType(IntegrationActionAcknowledgeArrayOutput{})
	pulumi.RegisterOutputType(IntegrationActionAcknowledgeFilterOutput{})
	pulumi.RegisterOutputType(IntegrationActionAcknowledgeFilterArrayOutput{})
	pulumi.RegisterOutputType(IntegrationActionAcknowledgeFilterConditionOutput{})
	pulumi.RegisterOutputType(IntegrationActionAcknowledgeFilterConditionArrayOutput{})
	pulumi.RegisterOutputType(IntegrationActionAddNoteOutput{})
	pulumi.RegisterOutputType(IntegrationActionAddNoteArrayOutput{})
	pulumi.RegisterOutputType(IntegrationActionAddNoteFilterOutput{})
	pulumi.RegisterOutputType(IntegrationActionAddNoteFilterArrayOutput{})
	pulumi.RegisterOutputType(IntegrationActionAddNoteFilterConditionOutput{})
	pulumi.RegisterOutputType(IntegrationActionAddNoteFilterConditionArrayOutput{})
	pulumi.RegisterOutputType(IntegrationActionCloseOutput{})
	pulumi.RegisterOutputType(IntegrationActionCloseArrayOutput{})
	pulumi.RegisterOutputType(IntegrationActionCloseFilterOutput{})
	pulumi.RegisterOutputType(IntegrationActionCloseFilterArrayOutput{})
	pulumi.RegisterOutputType(IntegrationActionCloseFilterConditionOutput{})
	pulumi.RegisterOutputType(IntegrationActionCloseFilterConditionArrayOutput{})
	pulumi.RegisterOutputType(IntegrationActionCreateOutput{})
	pulumi.RegisterOutputType(IntegrationActionCreateArrayOutput{})
	pulumi.RegisterOutputType(IntegrationActionCreateFilterOutput{})
	pulumi.RegisterOutputType(IntegrationActionCreateFilterArrayOutput{})
	pulumi.RegisterOutputType(IntegrationActionCreateFilterConditionOutput{})
	pulumi.RegisterOutputType(IntegrationActionCreateFilterConditionArrayOutput{})
	pulumi.RegisterOutputType(IntegrationActionCreateResponderOutput{})
	pulumi.RegisterOutputType(IntegrationActionCreateResponderArrayOutput{})
	pulumi.RegisterOutputType(IntegrationActionIgnoreOutput{})
	pulumi.RegisterOutputType(IntegrationActionIgnoreArrayOutput{})
	pulumi.RegisterOutputType(IntegrationActionIgnoreFilterOutput{})
	pulumi.RegisterOutputType(IntegrationActionIgnoreFilterArrayOutput{})
	pulumi.RegisterOutputType(IntegrationActionIgnoreFilterConditionOutput{})
	pulumi.RegisterOutputType(IntegrationActionIgnoreFilterConditionArrayOutput{})
	pulumi.RegisterOutputType(MaintenanceRuleOutput{})
	pulumi.RegisterOutputType(MaintenanceRuleArrayOutput{})
	pulumi.RegisterOutputType(MaintenanceRuleEntityOutput{})
	pulumi.RegisterOutputType(MaintenanceRuleEntityArrayOutput{})
	pulumi.RegisterOutputType(MaintenanceTimeOutput{})
	pulumi.RegisterOutputType(MaintenanceTimeArrayOutput{})
	pulumi.RegisterOutputType(NotificationPolicyAutoCloseActionOutput{})
	pulumi.RegisterOutputType(NotificationPolicyAutoCloseActionArrayOutput{})
	pulumi.RegisterOutputType(NotificationPolicyAutoCloseActionDurationOutput{})
	pulumi.RegisterOutputType(NotificationPolicyAutoCloseActionDurationArrayOutput{})
	pulumi.RegisterOutputType(NotificationPolicyAutoRestartActionOutput{})
	pulumi.RegisterOutputType(NotificationPolicyAutoRestartActionArrayOutput{})
	pulumi.RegisterOutputType(NotificationPolicyAutoRestartActionDurationOutput{})
	pulumi.RegisterOutputType(NotificationPolicyAutoRestartActionDurationArrayOutput{})
	pulumi.RegisterOutputType(NotificationPolicyDeDuplicationActionOutput{})
	pulumi.RegisterOutputType(NotificationPolicyDeDuplicationActionArrayOutput{})
	pulumi.RegisterOutputType(NotificationPolicyDeDuplicationActionDurationOutput{})
	pulumi.RegisterOutputType(NotificationPolicyDeDuplicationActionDurationArrayOutput{})
	pulumi.RegisterOutputType(NotificationPolicyDelayActionOutput{})
	pulumi.RegisterOutputType(NotificationPolicyDelayActionArrayOutput{})
	pulumi.RegisterOutputType(NotificationPolicyDelayActionDurationOutput{})
	pulumi.RegisterOutputType(NotificationPolicyDelayActionDurationArrayOutput{})
	pulumi.RegisterOutputType(NotificationPolicyFilterOutput{})
	pulumi.RegisterOutputType(NotificationPolicyFilterArrayOutput{})
	pulumi.RegisterOutputType(NotificationPolicyFilterConditionOutput{})
	pulumi.RegisterOutputType(NotificationPolicyFilterConditionArrayOutput{})
	pulumi.RegisterOutputType(NotificationPolicyTimeRestrictionOutput{})
	pulumi.RegisterOutputType(NotificationPolicyTimeRestrictionArrayOutput{})
	pulumi.RegisterOutputType(NotificationPolicyTimeRestrictionRestrictionOutput{})
	pulumi.RegisterOutputType(NotificationPolicyTimeRestrictionRestrictionArrayOutput{})
	pulumi.RegisterOutputType(NotificationPolicyTimeRestrictionRestrictionListOutput{})
	pulumi.RegisterOutputType(NotificationPolicyTimeRestrictionRestrictionListArrayOutput{})
	pulumi.RegisterOutputType(NotificationRuleCriteriaOutput{})
	pulumi.RegisterOutputType(NotificationRuleCriteriaArrayOutput{})
	pulumi.RegisterOutputType(NotificationRuleCriteriaConditionOutput{})
	pulumi.RegisterOutputType(NotificationRuleCriteriaConditionArrayOutput{})
	pulumi.RegisterOutputType(NotificationRuleRepeatOutput{})
	pulumi.RegisterOutputType(NotificationRuleRepeatArrayOutput{})
	pulumi.RegisterOutputType(NotificationRuleScheduleOutput{})
	pulumi.RegisterOutputType(NotificationRuleScheduleArrayOutput{})
	pulumi.RegisterOutputType(NotificationRuleStepOutput{})
	pulumi.RegisterOutputType(NotificationRuleStepArrayOutput{})
	pulumi.RegisterOutputType(NotificationRuleStepContactOutput{})
	pulumi.RegisterOutputType(NotificationRuleStepContactArrayOutput{})
	pulumi.RegisterOutputType(NotificationRuleTimeRestrictionOutput{})
	pulumi.RegisterOutputType(NotificationRuleTimeRestrictionArrayOutput{})
	pulumi.RegisterOutputType(NotificationRuleTimeRestrictionRestrictionOutput{})
	pulumi.RegisterOutputType(NotificationRuleTimeRestrictionRestrictionArrayOutput{})
	pulumi.RegisterOutputType(ScheduleRotationParticipantOutput{})
	pulumi.RegisterOutputType(ScheduleRotationParticipantArrayOutput{})
	pulumi.RegisterOutputType(ScheduleRotationTimeRestrictionOutput{})
	pulumi.RegisterOutputType(ScheduleRotationTimeRestrictionArrayOutput{})
	pulumi.RegisterOutputType(ScheduleRotationTimeRestrictionRestrictionOutput{})
	pulumi.RegisterOutputType(ScheduleRotationTimeRestrictionRestrictionArrayOutput{})
	pulumi.RegisterOutputType(ScheduleRotationTimeRestrictionRestrictionListOutput{})
	pulumi.RegisterOutputType(ScheduleRotationTimeRestrictionRestrictionListArrayOutput{})
	pulumi.RegisterOutputType(ServiceIncidentRuleIncidentRuleOutput{})
	pulumi.RegisterOutputType(ServiceIncidentRuleIncidentRuleArrayOutput{})
	pulumi.RegisterOutputType(ServiceIncidentRuleIncidentRuleConditionOutput{})
	pulumi.RegisterOutputType(ServiceIncidentRuleIncidentRuleConditionArrayOutput{})
	pulumi.RegisterOutputType(ServiceIncidentRuleIncidentRuleIncidentPropertyOutput{})
	pulumi.RegisterOutputType(ServiceIncidentRuleIncidentRuleIncidentPropertyArrayOutput{})
	pulumi.RegisterOutputType(ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyOutput{})
	pulumi.RegisterOutputType(ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderPropertyArrayOutput{})
	pulumi.RegisterOutputType(TeamMemberOutput{})
	pulumi.RegisterOutputType(TeamMemberArrayOutput{})
	pulumi.RegisterOutputType(TeamRoutingRuleCriteriaOutput{})
	pulumi.RegisterOutputType(TeamRoutingRuleCriteriaArrayOutput{})
	pulumi.RegisterOutputType(TeamRoutingRuleCriteriaConditionOutput{})
	pulumi.RegisterOutputType(TeamRoutingRuleCriteriaConditionArrayOutput{})
	pulumi.RegisterOutputType(TeamRoutingRuleNotifyOutput{})
	pulumi.RegisterOutputType(TeamRoutingRuleNotifyArrayOutput{})
	pulumi.RegisterOutputType(TeamRoutingRuleTimeRestrictionOutput{})
	pulumi.RegisterOutputType(TeamRoutingRuleTimeRestrictionArrayOutput{})
	pulumi.RegisterOutputType(TeamRoutingRuleTimeRestrictionRestrictionOutput{})
	pulumi.RegisterOutputType(TeamRoutingRuleTimeRestrictionRestrictionArrayOutput{})
	pulumi.RegisterOutputType(TeamRoutingRuleTimeRestrictionRestrictionListOutput{})
	pulumi.RegisterOutputType(TeamRoutingRuleTimeRestrictionRestrictionListArrayOutput{})
	pulumi.RegisterOutputType(UserUserAddressOutput{})
	pulumi.RegisterOutputType(UserUserAddressArrayOutput{})
	pulumi.RegisterOutputType(GetEscalationRepeatOutput{})
	pulumi.RegisterOutputType(GetEscalationRepeatArrayOutput{})
	pulumi.RegisterOutputType(GetEscalationRuleOutput{})
	pulumi.RegisterOutputType(GetEscalationRuleArrayOutput{})
	pulumi.RegisterOutputType(GetEscalationRuleRecipientOutput{})
	pulumi.RegisterOutputType(GetEscalationRuleRecipientArrayOutput{})
	pulumi.RegisterOutputType(GetTeamMemberOutput{})
	pulumi.RegisterOutputType(GetTeamMemberArrayOutput{})
}
