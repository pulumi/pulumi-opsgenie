// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package opsgenie

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a Service within Opsgenie.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-opsgenie/sdk/go/opsgenie/"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := opsgenie.NewTeam(ctx, "payment", &opsgenie.TeamArgs{
// 			Description: pulumi.String("This team deals with all the things"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = opsgenie.NewService(ctx, "this", &opsgenie.ServiceArgs{
// 			TeamId: pulumi.String(fmt.Sprintf("%v%v", "$", "opsgenie_team.payment.id")),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Teams can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import opsgenie:index/service:Service this 812be1a1-32c8-4666-a7fb-03ecc385106c`
// ```
type Service struct {
	pulumi.CustomResourceState

	// Description field of the service that is generally used to provide a detailed information about the service.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Name of the service. This field must not be longer than 100 characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// Team id of the service. This field must not be longer than 512 characters.
	TeamId pulumi.StringOutput `pulumi:"teamId"`
}

// NewService registers a new resource with the given unique name, arguments, and options.
func NewService(ctx *pulumi.Context,
	name string, args *ServiceArgs, opts ...pulumi.ResourceOption) (*Service, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TeamId == nil {
		return nil, errors.New("invalid value for required argument 'TeamId'")
	}
	var resource Service
	err := ctx.RegisterResource("opsgenie:index/service:Service", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetService gets an existing Service resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceState, opts ...pulumi.ResourceOption) (*Service, error) {
	var resource Service
	err := ctx.ReadResource("opsgenie:index/service:Service", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Service resources.
type serviceState struct {
	// Description field of the service that is generally used to provide a detailed information about the service.
	Description *string `pulumi:"description"`
	// Name of the service. This field must not be longer than 100 characters.
	Name *string `pulumi:"name"`
	// Team id of the service. This field must not be longer than 512 characters.
	TeamId *string `pulumi:"teamId"`
}

type ServiceState struct {
	// Description field of the service that is generally used to provide a detailed information about the service.
	Description pulumi.StringPtrInput
	// Name of the service. This field must not be longer than 100 characters.
	Name pulumi.StringPtrInput
	// Team id of the service. This field must not be longer than 512 characters.
	TeamId pulumi.StringPtrInput
}

func (ServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceState)(nil)).Elem()
}

type serviceArgs struct {
	// Description field of the service that is generally used to provide a detailed information about the service.
	Description *string `pulumi:"description"`
	// Name of the service. This field must not be longer than 100 characters.
	Name *string `pulumi:"name"`
	// Team id of the service. This field must not be longer than 512 characters.
	TeamId string `pulumi:"teamId"`
}

// The set of arguments for constructing a Service resource.
type ServiceArgs struct {
	// Description field of the service that is generally used to provide a detailed information about the service.
	Description pulumi.StringPtrInput
	// Name of the service. This field must not be longer than 100 characters.
	Name pulumi.StringPtrInput
	// Team id of the service. This field must not be longer than 512 characters.
	TeamId pulumi.StringInput
}

func (ServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceArgs)(nil)).Elem()
}

type ServiceInput interface {
	pulumi.Input

	ToServiceOutput() ServiceOutput
	ToServiceOutputWithContext(ctx context.Context) ServiceOutput
}

func (*Service) ElementType() reflect.Type {
	return reflect.TypeOf((*Service)(nil))
}

func (i *Service) ToServiceOutput() ServiceOutput {
	return i.ToServiceOutputWithContext(context.Background())
}

func (i *Service) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceOutput)
}

type ServiceOutput struct {
	*pulumi.OutputState
}

func (ServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Service)(nil))
}

func (o ServiceOutput) ToServiceOutput() ServiceOutput {
	return o
}

func (o ServiceOutput) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ServiceOutput{})
}
