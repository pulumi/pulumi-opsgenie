// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package opsgenie

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages an Escalation within Opsgenie.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-opsgenie/sdk/go/opsgenie"
// 	"github.com/pulumi/pulumi-opsgenie/sdk/go/opsgenie/"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := opsgenie.NewEscalation(ctx, "test", &opsgenie.EscalationArgs{
// 			Description: pulumi.String("test"),
// 			OwnerTeamId: pulumi.Any(opsgenie_team.Test.Id),
// 			Repeats: opsgenie.EscalationRepeatArray{
// 				&opsgenie.EscalationRepeatArgs{
// 					CloseAlertAfterAll:   pulumi.Bool(false),
// 					Count:                pulumi.Int(1),
// 					ResetRecipientStates: pulumi.Bool(true),
// 					WaitInterval:         pulumi.Int(10),
// 				},
// 			},
// 			Rules: opsgenie.EscalationRuleArray{
// 				&opsgenie.EscalationRuleArgs{
// 					Condition:  pulumi.String("if-not-acked"),
// 					Delay:      pulumi.Int(1),
// 					NotifyType: pulumi.String("default"),
// 					Recipients: opsgenie.EscalationRuleRecipientArray{
// 						&opsgenie.EscalationRuleRecipientArgs{
// 							Id:   pulumi.Any(opsgenie_user.Test.Id),
// 							Type: pulumi.String("user"),
// 						},
// 						&opsgenie.EscalationRuleRecipientArgs{
// 							Id:   pulumi.Any(opsgenie_team.Test.Id),
// 							Type: pulumi.String("team"),
// 						},
// 						&opsgenie.EscalationRuleRecipientArgs{
// 							Id:   pulumi.Any(opsgenie_schedule.Test.Id),
// 							Type: pulumi.String("schedule"),
// 						},
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Escalations can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import opsgenie:index/escalation:Escalation test 812be1a1-32c8-4666-a7fb-03ecc385106c`
// ```
type Escalation struct {
	pulumi.CustomResourceState

	// Description of the escalation.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Name of the escalation.
	Name pulumi.StringOutput `pulumi:"name"`
	// Owner team id of the escalation.
	OwnerTeamId pulumi.StringPtrOutput `pulumi:"ownerTeamId"`
	// Repeat preferences of the escalation including repeat interval, count, reverting acknowledge and seen states back and closing an alert automatically as soon as repeats are completed
	Repeats EscalationRepeatArrayOutput `pulumi:"repeats"`
	// List of the escalation rules.
	Rules EscalationRuleArrayOutput `pulumi:"rules"`
}

// NewEscalation registers a new resource with the given unique name, arguments, and options.
func NewEscalation(ctx *pulumi.Context,
	name string, args *EscalationArgs, opts ...pulumi.ResourceOption) (*Escalation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Rules == nil {
		return nil, errors.New("invalid value for required argument 'Rules'")
	}
	var resource Escalation
	err := ctx.RegisterResource("opsgenie:index/escalation:Escalation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEscalation gets an existing Escalation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEscalation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EscalationState, opts ...pulumi.ResourceOption) (*Escalation, error) {
	var resource Escalation
	err := ctx.ReadResource("opsgenie:index/escalation:Escalation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Escalation resources.
type escalationState struct {
	// Description of the escalation.
	Description *string `pulumi:"description"`
	// Name of the escalation.
	Name *string `pulumi:"name"`
	// Owner team id of the escalation.
	OwnerTeamId *string `pulumi:"ownerTeamId"`
	// Repeat preferences of the escalation including repeat interval, count, reverting acknowledge and seen states back and closing an alert automatically as soon as repeats are completed
	Repeats []EscalationRepeat `pulumi:"repeats"`
	// List of the escalation rules.
	Rules []EscalationRule `pulumi:"rules"`
}

type EscalationState struct {
	// Description of the escalation.
	Description pulumi.StringPtrInput
	// Name of the escalation.
	Name pulumi.StringPtrInput
	// Owner team id of the escalation.
	OwnerTeamId pulumi.StringPtrInput
	// Repeat preferences of the escalation including repeat interval, count, reverting acknowledge and seen states back and closing an alert automatically as soon as repeats are completed
	Repeats EscalationRepeatArrayInput
	// List of the escalation rules.
	Rules EscalationRuleArrayInput
}

func (EscalationState) ElementType() reflect.Type {
	return reflect.TypeOf((*escalationState)(nil)).Elem()
}

type escalationArgs struct {
	// Description of the escalation.
	Description *string `pulumi:"description"`
	// Name of the escalation.
	Name *string `pulumi:"name"`
	// Owner team id of the escalation.
	OwnerTeamId *string `pulumi:"ownerTeamId"`
	// Repeat preferences of the escalation including repeat interval, count, reverting acknowledge and seen states back and closing an alert automatically as soon as repeats are completed
	Repeats []EscalationRepeat `pulumi:"repeats"`
	// List of the escalation rules.
	Rules []EscalationRule `pulumi:"rules"`
}

// The set of arguments for constructing a Escalation resource.
type EscalationArgs struct {
	// Description of the escalation.
	Description pulumi.StringPtrInput
	// Name of the escalation.
	Name pulumi.StringPtrInput
	// Owner team id of the escalation.
	OwnerTeamId pulumi.StringPtrInput
	// Repeat preferences of the escalation including repeat interval, count, reverting acknowledge and seen states back and closing an alert automatically as soon as repeats are completed
	Repeats EscalationRepeatArrayInput
	// List of the escalation rules.
	Rules EscalationRuleArrayInput
}

func (EscalationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*escalationArgs)(nil)).Elem()
}

type EscalationInput interface {
	pulumi.Input

	ToEscalationOutput() EscalationOutput
	ToEscalationOutputWithContext(ctx context.Context) EscalationOutput
}

func (*Escalation) ElementType() reflect.Type {
	return reflect.TypeOf((*Escalation)(nil))
}

func (i *Escalation) ToEscalationOutput() EscalationOutput {
	return i.ToEscalationOutputWithContext(context.Background())
}

func (i *Escalation) ToEscalationOutputWithContext(ctx context.Context) EscalationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EscalationOutput)
}

type EscalationOutput struct {
	*pulumi.OutputState
}

func (EscalationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Escalation)(nil))
}

func (o EscalationOutput) ToEscalationOutput() EscalationOutput {
	return o
}

func (o EscalationOutput) ToEscalationOutputWithContext(ctx context.Context) EscalationOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(EscalationOutput{})
}
