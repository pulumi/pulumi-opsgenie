// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package opsgenie

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a Schedule Rotation within Opsgenie.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-opsgenie/sdk/go/opsgenie"
// 	"github.com/pulumi/pulumi-opsgenie/sdk/go/opsgenie/"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := opsgenie.NewScheduleRotation(ctx, "test", &opsgenie.ScheduleRotationArgs{
// 			EndDate: pulumi.String("2019-06-20T17:30:00Z"),
// 			Length:  pulumi.Int(6),
// 			Participants: opsgenie.ScheduleRotationParticipantArray{
// 				&opsgenie.ScheduleRotationParticipantArgs{
// 					Id:   pulumi.Any(opsgenie_user.Test.Id),
// 					Type: pulumi.String("user"),
// 				},
// 			},
// 			ScheduleId: pulumi.Any(opsgenie_schedule.Test.Id),
// 			StartDate:  pulumi.String("2019-06-18T17:00:00Z"),
// 			TimeRestrictions: opsgenie.ScheduleRotationTimeRestrictionArray{
// 				&opsgenie.ScheduleRotationTimeRestrictionArgs{
// 					Restrictions: opsgenie.ScheduleRotationTimeRestrictionRestrictionArray{
// 						&opsgenie.ScheduleRotationTimeRestrictionRestrictionArgs{
// 							EndHour:   pulumi.Int(10),
// 							EndMin:    pulumi.Int(1),
// 							StartHour: pulumi.Int(1),
// 							StartMin:  pulumi.Int(1),
// 						},
// 					},
// 					Type: pulumi.String("time-of-day"),
// 				},
// 			},
// 			Type: pulumi.String("hourly"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Schedule Rotations can be imported using the `id` and `schedule_id`, e.g.
//
// ```sh
//  $ pulumi import opsgenie:index/scheduleRotation:ScheduleRotation * `opsgenie_schedule_rotation.test schedule_id/id`
// ```
//
//  For this example- Schedule Id = `c827c472-31f2-497b-9ec6-8ec855d7d94c`
//
// - Rotation Id = `2d1a78d0-c13e-47d3-af0a-8b6d0cc2b7b1`
//
// ```sh
//  $ pulumi import opsgenie:index/scheduleRotation:ScheduleRotation test c827c472-31f2-497b-9ec6-8ec855d7d94c/2d1a78d0-c13e-47d3-af0a-8b6d0cc2b7b1`
// ```
type ScheduleRotation struct {
	pulumi.CustomResourceState

	// This parameter takes a date format as (yyyy-MM-dd'T'HH:mm:ssZ) (e.g. 2019-06-11T08:00:00+02:00). Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically
	EndDate pulumi.StringPtrOutput `pulumi:"endDate"`
	// Length of the rotation with default value 1.
	Length pulumi.IntPtrOutput `pulumi:"length"`
	// Name of rotation.
	Name pulumi.StringOutput `pulumi:"name"`
	// List of escalations, teams, users or the reserved word none which will be used in schedule. Each of them can be used multiple times and will be rotated in the order they given. "user,escalation,team,none"
	Participants ScheduleRotationParticipantArrayOutput `pulumi:"participants"`
	// Identifier of the schedule.
	ScheduleId pulumi.StringOutput `pulumi:"scheduleId"`
	// This parameter takes a date format as (yyyy-MM-dd'T'HH:mm:ssZ) (e.g. 2019-06-11T08:00:00+02:00). Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically
	StartDate        pulumi.StringOutput                        `pulumi:"startDate"`
	TimeRestrictions ScheduleRotationTimeRestrictionArrayOutput `pulumi:"timeRestrictions"`
	// Type of rotation. May be one of daily, weekly and hourly.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewScheduleRotation registers a new resource with the given unique name, arguments, and options.
func NewScheduleRotation(ctx *pulumi.Context,
	name string, args *ScheduleRotationArgs, opts ...pulumi.ResourceOption) (*ScheduleRotation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Participants == nil {
		return nil, errors.New("invalid value for required argument 'Participants'")
	}
	if args.ScheduleId == nil {
		return nil, errors.New("invalid value for required argument 'ScheduleId'")
	}
	if args.StartDate == nil {
		return nil, errors.New("invalid value for required argument 'StartDate'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource ScheduleRotation
	err := ctx.RegisterResource("opsgenie:index/scheduleRotation:ScheduleRotation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScheduleRotation gets an existing ScheduleRotation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScheduleRotation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScheduleRotationState, opts ...pulumi.ResourceOption) (*ScheduleRotation, error) {
	var resource ScheduleRotation
	err := ctx.ReadResource("opsgenie:index/scheduleRotation:ScheduleRotation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ScheduleRotation resources.
type scheduleRotationState struct {
	// This parameter takes a date format as (yyyy-MM-dd'T'HH:mm:ssZ) (e.g. 2019-06-11T08:00:00+02:00). Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically
	EndDate *string `pulumi:"endDate"`
	// Length of the rotation with default value 1.
	Length *int `pulumi:"length"`
	// Name of rotation.
	Name *string `pulumi:"name"`
	// List of escalations, teams, users or the reserved word none which will be used in schedule. Each of them can be used multiple times and will be rotated in the order they given. "user,escalation,team,none"
	Participants []ScheduleRotationParticipant `pulumi:"participants"`
	// Identifier of the schedule.
	ScheduleId *string `pulumi:"scheduleId"`
	// This parameter takes a date format as (yyyy-MM-dd'T'HH:mm:ssZ) (e.g. 2019-06-11T08:00:00+02:00). Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically
	StartDate        *string                           `pulumi:"startDate"`
	TimeRestrictions []ScheduleRotationTimeRestriction `pulumi:"timeRestrictions"`
	// Type of rotation. May be one of daily, weekly and hourly.
	Type *string `pulumi:"type"`
}

type ScheduleRotationState struct {
	// This parameter takes a date format as (yyyy-MM-dd'T'HH:mm:ssZ) (e.g. 2019-06-11T08:00:00+02:00). Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically
	EndDate pulumi.StringPtrInput
	// Length of the rotation with default value 1.
	Length pulumi.IntPtrInput
	// Name of rotation.
	Name pulumi.StringPtrInput
	// List of escalations, teams, users or the reserved word none which will be used in schedule. Each of them can be used multiple times and will be rotated in the order they given. "user,escalation,team,none"
	Participants ScheduleRotationParticipantArrayInput
	// Identifier of the schedule.
	ScheduleId pulumi.StringPtrInput
	// This parameter takes a date format as (yyyy-MM-dd'T'HH:mm:ssZ) (e.g. 2019-06-11T08:00:00+02:00). Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically
	StartDate        pulumi.StringPtrInput
	TimeRestrictions ScheduleRotationTimeRestrictionArrayInput
	// Type of rotation. May be one of daily, weekly and hourly.
	Type pulumi.StringPtrInput
}

func (ScheduleRotationState) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduleRotationState)(nil)).Elem()
}

type scheduleRotationArgs struct {
	// This parameter takes a date format as (yyyy-MM-dd'T'HH:mm:ssZ) (e.g. 2019-06-11T08:00:00+02:00). Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically
	EndDate *string `pulumi:"endDate"`
	// Length of the rotation with default value 1.
	Length *int `pulumi:"length"`
	// Name of rotation.
	Name *string `pulumi:"name"`
	// List of escalations, teams, users or the reserved word none which will be used in schedule. Each of them can be used multiple times and will be rotated in the order they given. "user,escalation,team,none"
	Participants []ScheduleRotationParticipant `pulumi:"participants"`
	// Identifier of the schedule.
	ScheduleId string `pulumi:"scheduleId"`
	// This parameter takes a date format as (yyyy-MM-dd'T'HH:mm:ssZ) (e.g. 2019-06-11T08:00:00+02:00). Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically
	StartDate        string                            `pulumi:"startDate"`
	TimeRestrictions []ScheduleRotationTimeRestriction `pulumi:"timeRestrictions"`
	// Type of rotation. May be one of daily, weekly and hourly.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a ScheduleRotation resource.
type ScheduleRotationArgs struct {
	// This parameter takes a date format as (yyyy-MM-dd'T'HH:mm:ssZ) (e.g. 2019-06-11T08:00:00+02:00). Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically
	EndDate pulumi.StringPtrInput
	// Length of the rotation with default value 1.
	Length pulumi.IntPtrInput
	// Name of rotation.
	Name pulumi.StringPtrInput
	// List of escalations, teams, users or the reserved word none which will be used in schedule. Each of them can be used multiple times and will be rotated in the order they given. "user,escalation,team,none"
	Participants ScheduleRotationParticipantArrayInput
	// Identifier of the schedule.
	ScheduleId pulumi.StringInput
	// This parameter takes a date format as (yyyy-MM-dd'T'HH:mm:ssZ) (e.g. 2019-06-11T08:00:00+02:00). Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically
	StartDate        pulumi.StringInput
	TimeRestrictions ScheduleRotationTimeRestrictionArrayInput
	// Type of rotation. May be one of daily, weekly and hourly.
	Type pulumi.StringInput
}

func (ScheduleRotationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduleRotationArgs)(nil)).Elem()
}

type ScheduleRotationInput interface {
	pulumi.Input

	ToScheduleRotationOutput() ScheduleRotationOutput
	ToScheduleRotationOutputWithContext(ctx context.Context) ScheduleRotationOutput
}

func (*ScheduleRotation) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleRotation)(nil))
}

func (i *ScheduleRotation) ToScheduleRotationOutput() ScheduleRotationOutput {
	return i.ToScheduleRotationOutputWithContext(context.Background())
}

func (i *ScheduleRotation) ToScheduleRotationOutputWithContext(ctx context.Context) ScheduleRotationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleRotationOutput)
}

type ScheduleRotationOutput struct {
	*pulumi.OutputState
}

func (ScheduleRotationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScheduleRotation)(nil))
}

func (o ScheduleRotationOutput) ToScheduleRotationOutput() ScheduleRotationOutput {
	return o
}

func (o ScheduleRotationOutput) ToScheduleRotationOutputWithContext(ctx context.Context) ScheduleRotationOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ScheduleRotationOutput{})
}
