// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package opsgenie

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages advanced actions for Integrations within Opsgenie. This applies for the following resources:
// * ApiIntegration
// * EmailIntegration
//
// The actions that are supported are:
// * create
// * close
// * acknowledge
// * addNote
// * ignore
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-opsgenie/sdk/go/opsgenie"
// 	"github.com/pulumi/pulumi-opsgenie/sdk/go/opsgenie/"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := opsgenie.NewIntegrationAction(ctx, "testAction", &opsgenie.IntegrationActionArgs{
// 			IntegrationId: pulumi.Any(opsgenie_api_integration.Test.Id),
// 			Creates: opsgenie.IntegrationActionCreateArray{
// 				&opsgenie.IntegrationActionCreateArgs{
// 					Name: pulumi.String("create action"),
// 					Tags: pulumi.StringArray{
// 						pulumi.String("CRITICAL"),
// 						pulumi.String("SEV-0"),
// 					},
// 					User:        pulumi.String("Example-service"),
// 					Note:        pulumi.String("{{note}}"),
// 					Alias:       pulumi.String("{{alias}}"),
// 					Source:      pulumi.String("{{source}}"),
// 					Message:     pulumi.String("{{message}}"),
// 					Description: pulumi.String("{{description}}"),
// 					Entity:      pulumi.String("{{entity}}"),
// 					AlertActions: pulumi.StringArray{
// 						pulumi.String("Runbook ID#342"),
// 					},
// 					Filters: opsgenie.IntegrationActionCreateFilterArray{
// 						&opsgenie.IntegrationActionCreateFilterArgs{
// 							Type: pulumi.String("match-all-conditions"),
// 							Conditions: opsgenie.IntegrationActionCreateFilterConditionArray{
// 								&opsgenie.IntegrationActionCreateFilterConditionArgs{
// 									Field:         pulumi.String("priority"),
// 									Operation:     pulumi.String("equals"),
// 									ExpectedValue: pulumi.String("P1"),
// 								},
// 							},
// 						},
// 					},
// 					Responders: opsgenie.IntegrationActionCreateResponderArray{
// 						&opsgenie.IntegrationActionCreateResponderArgs{
// 							Id:   pulumi.Any(opsgenie_team.Test.Id),
// 							Type: pulumi.String("team"),
// 						},
// 					},
// 				},
// 				&opsgenie.IntegrationActionCreateArgs{
// 					Name: pulumi.String("Create medium priority alerts"),
// 					Tags: pulumi.StringArray{
// 						pulumi.String("SEVERE"),
// 						pulumi.String("SEV-1"),
// 					},
// 					Priority: pulumi.String("P3"),
// 					Filters: opsgenie.IntegrationActionCreateFilterArray{
// 						&opsgenie.IntegrationActionCreateFilterArgs{
// 							Type: pulumi.String("match-all-conditions"),
// 							Conditions: opsgenie.IntegrationActionCreateFilterConditionArray{
// 								&opsgenie.IntegrationActionCreateFilterConditionArgs{
// 									Field:         pulumi.String("priority"),
// 									Operation:     pulumi.String("equals"),
// 									ExpectedValue: pulumi.String("P2"),
// 								},
// 							},
// 						},
// 					},
// 				},
// 				&opsgenie.IntegrationActionCreateArgs{
// 					Name:           pulumi.String("Create alert with priority from message"),
// 					CustomPriority: pulumi.String("{{message.substringAfter(\"[custom]\")}}"),
// 					Filters: opsgenie.IntegrationActionCreateFilterArray{
// 						&opsgenie.IntegrationActionCreateFilterArgs{
// 							Type: pulumi.String("match-all-conditions"),
// 							Conditions: opsgenie.IntegrationActionCreateFilterConditionArray{
// 								&opsgenie.IntegrationActionCreateFilterConditionArgs{
// 									Field:         pulumi.String("tags"),
// 									Operation:     pulumi.String("contains"),
// 									ExpectedValue: pulumi.String("P5"),
// 								},
// 								&opsgenie.IntegrationActionCreateFilterConditionArgs{
// 									Field:         pulumi.String("message"),
// 									Operation:     pulumi.String("Starts With"),
// 									ExpectedValue: pulumi.String("[custom]"),
// 								},
// 							},
// 						},
// 					},
// 				},
// 			},
// 			Closes: opsgenie.IntegrationActionCloseArray{
// 				&opsgenie.IntegrationActionCloseArgs{
// 					Name: pulumi.String("Low priority alerts"),
// 					Filters: opsgenie.IntegrationActionCloseFilterArray{
// 						&opsgenie.IntegrationActionCloseFilterArgs{
// 							Type: pulumi.String("match-any-condition"),
// 							Conditions: opsgenie.IntegrationActionCloseFilterConditionArray{
// 								&opsgenie.IntegrationActionCloseFilterConditionArgs{
// 									Field:         pulumi.String("priority"),
// 									Operation:     pulumi.String("equals"),
// 									ExpectedValue: pulumi.String("P5"),
// 								},
// 								&opsgenie.IntegrationActionCloseFilterConditionArgs{
// 									Field:         pulumi.String("message"),
// 									Operation:     pulumi.String("contains"),
// 									ExpectedValue: pulumi.String("DEBUG"),
// 								},
// 							},
// 						},
// 					},
// 				},
// 			},
// 			Acknowledges: opsgenie.IntegrationActionAcknowledgeArray{
// 				&opsgenie.IntegrationActionAcknowledgeArgs{
// 					Name: pulumi.String("Auto-ack test alerts"),
// 					Filters: opsgenie.IntegrationActionAcknowledgeFilterArray{
// 						&opsgenie.IntegrationActionAcknowledgeFilterArgs{
// 							Type: pulumi.String("match-all-conditions"),
// 							Conditions: opsgenie.IntegrationActionAcknowledgeFilterConditionArray{
// 								&opsgenie.IntegrationActionAcknowledgeFilterConditionArgs{
// 									Field:         pulumi.String("message"),
// 									Operation:     pulumi.String("contains"),
// 									ExpectedValue: pulumi.String("TEST"),
// 								},
// 								&opsgenie.IntegrationActionAcknowledgeFilterConditionArgs{
// 									Field:         pulumi.String("priority"),
// 									Operation:     pulumi.String("equals"),
// 									ExpectedValue: pulumi.String("P5"),
// 								},
// 							},
// 						},
// 					},
// 				},
// 			},
// 			AddNotes: opsgenie.IntegrationActionAddNoteArray{
// 				&opsgenie.IntegrationActionAddNoteArgs{
// 					Name: pulumi.String("Add note to all alerts"),
// 					Note: pulumi.String("Created from test integration"),
// 					Filters: opsgenie.IntegrationActionAddNoteFilterArray{
// 						&opsgenie.IntegrationActionAddNoteFilterArgs{
// 							Type: pulumi.String("match-all"),
// 						},
// 					},
// 				},
// 			},
// 			Ignores: opsgenie.IntegrationActionIgnoreArray{
// 				&opsgenie.IntegrationActionIgnoreArgs{
// 					Name: pulumi.String("Ignore alerts with ignore tag"),
// 					Filters: opsgenie.IntegrationActionIgnoreFilterArray{
// 						&opsgenie.IntegrationActionIgnoreFilterArgs{
// 							Type: pulumi.String("match-all-conditions"),
// 							Conditions: opsgenie.IntegrationActionIgnoreFilterConditionArray{
// 								&opsgenie.IntegrationActionIgnoreFilterConditionArgs{
// 									Field:         pulumi.String("tags"),
// 									Operation:     pulumi.String("contains"),
// 									ExpectedValue: pulumi.String("ignore"),
// 								},
// 							},
// 						},
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type IntegrationAction struct {
	pulumi.CustomResourceState

	Acknowledges IntegrationActionAcknowledgeArrayOutput `pulumi:"acknowledges"`
	AddNotes     IntegrationActionAddNoteArrayOutput     `pulumi:"addNotes"`
	Closes       IntegrationActionCloseArrayOutput       `pulumi:"closes"`
	Creates      IntegrationActionCreateArrayOutput      `pulumi:"creates"`
	Ignores      IntegrationActionIgnoreArrayOutput      `pulumi:"ignores"`
	// ID of the parent integration resource to bind to.
	IntegrationId pulumi.StringOutput `pulumi:"integrationId"`
}

// NewIntegrationAction registers a new resource with the given unique name, arguments, and options.
func NewIntegrationAction(ctx *pulumi.Context,
	name string, args *IntegrationActionArgs, opts ...pulumi.ResourceOption) (*IntegrationAction, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IntegrationId == nil {
		return nil, errors.New("invalid value for required argument 'IntegrationId'")
	}
	var resource IntegrationAction
	err := ctx.RegisterResource("opsgenie:index/integrationAction:IntegrationAction", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIntegrationAction gets an existing IntegrationAction resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIntegrationAction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IntegrationActionState, opts ...pulumi.ResourceOption) (*IntegrationAction, error) {
	var resource IntegrationAction
	err := ctx.ReadResource("opsgenie:index/integrationAction:IntegrationAction", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IntegrationAction resources.
type integrationActionState struct {
	Acknowledges []IntegrationActionAcknowledge `pulumi:"acknowledges"`
	AddNotes     []IntegrationActionAddNote     `pulumi:"addNotes"`
	Closes       []IntegrationActionClose       `pulumi:"closes"`
	Creates      []IntegrationActionCreate      `pulumi:"creates"`
	Ignores      []IntegrationActionIgnore      `pulumi:"ignores"`
	// ID of the parent integration resource to bind to.
	IntegrationId *string `pulumi:"integrationId"`
}

type IntegrationActionState struct {
	Acknowledges IntegrationActionAcknowledgeArrayInput
	AddNotes     IntegrationActionAddNoteArrayInput
	Closes       IntegrationActionCloseArrayInput
	Creates      IntegrationActionCreateArrayInput
	Ignores      IntegrationActionIgnoreArrayInput
	// ID of the parent integration resource to bind to.
	IntegrationId pulumi.StringPtrInput
}

func (IntegrationActionState) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationActionState)(nil)).Elem()
}

type integrationActionArgs struct {
	Acknowledges []IntegrationActionAcknowledge `pulumi:"acknowledges"`
	AddNotes     []IntegrationActionAddNote     `pulumi:"addNotes"`
	Closes       []IntegrationActionClose       `pulumi:"closes"`
	Creates      []IntegrationActionCreate      `pulumi:"creates"`
	Ignores      []IntegrationActionIgnore      `pulumi:"ignores"`
	// ID of the parent integration resource to bind to.
	IntegrationId string `pulumi:"integrationId"`
}

// The set of arguments for constructing a IntegrationAction resource.
type IntegrationActionArgs struct {
	Acknowledges IntegrationActionAcknowledgeArrayInput
	AddNotes     IntegrationActionAddNoteArrayInput
	Closes       IntegrationActionCloseArrayInput
	Creates      IntegrationActionCreateArrayInput
	Ignores      IntegrationActionIgnoreArrayInput
	// ID of the parent integration resource to bind to.
	IntegrationId pulumi.StringInput
}

func (IntegrationActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*integrationActionArgs)(nil)).Elem()
}

type IntegrationActionInput interface {
	pulumi.Input

	ToIntegrationActionOutput() IntegrationActionOutput
	ToIntegrationActionOutputWithContext(ctx context.Context) IntegrationActionOutput
}

func (*IntegrationAction) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationAction)(nil))
}

func (i *IntegrationAction) ToIntegrationActionOutput() IntegrationActionOutput {
	return i.ToIntegrationActionOutputWithContext(context.Background())
}

func (i *IntegrationAction) ToIntegrationActionOutputWithContext(ctx context.Context) IntegrationActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntegrationActionOutput)
}

type IntegrationActionOutput struct {
	*pulumi.OutputState
}

func (IntegrationActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntegrationAction)(nil))
}

func (o IntegrationActionOutput) ToIntegrationActionOutput() IntegrationActionOutput {
	return o
}

func (o IntegrationActionOutput) ToIntegrationActionOutputWithContext(ctx context.Context) IntegrationActionOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(IntegrationActionOutput{})
}
