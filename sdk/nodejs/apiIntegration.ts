// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Manages an API Integration within Opsgenie.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as opsgenie from "@pulumi/opsgenie";
 *
 * const example_api_integrationApiIntegration = new opsgenie.ApiIntegration("example-api-integrationApiIntegration", {
 *     type: "API",
 *     responders: [
 *         {
 *             type: "user",
 *             id: opsgenie_user.user.id,
 *         },
 *         {
 *             type: "user",
 *             id: opsgenie_user.fahri.id,
 *         },
 *     ],
 * });
 * const example_api_integrationIndex_apiIntegrationApiIntegration = new opsgenie.ApiIntegration("example-api-integrationIndex/apiIntegrationApiIntegration", {
 *     type: "Prometheus",
 *     responders: [{
 *         type: "user",
 *         id: opsgenie_user.user.id,
 *     }],
 *     enabled: false,
 *     allowWriteAccess: false,
 *     ignoreRespondersFromPayload: true,
 *     suppressNotifications: true,
 *     ownerTeamId: opsgenie_team.team.id,
 * });
 * const test3 = new opsgenie.ApiIntegration("test3", {
 *     type: "Webhook",
 *     responders: [{
 *         type: "user",
 *         id: opsgenie_user.user.id,
 *     }],
 *     enabled: false,
 *     allowWriteAccess: false,
 *     suppressNotifications: true,
 *     webhookUrl: "https://api.example.com/v1",
 *     headers: {
 *         header1: value1,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * API Integrations can be imported using the `integration_id`, e.g.
 *
 * ```sh
 *  $ pulumi import opsgenie:index/apiIntegration:ApiIntegration this integration_id`
 * ```
 */
export class ApiIntegration extends pulumi.CustomResource {
    /**
     * Get an existing ApiIntegration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApiIntegrationState, opts?: pulumi.CustomResourceOptions): ApiIntegration {
        return new ApiIntegration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'opsgenie:index/apiIntegration:ApiIntegration';

    /**
     * Returns true if the given object is an instance of ApiIntegration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApiIntegration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApiIntegration.__pulumiType;
    }

    /**
     * This parameter is for configuring the write access of integration. If write access is restricted, the integration will not be authorized to write within any domain. Default: `true`.
     */
    public readonly allowWriteAccess!: pulumi.Output<boolean | undefined>;
    /**
     * (Computed) API key of the created integration
     */
    public /*out*/ readonly apiKey!: pulumi.Output<string>;
    /**
     * This parameter is for specifying whether the integration will be enabled or not. Default: `true`
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly headers!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * If enabled, the integration will ignore recipients sent in request payloads. Default: `false`.
     */
    public readonly ignoreRespondersFromPayload!: pulumi.Output<boolean | undefined>;
    /**
     * Name of the integration. Name must be unique for each integration.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Owner team id of the integration.
     */
    public readonly ownerTeamId!: pulumi.Output<string | undefined>;
    /**
     * User, schedule, teams or escalation names to calculate which users will receive the notifications of the alert.
     */
    public readonly responders!: pulumi.Output<outputs.ApiIntegrationResponder[] | undefined>;
    /**
     * If enabled, notifications that come from alerts will be suppressed. Default: `false`.
     */
    public readonly suppressNotifications!: pulumi.Output<boolean | undefined>;
    /**
     * Type of the integration (API, Marid, Prometheus, etc). The full list of options can be found [here](https://docs.opsgenie.com/docs/integration-types-to-use-with-api).
     */
    public readonly type!: pulumi.Output<string | undefined>;
    /**
     * It is required if type is `Webhook`. This is the url Opsgenie will be sending request to.
     */
    public readonly webhookUrl!: pulumi.Output<string | undefined>;

    /**
     * Create a ApiIntegration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ApiIntegrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApiIntegrationArgs | ApiIntegrationState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApiIntegrationState | undefined;
            inputs["allowWriteAccess"] = state ? state.allowWriteAccess : undefined;
            inputs["apiKey"] = state ? state.apiKey : undefined;
            inputs["enabled"] = state ? state.enabled : undefined;
            inputs["headers"] = state ? state.headers : undefined;
            inputs["ignoreRespondersFromPayload"] = state ? state.ignoreRespondersFromPayload : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["ownerTeamId"] = state ? state.ownerTeamId : undefined;
            inputs["responders"] = state ? state.responders : undefined;
            inputs["suppressNotifications"] = state ? state.suppressNotifications : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["webhookUrl"] = state ? state.webhookUrl : undefined;
        } else {
            const args = argsOrState as ApiIntegrationArgs | undefined;
            inputs["allowWriteAccess"] = args ? args.allowWriteAccess : undefined;
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["headers"] = args ? args.headers : undefined;
            inputs["ignoreRespondersFromPayload"] = args ? args.ignoreRespondersFromPayload : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["ownerTeamId"] = args ? args.ownerTeamId : undefined;
            inputs["responders"] = args ? args.responders : undefined;
            inputs["suppressNotifications"] = args ? args.suppressNotifications : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["webhookUrl"] = args ? args.webhookUrl : undefined;
            inputs["apiKey"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(ApiIntegration.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApiIntegration resources.
 */
export interface ApiIntegrationState {
    /**
     * This parameter is for configuring the write access of integration. If write access is restricted, the integration will not be authorized to write within any domain. Default: `true`.
     */
    readonly allowWriteAccess?: pulumi.Input<boolean>;
    /**
     * (Computed) API key of the created integration
     */
    readonly apiKey?: pulumi.Input<string>;
    /**
     * This parameter is for specifying whether the integration will be enabled or not. Default: `true`
     */
    readonly enabled?: pulumi.Input<boolean>;
    readonly headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * If enabled, the integration will ignore recipients sent in request payloads. Default: `false`.
     */
    readonly ignoreRespondersFromPayload?: pulumi.Input<boolean>;
    /**
     * Name of the integration. Name must be unique for each integration.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Owner team id of the integration.
     */
    readonly ownerTeamId?: pulumi.Input<string>;
    /**
     * User, schedule, teams or escalation names to calculate which users will receive the notifications of the alert.
     */
    readonly responders?: pulumi.Input<pulumi.Input<inputs.ApiIntegrationResponder>[]>;
    /**
     * If enabled, notifications that come from alerts will be suppressed. Default: `false`.
     */
    readonly suppressNotifications?: pulumi.Input<boolean>;
    /**
     * Type of the integration (API, Marid, Prometheus, etc). The full list of options can be found [here](https://docs.opsgenie.com/docs/integration-types-to-use-with-api).
     */
    readonly type?: pulumi.Input<string>;
    /**
     * It is required if type is `Webhook`. This is the url Opsgenie will be sending request to.
     */
    readonly webhookUrl?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ApiIntegration resource.
 */
export interface ApiIntegrationArgs {
    /**
     * This parameter is for configuring the write access of integration. If write access is restricted, the integration will not be authorized to write within any domain. Default: `true`.
     */
    readonly allowWriteAccess?: pulumi.Input<boolean>;
    /**
     * This parameter is for specifying whether the integration will be enabled or not. Default: `true`
     */
    readonly enabled?: pulumi.Input<boolean>;
    readonly headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * If enabled, the integration will ignore recipients sent in request payloads. Default: `false`.
     */
    readonly ignoreRespondersFromPayload?: pulumi.Input<boolean>;
    /**
     * Name of the integration. Name must be unique for each integration.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Owner team id of the integration.
     */
    readonly ownerTeamId?: pulumi.Input<string>;
    /**
     * User, schedule, teams or escalation names to calculate which users will receive the notifications of the alert.
     */
    readonly responders?: pulumi.Input<pulumi.Input<inputs.ApiIntegrationResponder>[]>;
    /**
     * If enabled, notifications that come from alerts will be suppressed. Default: `false`.
     */
    readonly suppressNotifications?: pulumi.Input<boolean>;
    /**
     * Type of the integration (API, Marid, Prometheus, etc). The full list of options can be found [here](https://docs.opsgenie.com/docs/integration-types-to-use-with-api).
     */
    readonly type?: pulumi.Input<string>;
    /**
     * It is required if type is `Webhook`. This is the url Opsgenie will be sending request to.
     */
    readonly webhookUrl?: pulumi.Input<string>;
}
