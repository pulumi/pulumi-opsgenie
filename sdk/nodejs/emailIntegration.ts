// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Manages an Email Integration within Opsgenie.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as opsgenie from "@pulumi/opsgenie";
 *
 * const testEmailIntegration = new opsgenie.EmailIntegration("testEmailIntegration", {emailUsername: "fahri"});
 * const testIndex_emailIntegrationEmailIntegration = new opsgenie.EmailIntegration("testIndex/emailIntegrationEmailIntegration", {
 *     responders: [
 *         {
 *             type: "user",
 *             id: opsgenie_user.test.id,
 *         },
 *         {
 *             type: "schedule",
 *             id: opsgenie_schedule.test.id,
 *         },
 *         {
 *             type: "escalation",
 *             id: opsgenie_escalation.test.id,
 *         },
 *         {
 *             type: "team",
 *             id: opsgenie_team.test2.id,
 *         },
 *     ],
 *     emailUsername: "test",
 *     enabled: true,
 *     ignoreRespondersFromPayload: true,
 *     suppressNotifications: true,
 * });
 * const testOpsgenieIndex_emailIntegrationEmailIntegration = new opsgenie.EmailIntegration("testOpsgenieIndex/emailIntegrationEmailIntegration", {
 *     responders: [{
 *         type: "user",
 *         id: opsgenie_user.test.id,
 *     }],
 *     emailUsername: "test",
 *     enabled: true,
 *     ignoreRespondersFromPayload: true,
 *     suppressNotifications: true,
 *     ownerTeamId: opsgenie_team_genies.id,
 * });
 * ```
 *
 * ## Import
 *
 * Email Integrations can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import opsgenie:index/emailIntegration:EmailIntegration test id`
 * ```
 */
export class EmailIntegration extends pulumi.CustomResource {
    /**
     * Get an existing EmailIntegration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EmailIntegrationState, opts?: pulumi.CustomResourceOptions): EmailIntegration {
        return new EmailIntegration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'opsgenie:index/emailIntegration:EmailIntegration';

    /**
     * Returns true if the given object is an instance of EmailIntegration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EmailIntegration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EmailIntegration.__pulumiType;
    }

    /**
     * The username part of the email address. It must be unique for each integration.
     */
    public readonly emailUsername!: pulumi.Output<string>;
    /**
     * A Member block as documented below.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * If enabled, the integration will ignore recipients sent in request payloads. Default: `false`.
     */
    public readonly ignoreRespondersFromPayload!: pulumi.Output<boolean | undefined>;
    /**
     * Name of the integration. Name must be unique for each integration.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Owner team id of the integration.
     */
    public readonly ownerTeamId!: pulumi.Output<string | undefined>;
    public readonly responders!: pulumi.Output<outputs.EmailIntegrationResponder[] | undefined>;
    /**
     * If enabled, notifications that come from alerts will be suppressed. Default: `false`.
     */
    public readonly suppressNotifications!: pulumi.Output<boolean | undefined>;

    /**
     * Create a EmailIntegration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EmailIntegrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EmailIntegrationArgs | EmailIntegrationState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EmailIntegrationState | undefined;
            inputs["emailUsername"] = state ? state.emailUsername : undefined;
            inputs["enabled"] = state ? state.enabled : undefined;
            inputs["ignoreRespondersFromPayload"] = state ? state.ignoreRespondersFromPayload : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["ownerTeamId"] = state ? state.ownerTeamId : undefined;
            inputs["responders"] = state ? state.responders : undefined;
            inputs["suppressNotifications"] = state ? state.suppressNotifications : undefined;
        } else {
            const args = argsOrState as EmailIntegrationArgs | undefined;
            if ((!args || args.emailUsername === undefined) && !opts.urn) {
                throw new Error("Missing required property 'emailUsername'");
            }
            inputs["emailUsername"] = args ? args.emailUsername : undefined;
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["ignoreRespondersFromPayload"] = args ? args.ignoreRespondersFromPayload : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["ownerTeamId"] = args ? args.ownerTeamId : undefined;
            inputs["responders"] = args ? args.responders : undefined;
            inputs["suppressNotifications"] = args ? args.suppressNotifications : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(EmailIntegration.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EmailIntegration resources.
 */
export interface EmailIntegrationState {
    /**
     * The username part of the email address. It must be unique for each integration.
     */
    readonly emailUsername?: pulumi.Input<string>;
    /**
     * A Member block as documented below.
     */
    readonly enabled?: pulumi.Input<boolean>;
    /**
     * If enabled, the integration will ignore recipients sent in request payloads. Default: `false`.
     */
    readonly ignoreRespondersFromPayload?: pulumi.Input<boolean>;
    /**
     * Name of the integration. Name must be unique for each integration.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Owner team id of the integration.
     */
    readonly ownerTeamId?: pulumi.Input<string>;
    readonly responders?: pulumi.Input<pulumi.Input<inputs.EmailIntegrationResponder>[]>;
    /**
     * If enabled, notifications that come from alerts will be suppressed. Default: `false`.
     */
    readonly suppressNotifications?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a EmailIntegration resource.
 */
export interface EmailIntegrationArgs {
    /**
     * The username part of the email address. It must be unique for each integration.
     */
    readonly emailUsername: pulumi.Input<string>;
    /**
     * A Member block as documented below.
     */
    readonly enabled?: pulumi.Input<boolean>;
    /**
     * If enabled, the integration will ignore recipients sent in request payloads. Default: `false`.
     */
    readonly ignoreRespondersFromPayload?: pulumi.Input<boolean>;
    /**
     * Name of the integration. Name must be unique for each integration.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Owner team id of the integration.
     */
    readonly ownerTeamId?: pulumi.Input<string>;
    readonly responders?: pulumi.Input<pulumi.Input<inputs.EmailIntegrationResponder>[]>;
    /**
     * If enabled, notifications that come from alerts will be suppressed. Default: `false`.
     */
    readonly suppressNotifications?: pulumi.Input<boolean>;
}
