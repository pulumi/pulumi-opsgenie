// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manages a Schedule Rotation within Opsgenie.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as opsgenie from "@pulumi/opsgenie";
 *
 * const test = new opsgenie.ScheduleRotation("test", {
 *     scheduleId: testOpsgenieSchedule.id,
 *     name: "test",
 *     startDate: "2019-06-18T17:00:00Z",
 *     endDate: "2019-06-20T17:30:00Z",
 *     type: "hourly",
 *     length: 6,
 *     participants: [{
 *         type: "user",
 *         id: testOpsgenieUser.id,
 *     }],
 *     timeRestrictions: [{
 *         type: "time-of-day",
 *         restriction: [{
 *             startHour: 1,
 *             startMin: 1,
 *             endHour: 10,
 *             endMin: 1,
 *         }],
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Schedule Rotations can be imported using the `schedule_id/rotation_id`, e.g.
 *
 * ```sh
 * $ pulumi import opsgenie:index/scheduleRotation:ScheduleRotation * `opsgenie_schedule_rotation.test schedule_id/rotation_id`
 * ```
 */
export class ScheduleRotation extends pulumi.CustomResource {
    /**
     * Get an existing ScheduleRotation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ScheduleRotationState, opts?: pulumi.CustomResourceOptions): ScheduleRotation {
        return new ScheduleRotation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'opsgenie:index/scheduleRotation:ScheduleRotation';

    /**
     * Returns true if the given object is an instance of ScheduleRotation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ScheduleRotation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ScheduleRotation.__pulumiType;
    }

    /**
     * This parameter takes a date format as (yyyy-MM-dd'T'HH:mm:ssZ) (e.g. 2019-06-11T08:00:00+02:00). Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically
     */
    declare public readonly endDate: pulumi.Output<string | undefined>;
    /**
     * Length of the rotation with default value 1.
     */
    declare public readonly length: pulumi.Output<number | undefined>;
    /**
     * Name of rotation.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * List of escalations, teams, users or the reserved word none which will be used in schedule. Each of them can be used multiple times and will be rotated in the order they given. "user,escalation,team,none"
     */
    declare public readonly participants: pulumi.Output<outputs.ScheduleRotationParticipant[]>;
    /**
     * Identifier of the schedule.
     */
    declare public readonly scheduleId: pulumi.Output<string>;
    /**
     * This parameter takes a date format as (yyyy-MM-dd'T'HH:mm:ssZ) (e.g. 2019-06-11T08:00:00+02:00). Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically
     */
    declare public readonly startDate: pulumi.Output<string>;
    declare public readonly timeRestrictions: pulumi.Output<outputs.ScheduleRotationTimeRestriction[] | undefined>;
    /**
     * Type of rotation. May be one of daily, weekly and hourly.
     */
    declare public readonly type: pulumi.Output<string>;

    /**
     * Create a ScheduleRotation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScheduleRotationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ScheduleRotationArgs | ScheduleRotationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ScheduleRotationState | undefined;
            resourceInputs["endDate"] = state?.endDate;
            resourceInputs["length"] = state?.length;
            resourceInputs["name"] = state?.name;
            resourceInputs["participants"] = state?.participants;
            resourceInputs["scheduleId"] = state?.scheduleId;
            resourceInputs["startDate"] = state?.startDate;
            resourceInputs["timeRestrictions"] = state?.timeRestrictions;
            resourceInputs["type"] = state?.type;
        } else {
            const args = argsOrState as ScheduleRotationArgs | undefined;
            if (args?.participants === undefined && !opts.urn) {
                throw new Error("Missing required property 'participants'");
            }
            if (args?.scheduleId === undefined && !opts.urn) {
                throw new Error("Missing required property 'scheduleId'");
            }
            if (args?.startDate === undefined && !opts.urn) {
                throw new Error("Missing required property 'startDate'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["endDate"] = args?.endDate;
            resourceInputs["length"] = args?.length;
            resourceInputs["name"] = args?.name;
            resourceInputs["participants"] = args?.participants;
            resourceInputs["scheduleId"] = args?.scheduleId;
            resourceInputs["startDate"] = args?.startDate;
            resourceInputs["timeRestrictions"] = args?.timeRestrictions;
            resourceInputs["type"] = args?.type;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ScheduleRotation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ScheduleRotation resources.
 */
export interface ScheduleRotationState {
    /**
     * This parameter takes a date format as (yyyy-MM-dd'T'HH:mm:ssZ) (e.g. 2019-06-11T08:00:00+02:00). Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically
     */
    endDate?: pulumi.Input<string>;
    /**
     * Length of the rotation with default value 1.
     */
    length?: pulumi.Input<number>;
    /**
     * Name of rotation.
     */
    name?: pulumi.Input<string>;
    /**
     * List of escalations, teams, users or the reserved word none which will be used in schedule. Each of them can be used multiple times and will be rotated in the order they given. "user,escalation,team,none"
     */
    participants?: pulumi.Input<pulumi.Input<inputs.ScheduleRotationParticipant>[]>;
    /**
     * Identifier of the schedule.
     */
    scheduleId?: pulumi.Input<string>;
    /**
     * This parameter takes a date format as (yyyy-MM-dd'T'HH:mm:ssZ) (e.g. 2019-06-11T08:00:00+02:00). Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically
     */
    startDate?: pulumi.Input<string>;
    timeRestrictions?: pulumi.Input<pulumi.Input<inputs.ScheduleRotationTimeRestriction>[]>;
    /**
     * Type of rotation. May be one of daily, weekly and hourly.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ScheduleRotation resource.
 */
export interface ScheduleRotationArgs {
    /**
     * This parameter takes a date format as (yyyy-MM-dd'T'HH:mm:ssZ) (e.g. 2019-06-11T08:00:00+02:00). Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically
     */
    endDate?: pulumi.Input<string>;
    /**
     * Length of the rotation with default value 1.
     */
    length?: pulumi.Input<number>;
    /**
     * Name of rotation.
     */
    name?: pulumi.Input<string>;
    /**
     * List of escalations, teams, users or the reserved word none which will be used in schedule. Each of them can be used multiple times and will be rotated in the order they given. "user,escalation,team,none"
     */
    participants: pulumi.Input<pulumi.Input<inputs.ScheduleRotationParticipant>[]>;
    /**
     * Identifier of the schedule.
     */
    scheduleId: pulumi.Input<string>;
    /**
     * This parameter takes a date format as (yyyy-MM-dd'T'HH:mm:ssZ) (e.g. 2019-06-11T08:00:00+02:00). Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically
     */
    startDate: pulumi.Input<string>;
    timeRestrictions?: pulumi.Input<pulumi.Input<inputs.ScheduleRotationTimeRestriction>[]>;
    /**
     * Type of rotation. May be one of daily, weekly and hourly.
     */
    type: pulumi.Input<string>;
}
