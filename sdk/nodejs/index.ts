// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./alertPolicy";
export * from "./apiIntegration";
export * from "./customRole";
export * from "./emailIntegration";
export * from "./escalation";
export * from "./getEscalation";
export * from "./getHeartbeat";
export * from "./getSchedule";
export * from "./getService";
export * from "./getTeam";
export * from "./getUser";
export * from "./heartbeat";
export * from "./incidentTemplate";
export * from "./integrationAction";
export * from "./maintenance";
export * from "./notificationPolicy";
export * from "./notificationRule";
export * from "./provider";
export * from "./schedule";
export * from "./scheduleRotation";
export * from "./service";
export * from "./serviceIncidentRule";
export * from "./team";
export * from "./teamRoutingRule";
export * from "./user";
export * from "./userContact";

// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

// Import resources to register:
import { AlertPolicy } from "./alertPolicy";
import { ApiIntegration } from "./apiIntegration";
import { CustomRole } from "./customRole";
import { EmailIntegration } from "./emailIntegration";
import { Escalation } from "./escalation";
import { Heartbeat } from "./heartbeat";
import { IncidentTemplate } from "./incidentTemplate";
import { IntegrationAction } from "./integrationAction";
import { Maintenance } from "./maintenance";
import { NotificationPolicy } from "./notificationPolicy";
import { NotificationRule } from "./notificationRule";
import { Schedule } from "./schedule";
import { ScheduleRotation } from "./scheduleRotation";
import { Service } from "./service";
import { ServiceIncidentRule } from "./serviceIncidentRule";
import { Team } from "./team";
import { TeamRoutingRule } from "./teamRoutingRule";
import { User } from "./user";
import { UserContact } from "./userContact";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "opsgenie:index/alertPolicy:AlertPolicy":
                return new AlertPolicy(name, <any>undefined, { urn })
            case "opsgenie:index/apiIntegration:ApiIntegration":
                return new ApiIntegration(name, <any>undefined, { urn })
            case "opsgenie:index/customRole:CustomRole":
                return new CustomRole(name, <any>undefined, { urn })
            case "opsgenie:index/emailIntegration:EmailIntegration":
                return new EmailIntegration(name, <any>undefined, { urn })
            case "opsgenie:index/escalation:Escalation":
                return new Escalation(name, <any>undefined, { urn })
            case "opsgenie:index/heartbeat:Heartbeat":
                return new Heartbeat(name, <any>undefined, { urn })
            case "opsgenie:index/incidentTemplate:IncidentTemplate":
                return new IncidentTemplate(name, <any>undefined, { urn })
            case "opsgenie:index/integrationAction:IntegrationAction":
                return new IntegrationAction(name, <any>undefined, { urn })
            case "opsgenie:index/maintenance:Maintenance":
                return new Maintenance(name, <any>undefined, { urn })
            case "opsgenie:index/notificationPolicy:NotificationPolicy":
                return new NotificationPolicy(name, <any>undefined, { urn })
            case "opsgenie:index/notificationRule:NotificationRule":
                return new NotificationRule(name, <any>undefined, { urn })
            case "opsgenie:index/schedule:Schedule":
                return new Schedule(name, <any>undefined, { urn })
            case "opsgenie:index/scheduleRotation:ScheduleRotation":
                return new ScheduleRotation(name, <any>undefined, { urn })
            case "opsgenie:index/service:Service":
                return new Service(name, <any>undefined, { urn })
            case "opsgenie:index/serviceIncidentRule:ServiceIncidentRule":
                return new ServiceIncidentRule(name, <any>undefined, { urn })
            case "opsgenie:index/team:Team":
                return new Team(name, <any>undefined, { urn })
            case "opsgenie:index/teamRoutingRule:TeamRoutingRule":
                return new TeamRoutingRule(name, <any>undefined, { urn })
            case "opsgenie:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "opsgenie:index/userContact:UserContact":
                return new UserContact(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("opsgenie", "index/alertPolicy", _module)
pulumi.runtime.registerResourceModule("opsgenie", "index/apiIntegration", _module)
pulumi.runtime.registerResourceModule("opsgenie", "index/customRole", _module)
pulumi.runtime.registerResourceModule("opsgenie", "index/emailIntegration", _module)
pulumi.runtime.registerResourceModule("opsgenie", "index/escalation", _module)
pulumi.runtime.registerResourceModule("opsgenie", "index/heartbeat", _module)
pulumi.runtime.registerResourceModule("opsgenie", "index/incidentTemplate", _module)
pulumi.runtime.registerResourceModule("opsgenie", "index/integrationAction", _module)
pulumi.runtime.registerResourceModule("opsgenie", "index/maintenance", _module)
pulumi.runtime.registerResourceModule("opsgenie", "index/notificationPolicy", _module)
pulumi.runtime.registerResourceModule("opsgenie", "index/notificationRule", _module)
pulumi.runtime.registerResourceModule("opsgenie", "index/schedule", _module)
pulumi.runtime.registerResourceModule("opsgenie", "index/scheduleRotation", _module)
pulumi.runtime.registerResourceModule("opsgenie", "index/service", _module)
pulumi.runtime.registerResourceModule("opsgenie", "index/serviceIncidentRule", _module)
pulumi.runtime.registerResourceModule("opsgenie", "index/team", _module)
pulumi.runtime.registerResourceModule("opsgenie", "index/teamRoutingRule", _module)
pulumi.runtime.registerResourceModule("opsgenie", "index/user", _module)
pulumi.runtime.registerResourceModule("opsgenie", "index/userContact", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("opsgenie", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:opsgenie") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
