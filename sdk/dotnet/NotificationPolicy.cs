// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Opsgenie
{
    /// <summary>
    /// Manages a Notification Policy within Opsgenie.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Opsgenie = Pulumi.Opsgenie;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testTeam = new Opsgenie.Team("testTeam", new()
    ///     {
    ///         Description = "This team deals with all the things",
    ///     });
    /// 
    ///     var testNotificationPolicy = new Opsgenie.NotificationPolicy("testNotificationPolicy", new()
    ///     {
    ///         TeamId = testTeam.Id,
    ///         PolicyDescription = "This policy has a delay action",
    ///         DelayActions = new[]
    ///         {
    ///             new Opsgenie.Inputs.NotificationPolicyDelayActionArgs
    ///             {
    ///                 DelayOption = "next-time",
    ///                 UntilMinute = 1,
    ///                 UntilHour = 9,
    ///             },
    ///         },
    ///         Filters = new[]
    ///         {
    ///             null,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Notification policies can be imported using the `team_id` and `notification_policy_id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import opsgenie:index/notificationPolicy:NotificationPolicy test team_id/notification_policy_id`
    /// ```
    /// </summary>
    [OpsgenieResourceType("opsgenie:index/notificationPolicy:NotificationPolicy")]
    public partial class NotificationPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Auto Restart Action of the policy. This is a block, structure is documented below.
        /// </summary>
        [Output("autoCloseActions")]
        public Output<ImmutableArray<Outputs.NotificationPolicyAutoCloseAction>> AutoCloseActions { get; private set; } = null!;

        /// <summary>
        /// Auto Restart Action of the policy. This is a block, structure is documented below.
        /// </summary>
        [Output("autoRestartActions")]
        public Output<ImmutableArray<Outputs.NotificationPolicyAutoRestartAction>> AutoRestartActions { get; private set; } = null!;

        /// <summary>
        /// Deduplication Action of the policy. This is a block, structure is documented below.
        /// </summary>
        [Output("deDuplicationActions")]
        public Output<ImmutableArray<Outputs.NotificationPolicyDeDuplicationAction>> DeDuplicationActions { get; private set; } = null!;

        /// <summary>
        /// Delay notifications. This is a block, structure is documented below.
        /// </summary>
        [Output("delayActions")]
        public Output<ImmutableArray<Outputs.NotificationPolicyDelayAction>> DelayActions { get; private set; } = null!;

        /// <summary>
        /// If policy should be enabled. Default: `true`
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// A notification filter which will be applied. This filter can be empty: `filter {}` - this means `match-all`. This is a block, structure is documented below.
        /// </summary>
        [Output("filters")]
        public Output<ImmutableArray<Outputs.NotificationPolicyFilter>> Filters { get; private set; } = null!;

        /// <summary>
        /// Name of the notification policy
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Description of the policy. This can be max 512 characters.
        /// </summary>
        [Output("policyDescription")]
        public Output<string?> PolicyDescription { get; private set; } = null!;

        /// <summary>
        /// Suppress value of the policy. Values are: `true`, `false`. Default: `false`
        /// </summary>
        [Output("suppress")]
        public Output<bool?> Suppress { get; private set; } = null!;

        /// <summary>
        /// Id of team that this policy belons to.
        /// </summary>
        [Output("teamId")]
        public Output<string> TeamId { get; private set; } = null!;

        /// <summary>
        /// Time restrictions specified in this field must be met for this policy to work. This is a block, structure is documented below.
        /// </summary>
        [Output("timeRestrictions")]
        public Output<ImmutableArray<Outputs.NotificationPolicyTimeRestriction>> TimeRestrictions { get; private set; } = null!;


        /// <summary>
        /// Create a NotificationPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NotificationPolicy(string name, NotificationPolicyArgs args, CustomResourceOptions? options = null)
            : base("opsgenie:index/notificationPolicy:NotificationPolicy", name, args ?? new NotificationPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NotificationPolicy(string name, Input<string> id, NotificationPolicyState? state = null, CustomResourceOptions? options = null)
            : base("opsgenie:index/notificationPolicy:NotificationPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NotificationPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NotificationPolicy Get(string name, Input<string> id, NotificationPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new NotificationPolicy(name, id, state, options);
        }
    }

    public sealed class NotificationPolicyArgs : global::Pulumi.ResourceArgs
    {
        [Input("autoCloseActions")]
        private InputList<Inputs.NotificationPolicyAutoCloseActionArgs>? _autoCloseActions;

        /// <summary>
        /// Auto Restart Action of the policy. This is a block, structure is documented below.
        /// </summary>
        public InputList<Inputs.NotificationPolicyAutoCloseActionArgs> AutoCloseActions
        {
            get => _autoCloseActions ?? (_autoCloseActions = new InputList<Inputs.NotificationPolicyAutoCloseActionArgs>());
            set => _autoCloseActions = value;
        }

        [Input("autoRestartActions")]
        private InputList<Inputs.NotificationPolicyAutoRestartActionArgs>? _autoRestartActions;

        /// <summary>
        /// Auto Restart Action of the policy. This is a block, structure is documented below.
        /// </summary>
        public InputList<Inputs.NotificationPolicyAutoRestartActionArgs> AutoRestartActions
        {
            get => _autoRestartActions ?? (_autoRestartActions = new InputList<Inputs.NotificationPolicyAutoRestartActionArgs>());
            set => _autoRestartActions = value;
        }

        [Input("deDuplicationActions")]
        private InputList<Inputs.NotificationPolicyDeDuplicationActionArgs>? _deDuplicationActions;

        /// <summary>
        /// Deduplication Action of the policy. This is a block, structure is documented below.
        /// </summary>
        public InputList<Inputs.NotificationPolicyDeDuplicationActionArgs> DeDuplicationActions
        {
            get => _deDuplicationActions ?? (_deDuplicationActions = new InputList<Inputs.NotificationPolicyDeDuplicationActionArgs>());
            set => _deDuplicationActions = value;
        }

        [Input("delayActions")]
        private InputList<Inputs.NotificationPolicyDelayActionArgs>? _delayActions;

        /// <summary>
        /// Delay notifications. This is a block, structure is documented below.
        /// </summary>
        public InputList<Inputs.NotificationPolicyDelayActionArgs> DelayActions
        {
            get => _delayActions ?? (_delayActions = new InputList<Inputs.NotificationPolicyDelayActionArgs>());
            set => _delayActions = value;
        }

        /// <summary>
        /// If policy should be enabled. Default: `true`
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("filters", required: true)]
        private InputList<Inputs.NotificationPolicyFilterArgs>? _filters;

        /// <summary>
        /// A notification filter which will be applied. This filter can be empty: `filter {}` - this means `match-all`. This is a block, structure is documented below.
        /// </summary>
        public InputList<Inputs.NotificationPolicyFilterArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.NotificationPolicyFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Name of the notification policy
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Description of the policy. This can be max 512 characters.
        /// </summary>
        [Input("policyDescription")]
        public Input<string>? PolicyDescription { get; set; }

        /// <summary>
        /// Suppress value of the policy. Values are: `true`, `false`. Default: `false`
        /// </summary>
        [Input("suppress")]
        public Input<bool>? Suppress { get; set; }

        /// <summary>
        /// Id of team that this policy belons to.
        /// </summary>
        [Input("teamId", required: true)]
        public Input<string> TeamId { get; set; } = null!;

        [Input("timeRestrictions")]
        private InputList<Inputs.NotificationPolicyTimeRestrictionArgs>? _timeRestrictions;

        /// <summary>
        /// Time restrictions specified in this field must be met for this policy to work. This is a block, structure is documented below.
        /// </summary>
        public InputList<Inputs.NotificationPolicyTimeRestrictionArgs> TimeRestrictions
        {
            get => _timeRestrictions ?? (_timeRestrictions = new InputList<Inputs.NotificationPolicyTimeRestrictionArgs>());
            set => _timeRestrictions = value;
        }

        public NotificationPolicyArgs()
        {
        }
        public static new NotificationPolicyArgs Empty => new NotificationPolicyArgs();
    }

    public sealed class NotificationPolicyState : global::Pulumi.ResourceArgs
    {
        [Input("autoCloseActions")]
        private InputList<Inputs.NotificationPolicyAutoCloseActionGetArgs>? _autoCloseActions;

        /// <summary>
        /// Auto Restart Action of the policy. This is a block, structure is documented below.
        /// </summary>
        public InputList<Inputs.NotificationPolicyAutoCloseActionGetArgs> AutoCloseActions
        {
            get => _autoCloseActions ?? (_autoCloseActions = new InputList<Inputs.NotificationPolicyAutoCloseActionGetArgs>());
            set => _autoCloseActions = value;
        }

        [Input("autoRestartActions")]
        private InputList<Inputs.NotificationPolicyAutoRestartActionGetArgs>? _autoRestartActions;

        /// <summary>
        /// Auto Restart Action of the policy. This is a block, structure is documented below.
        /// </summary>
        public InputList<Inputs.NotificationPolicyAutoRestartActionGetArgs> AutoRestartActions
        {
            get => _autoRestartActions ?? (_autoRestartActions = new InputList<Inputs.NotificationPolicyAutoRestartActionGetArgs>());
            set => _autoRestartActions = value;
        }

        [Input("deDuplicationActions")]
        private InputList<Inputs.NotificationPolicyDeDuplicationActionGetArgs>? _deDuplicationActions;

        /// <summary>
        /// Deduplication Action of the policy. This is a block, structure is documented below.
        /// </summary>
        public InputList<Inputs.NotificationPolicyDeDuplicationActionGetArgs> DeDuplicationActions
        {
            get => _deDuplicationActions ?? (_deDuplicationActions = new InputList<Inputs.NotificationPolicyDeDuplicationActionGetArgs>());
            set => _deDuplicationActions = value;
        }

        [Input("delayActions")]
        private InputList<Inputs.NotificationPolicyDelayActionGetArgs>? _delayActions;

        /// <summary>
        /// Delay notifications. This is a block, structure is documented below.
        /// </summary>
        public InputList<Inputs.NotificationPolicyDelayActionGetArgs> DelayActions
        {
            get => _delayActions ?? (_delayActions = new InputList<Inputs.NotificationPolicyDelayActionGetArgs>());
            set => _delayActions = value;
        }

        /// <summary>
        /// If policy should be enabled. Default: `true`
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("filters")]
        private InputList<Inputs.NotificationPolicyFilterGetArgs>? _filters;

        /// <summary>
        /// A notification filter which will be applied. This filter can be empty: `filter {}` - this means `match-all`. This is a block, structure is documented below.
        /// </summary>
        public InputList<Inputs.NotificationPolicyFilterGetArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.NotificationPolicyFilterGetArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Name of the notification policy
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Description of the policy. This can be max 512 characters.
        /// </summary>
        [Input("policyDescription")]
        public Input<string>? PolicyDescription { get; set; }

        /// <summary>
        /// Suppress value of the policy. Values are: `true`, `false`. Default: `false`
        /// </summary>
        [Input("suppress")]
        public Input<bool>? Suppress { get; set; }

        /// <summary>
        /// Id of team that this policy belons to.
        /// </summary>
        [Input("teamId")]
        public Input<string>? TeamId { get; set; }

        [Input("timeRestrictions")]
        private InputList<Inputs.NotificationPolicyTimeRestrictionGetArgs>? _timeRestrictions;

        /// <summary>
        /// Time restrictions specified in this field must be met for this policy to work. This is a block, structure is documented below.
        /// </summary>
        public InputList<Inputs.NotificationPolicyTimeRestrictionGetArgs> TimeRestrictions
        {
            get => _timeRestrictions ?? (_timeRestrictions = new InputList<Inputs.NotificationPolicyTimeRestrictionGetArgs>());
            set => _timeRestrictions = value;
        }

        public NotificationPolicyState()
        {
        }
        public static new NotificationPolicyState Empty => new NotificationPolicyState();
    }
}
