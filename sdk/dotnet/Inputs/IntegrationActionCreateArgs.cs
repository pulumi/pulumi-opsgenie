// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Opsgenie.Inputs
{

    public sealed class IntegrationActionCreateArgs : global::Pulumi.ResourceArgs
    {
        [Input("alertActions")]
        private InputList<string>? _alertActions;
        public InputList<string> AlertActions
        {
            get => _alertActions ?? (_alertActions = new InputList<string>());
            set => _alertActions = value;
        }

        /// <summary>
        /// An identifier that is used for alert deduplication. Default: `{{alias}}`.
        /// </summary>
        [Input("alias")]
        public Input<string>? Alias { get; set; }

        [Input("appendAttachments")]
        public Input<bool>? AppendAttachments { get; set; }

        [Input("customPriority")]
        public Input<string>? CustomPriority { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("entity")]
        public Input<string>? Entity { get; set; }

        [Input("extraProperties")]
        private InputMap<string>? _extraProperties;
        public InputMap<string> ExtraProperties
        {
            get => _extraProperties ?? (_extraProperties = new InputMap<string>());
            set => _extraProperties = value;
        }

        [Input("filters")]
        private InputList<Inputs.IntegrationActionCreateFilterArgs>? _filters;

        /// <summary>
        /// Used to specify rules for matching alerts and the filter type. Please note that depending on the integration type the field names in the filter conditions are:
        /// * For SNS integration: `actions`, `alias`, `entity`, `Message`, `recipients`, `responders`, `Subject`, `tags`, `teams`, `eventType`, `Timestamp`, `TopicArn`.
        /// * For API integration: `message`, `alias`, `description`, `source`, `entity`, `tags`, `actions`, `details`, `extra-properties`, `recipients`, `teams`, `priority`, `eventType`.
        /// * For Email integration: `from_address`, `from_name`, `conversationSubject`, `subject`
        /// </summary>
        public InputList<Inputs.IntegrationActionCreateFilterArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.IntegrationActionCreateFilterArgs>());
            set => _filters = value;
        }

        [Input("ignoreAlertActionsFromPayload")]
        public Input<bool>? IgnoreAlertActionsFromPayload { get; set; }

        [Input("ignoreExtraPropertiesFromPayload")]
        public Input<bool>? IgnoreExtraPropertiesFromPayload { get; set; }

        [Input("ignoreRespondersFromPayload")]
        public Input<bool>? IgnoreRespondersFromPayload { get; set; }

        [Input("ignoreTagsFromPayload")]
        public Input<bool>? IgnoreTagsFromPayload { get; set; }

        [Input("ignoreTeamsFromPayload")]
        public Input<bool>? IgnoreTeamsFromPayload { get; set; }

        [Input("message")]
        public Input<string>? Message { get; set; }

        /// <summary>
        /// Name of the integration action.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Additional alert action note.
        /// </summary>
        [Input("note")]
        public Input<string>? Note { get; set; }

        /// <summary>
        /// Integer value that defines in which order the action will be performed. Default: `1`.
        /// </summary>
        [Input("order")]
        public Input<int>? Order { get; set; }

        [Input("priority")]
        public Input<string>? Priority { get; set; }

        [Input("responders")]
        private InputList<Inputs.IntegrationActionCreateResponderArgs>? _responders;
        public InputList<Inputs.IntegrationActionCreateResponderArgs> Responders
        {
            get => _responders ?? (_responders = new InputList<Inputs.IntegrationActionCreateResponderArgs>());
            set => _responders = value;
        }

        [Input("source")]
        public Input<string>? Source { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Owner of the execution for integration action.
        /// </summary>
        [Input("user")]
        public Input<string>? User { get; set; }

        public IntegrationActionCreateArgs()
        {
        }
        public static new IntegrationActionCreateArgs Empty => new IntegrationActionCreateArgs();
    }
}
