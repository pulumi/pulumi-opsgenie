// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Opsgenie.Inputs
{

    public sealed class IntegrationActionIgnoreArgs : global::Pulumi.ResourceArgs
    {
        [Input("filters")]
        private InputList<Inputs.IntegrationActionIgnoreFilterArgs>? _filters;

        /// <summary>
        /// Used to specify rules for matching alerts and the filter type. Please note that depending on the integration type the field names in the filter conditions are:
        /// * For SNS integration: `Actions`, `Alias`, `Entity`, `Message`, `Recipients`, `Responders`, `Subject`, `Tags`, `Teams`, `eventType`, `Timestamp`, `TopicArn`.
        /// * For API integration: `Message`, `Alias`, `Description`, `Source`, `Entity`, `Tags`, `Actions`, `Details`, `extra-properties`, `Recipients`, `Teams`, `Priority`, `eventType`.
        /// * For Email integration: `FromAddress`, `FromName`, `conversationSubject`, `Subject`
        /// </summary>
        public InputList<Inputs.IntegrationActionIgnoreFilterArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.IntegrationActionIgnoreFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Name of the integration action.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Integer value that defines in which order the action will be performed. Default: `1`.
        /// </summary>
        [Input("order")]
        public Input<int>? Order { get; set; }

        /// <summary>
        /// The responder type - can be `Escalation`, `Team` or `User`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public IntegrationActionIgnoreArgs()
        {
        }
        public static new IntegrationActionIgnoreArgs Empty => new IntegrationActionIgnoreArgs();
    }
}
