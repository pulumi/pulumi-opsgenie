// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Opsgenie.Outputs
{

    [OutputType]
    public sealed class IntegrationActionCreate
    {
        public readonly ImmutableArray<string> AlertActions;
        /// <summary>
        /// An identifier that is used for alert deduplication. Default: `{{alias}}`.
        /// </summary>
        public readonly string? Alias;
        public readonly bool? AppendAttachments;
        /// <summary>
        /// Custom alert priority. e.g. ``{{message.substring(0,2)}}``
        /// </summary>
        public readonly string? CustomPriority;
        /// <summary>
        /// Detailed description of the alert, anything that may not have fit in the `message` field.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The entity the alert is related to.
        /// </summary>
        public readonly string? Entity;
        /// <summary>
        /// Set of user defined properties specified as a map.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? ExtraProperties;
        /// <summary>
        /// Used to specify rules for matching alerts and the filter type. Please note that depending on the integration type the field names in the filter conditions are:
        /// * For SNS integration: `actions`, `alias`, `entity`, `Message`, `recipients`, `responders`, `Subject`, `tags`, `teams`, `eventType`, `Timestamp`, `TopicArn`.
        /// * For API integration: `message`, `alias`, `description`, `source`, `entity`, `tags`, `actions`, `details`, `extra-properties`, `recipients`, `teams`, `priority`, `eventType`.
        /// * For Email integration: `from_address`, `from_name`, `conversationSubject`, `subject`
        /// </summary>
        public readonly ImmutableArray<Outputs.IntegrationActionCreateFilter> Filters;
        public readonly bool? IgnoreAlertActionsFromPayload;
        public readonly bool? IgnoreExtraPropertiesFromPayload;
        /// <summary>
        /// If enabled, the integration will ignore responders sent in request payloads.
        /// </summary>
        public readonly bool? IgnoreRespondersFromPayload;
        public readonly bool? IgnoreTagsFromPayload;
        /// <summary>
        /// If enabled, the integration will ignore teams sent in request payloads.
        /// </summary>
        public readonly bool? IgnoreTeamsFromPayload;
        /// <summary>
        /// Alert text limited to 130 characters.
        /// </summary>
        public readonly string? Message;
        /// <summary>
        /// Name of the integration action.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Additional alert action note.
        /// </summary>
        public readonly string? Note;
        /// <summary>
        /// Integer value that defines in which order the action will be performed. Default: `1`.
        /// </summary>
        public readonly int? Order;
        /// <summary>
        /// Alert priority.
        /// </summary>
        public readonly string? Priority;
        /// <summary>
        /// User, schedule, teams or escalation names to calculate which users will receive notifications of the alert.
        /// </summary>
        public readonly ImmutableArray<Outputs.IntegrationActionCreateResponder> Responders;
        /// <summary>
        /// User defined field to specify source of action.
        /// </summary>
        public readonly string? Source;
        /// <summary>
        /// Comma separated list of labels to be attached to the alert.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// The responder type - can be `escalation`, `team` or `user`.
        /// </summary>
        public readonly string? Type;
        /// <summary>
        /// Owner of the execution for integration action.
        /// </summary>
        public readonly string? User;

        [OutputConstructor]
        private IntegrationActionCreate(
            ImmutableArray<string> alertActions,

            string? alias,

            bool? appendAttachments,

            string? customPriority,

            string? description,

            string? entity,

            ImmutableDictionary<string, string>? extraProperties,

            ImmutableArray<Outputs.IntegrationActionCreateFilter> filters,

            bool? ignoreAlertActionsFromPayload,

            bool? ignoreExtraPropertiesFromPayload,

            bool? ignoreRespondersFromPayload,

            bool? ignoreTagsFromPayload,

            bool? ignoreTeamsFromPayload,

            string? message,

            string name,

            string? note,

            int? order,

            string? priority,

            ImmutableArray<Outputs.IntegrationActionCreateResponder> responders,

            string? source,

            ImmutableArray<string> tags,

            string? type,

            string? user)
        {
            AlertActions = alertActions;
            Alias = alias;
            AppendAttachments = appendAttachments;
            CustomPriority = customPriority;
            Description = description;
            Entity = entity;
            ExtraProperties = extraProperties;
            Filters = filters;
            IgnoreAlertActionsFromPayload = ignoreAlertActionsFromPayload;
            IgnoreExtraPropertiesFromPayload = ignoreExtraPropertiesFromPayload;
            IgnoreRespondersFromPayload = ignoreRespondersFromPayload;
            IgnoreTagsFromPayload = ignoreTagsFromPayload;
            IgnoreTeamsFromPayload = ignoreTeamsFromPayload;
            Message = message;
            Name = name;
            Note = note;
            Order = order;
            Priority = priority;
            Responders = responders;
            Source = source;
            Tags = tags;
            Type = type;
            User = user;
        }
    }
}
