// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Opsgenie
{
    /// <summary>
    /// Manages an Email Integration within Opsgenie.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Opsgenie = Pulumi.Opsgenie;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var testEmailIntegration = new Opsgenie.EmailIntegration("testEmailIntegration", new Opsgenie.EmailIntegrationArgs
    ///         {
    ///             EmailUsername = "fahri",
    ///         });
    ///         var testIndex_emailIntegrationEmailIntegration = new Opsgenie.EmailIntegration("testIndex/emailIntegrationEmailIntegration", new Opsgenie.EmailIntegrationArgs
    ///         {
    ///             Responders = 
    ///             {
    ///                 new Opsgenie.Inputs.EmailIntegrationResponderArgs
    ///                 {
    ///                     Type = "user",
    ///                     Id = opsgenie_user.Test.Id,
    ///                 },
    ///                 new Opsgenie.Inputs.EmailIntegrationResponderArgs
    ///                 {
    ///                     Type = "schedule",
    ///                     Id = opsgenie_schedule.Test.Id,
    ///                 },
    ///                 new Opsgenie.Inputs.EmailIntegrationResponderArgs
    ///                 {
    ///                     Type = "escalation",
    ///                     Id = opsgenie_escalation.Test.Id,
    ///                 },
    ///                 new Opsgenie.Inputs.EmailIntegrationResponderArgs
    ///                 {
    ///                     Type = "team",
    ///                     Id = opsgenie_team.Test2.Id,
    ///                 },
    ///             },
    ///             EmailUsername = "test",
    ///             Enabled = true,
    ///             IgnoreRespondersFromPayload = true,
    ///             SuppressNotifications = true,
    ///         });
    ///         var testOpsgenieIndex_emailIntegrationEmailIntegration = new Opsgenie.EmailIntegration("testOpsgenieIndex/emailIntegrationEmailIntegration", new Opsgenie.EmailIntegrationArgs
    ///         {
    ///             Responders = 
    ///             {
    ///                 new Opsgenie.Inputs.EmailIntegrationResponderArgs
    ///                 {
    ///                     Type = "user",
    ///                     Id = opsgenie_user.Test.Id,
    ///                 },
    ///             },
    ///             EmailUsername = "test",
    ///             Enabled = true,
    ///             IgnoreRespondersFromPayload = true,
    ///             SuppressNotifications = true,
    ///             OwnerTeamId = opsgenie_team_genies.Id,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Email Integrations can be imported using the `id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import opsgenie:index/emailIntegration:EmailIntegration test 812be1a1-32c8-4666-a7fb-03ecc385106c`
    /// ```
    /// </summary>
    public partial class EmailIntegration : Pulumi.CustomResource
    {
        /// <summary>
        /// The username part of the email address. It must be unique for each integration.
        /// </summary>
        [Output("emailUsername")]
        public Output<string> EmailUsername { get; private set; } = null!;

        /// <summary>
        /// A Member block as documented below.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// If enabled, the integration will ignore recipients sent in request payloads. Defaults to false.
        /// </summary>
        [Output("ignoreRespondersFromPayload")]
        public Output<bool?> IgnoreRespondersFromPayload { get; private set; } = null!;

        /// <summary>
        /// Name of the integration. Name must be unique for each integration.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Owner team id of the integration.
        /// </summary>
        [Output("ownerTeamId")]
        public Output<string?> OwnerTeamId { get; private set; } = null!;

        [Output("responders")]
        public Output<ImmutableArray<Outputs.EmailIntegrationResponder>> Responders { get; private set; } = null!;

        /// <summary>
        /// If enabled, notifications that come from alerts will be suppressed. Defaults to false.
        /// </summary>
        [Output("suppressNotifications")]
        public Output<bool?> SuppressNotifications { get; private set; } = null!;


        /// <summary>
        /// Create a EmailIntegration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EmailIntegration(string name, EmailIntegrationArgs args, CustomResourceOptions? options = null)
            : base("opsgenie:index/emailIntegration:EmailIntegration", name, args ?? new EmailIntegrationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EmailIntegration(string name, Input<string> id, EmailIntegrationState? state = null, CustomResourceOptions? options = null)
            : base("opsgenie:index/emailIntegration:EmailIntegration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EmailIntegration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EmailIntegration Get(string name, Input<string> id, EmailIntegrationState? state = null, CustomResourceOptions? options = null)
        {
            return new EmailIntegration(name, id, state, options);
        }
    }

    public sealed class EmailIntegrationArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The username part of the email address. It must be unique for each integration.
        /// </summary>
        [Input("emailUsername", required: true)]
        public Input<string> EmailUsername { get; set; } = null!;

        /// <summary>
        /// A Member block as documented below.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// If enabled, the integration will ignore recipients sent in request payloads. Defaults to false.
        /// </summary>
        [Input("ignoreRespondersFromPayload")]
        public Input<bool>? IgnoreRespondersFromPayload { get; set; }

        /// <summary>
        /// Name of the integration. Name must be unique for each integration.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Owner team id of the integration.
        /// </summary>
        [Input("ownerTeamId")]
        public Input<string>? OwnerTeamId { get; set; }

        [Input("responders")]
        private InputList<Inputs.EmailIntegrationResponderArgs>? _responders;
        public InputList<Inputs.EmailIntegrationResponderArgs> Responders
        {
            get => _responders ?? (_responders = new InputList<Inputs.EmailIntegrationResponderArgs>());
            set => _responders = value;
        }

        /// <summary>
        /// If enabled, notifications that come from alerts will be suppressed. Defaults to false.
        /// </summary>
        [Input("suppressNotifications")]
        public Input<bool>? SuppressNotifications { get; set; }

        public EmailIntegrationArgs()
        {
        }
    }

    public sealed class EmailIntegrationState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The username part of the email address. It must be unique for each integration.
        /// </summary>
        [Input("emailUsername")]
        public Input<string>? EmailUsername { get; set; }

        /// <summary>
        /// A Member block as documented below.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// If enabled, the integration will ignore recipients sent in request payloads. Defaults to false.
        /// </summary>
        [Input("ignoreRespondersFromPayload")]
        public Input<bool>? IgnoreRespondersFromPayload { get; set; }

        /// <summary>
        /// Name of the integration. Name must be unique for each integration.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Owner team id of the integration.
        /// </summary>
        [Input("ownerTeamId")]
        public Input<string>? OwnerTeamId { get; set; }

        [Input("responders")]
        private InputList<Inputs.EmailIntegrationResponderGetArgs>? _responders;
        public InputList<Inputs.EmailIntegrationResponderGetArgs> Responders
        {
            get => _responders ?? (_responders = new InputList<Inputs.EmailIntegrationResponderGetArgs>());
            set => _responders = value;
        }

        /// <summary>
        /// If enabled, notifications that come from alerts will be suppressed. Defaults to false.
        /// </summary>
        [Input("suppressNotifications")]
        public Input<bool>? SuppressNotifications { get; set; }

        public EmailIntegrationState()
        {
        }
    }
}
