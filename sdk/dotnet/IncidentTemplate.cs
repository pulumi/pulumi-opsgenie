// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Opsgenie
{
    /// <summary>
    /// Manages an Incident Template within Opsgenie.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Opsgenie = Pulumi.Opsgenie;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testTeam = new Opsgenie.Team("testTeam", new()
    ///     {
    ///         Description = "This team deals with all the things",
    ///     });
    /// 
    ///     var testService = new Opsgenie.Service("testService", new()
    ///     {
    ///         TeamId = testTeam.Id,
    ///     });
    /// 
    ///     var testIncidentTemplate = new Opsgenie.IncidentTemplate("testIncidentTemplate", new()
    ///     {
    ///         Message = "Incident Message",
    ///         Priority = "P2",
    ///         StakeholderProperties = new[]
    ///         {
    ///             new Opsgenie.Inputs.IncidentTemplateStakeholderPropertyArgs
    ///             {
    ///                 Enable = true,
    ///                 Message = "Stakeholder Message",
    ///                 Description = "Stakeholder Description",
    ///             },
    ///         },
    ///         Tags = new[]
    ///         {
    ///             "tag1",
    ///             "tag2",
    ///         },
    ///         Description = "Incident Description",
    ///         Details = 
    ///         {
    ///             { "key1", "value1" },
    ///             { "key2", "value2" },
    ///         },
    ///         ImpactedServices = new[]
    ///         {
    ///             testService.Id,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Service can be imported using the `template_id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import opsgenie:index/incidentTemplate:IncidentTemplate test template_id`
    /// ```
    /// </summary>
    [OpsgenieResourceType("opsgenie:index/incidentTemplate:IncidentTemplate")]
    public partial class IncidentTemplate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Description that is generally used to provide a detailed information about the alert. This field must not be longer than 15000 characters.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Map of key-value pairs to use as custom properties of the incident template. This field must not be longer than 8000 characters.
        /// </summary>
        [Output("details")]
        public Output<ImmutableDictionary<string, string>?> Details { get; private set; } = null!;

        [Output("impactedServices")]
        public Output<ImmutableArray<string>> ImpactedServices { get; private set; } = null!;

        /// <summary>
        /// Message that is to be passed to audience that is generally used to provide a content information about the alert.
        /// </summary>
        [Output("message")]
        public Output<string> Message { get; private set; } = null!;

        /// <summary>
        /// Name of the incident template.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Priority level of the incident. Possible values are `P1`, `P2`, `P3`, `P4` and `P5`.
        /// </summary>
        [Output("priority")]
        public Output<string> Priority { get; private set; } = null!;

        [Output("stakeholderProperties")]
        public Output<ImmutableArray<Outputs.IncidentTemplateStakeholderProperty>> StakeholderProperties { get; private set; } = null!;

        /// <summary>
        /// Tags of the incident template.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a IncidentTemplate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IncidentTemplate(string name, IncidentTemplateArgs args, CustomResourceOptions? options = null)
            : base("opsgenie:index/incidentTemplate:IncidentTemplate", name, args ?? new IncidentTemplateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IncidentTemplate(string name, Input<string> id, IncidentTemplateState? state = null, CustomResourceOptions? options = null)
            : base("opsgenie:index/incidentTemplate:IncidentTemplate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IncidentTemplate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IncidentTemplate Get(string name, Input<string> id, IncidentTemplateState? state = null, CustomResourceOptions? options = null)
        {
            return new IncidentTemplate(name, id, state, options);
        }
    }

    public sealed class IncidentTemplateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description that is generally used to provide a detailed information about the alert. This field must not be longer than 15000 characters.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("details")]
        private InputMap<string>? _details;

        /// <summary>
        /// Map of key-value pairs to use as custom properties of the incident template. This field must not be longer than 8000 characters.
        /// </summary>
        public InputMap<string> Details
        {
            get => _details ?? (_details = new InputMap<string>());
            set => _details = value;
        }

        [Input("impactedServices")]
        private InputList<string>? _impactedServices;
        public InputList<string> ImpactedServices
        {
            get => _impactedServices ?? (_impactedServices = new InputList<string>());
            set => _impactedServices = value;
        }

        /// <summary>
        /// Message that is to be passed to audience that is generally used to provide a content information about the alert.
        /// </summary>
        [Input("message", required: true)]
        public Input<string> Message { get; set; } = null!;

        /// <summary>
        /// Name of the incident template.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Priority level of the incident. Possible values are `P1`, `P2`, `P3`, `P4` and `P5`.
        /// </summary>
        [Input("priority", required: true)]
        public Input<string> Priority { get; set; } = null!;

        [Input("stakeholderProperties", required: true)]
        private InputList<Inputs.IncidentTemplateStakeholderPropertyArgs>? _stakeholderProperties;
        public InputList<Inputs.IncidentTemplateStakeholderPropertyArgs> StakeholderProperties
        {
            get => _stakeholderProperties ?? (_stakeholderProperties = new InputList<Inputs.IncidentTemplateStakeholderPropertyArgs>());
            set => _stakeholderProperties = value;
        }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags of the incident template.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public IncidentTemplateArgs()
        {
        }
        public static new IncidentTemplateArgs Empty => new IncidentTemplateArgs();
    }

    public sealed class IncidentTemplateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description that is generally used to provide a detailed information about the alert. This field must not be longer than 15000 characters.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("details")]
        private InputMap<string>? _details;

        /// <summary>
        /// Map of key-value pairs to use as custom properties of the incident template. This field must not be longer than 8000 characters.
        /// </summary>
        public InputMap<string> Details
        {
            get => _details ?? (_details = new InputMap<string>());
            set => _details = value;
        }

        [Input("impactedServices")]
        private InputList<string>? _impactedServices;
        public InputList<string> ImpactedServices
        {
            get => _impactedServices ?? (_impactedServices = new InputList<string>());
            set => _impactedServices = value;
        }

        /// <summary>
        /// Message that is to be passed to audience that is generally used to provide a content information about the alert.
        /// </summary>
        [Input("message")]
        public Input<string>? Message { get; set; }

        /// <summary>
        /// Name of the incident template.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Priority level of the incident. Possible values are `P1`, `P2`, `P3`, `P4` and `P5`.
        /// </summary>
        [Input("priority")]
        public Input<string>? Priority { get; set; }

        [Input("stakeholderProperties")]
        private InputList<Inputs.IncidentTemplateStakeholderPropertyGetArgs>? _stakeholderProperties;
        public InputList<Inputs.IncidentTemplateStakeholderPropertyGetArgs> StakeholderProperties
        {
            get => _stakeholderProperties ?? (_stakeholderProperties = new InputList<Inputs.IncidentTemplateStakeholderPropertyGetArgs>());
            set => _stakeholderProperties = value;
        }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags of the incident template.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public IncidentTemplateState()
        {
        }
        public static new IncidentTemplateState Empty => new IncidentTemplateState();
    }
}
