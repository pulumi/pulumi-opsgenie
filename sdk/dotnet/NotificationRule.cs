// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Opsgenie
{
    /// <summary>
    /// Manages a Notification Rule within Opsgenie.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Opsgenie = Pulumi.Opsgenie;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Opsgenie.User("test", new()
    ///     {
    ///         Username = "Example user",
    ///         FullName = "Name Lastname",
    ///         Role = "User",
    ///     });
    /// 
    ///     var testNotificationRule = new Opsgenie.NotificationRule("test", new()
    ///     {
    ///         Name = "Example notification rule",
    ///         Username = test.Username,
    ///         ActionType = "schedule-end",
    ///         NotificationTimes = new[]
    ///         {
    ///             "just-before",
    ///             "15-minutes-ago",
    ///         },
    ///         Steps = new[]
    ///         {
    ///             new Opsgenie.Inputs.NotificationRuleStepArgs
    ///             {
    ///                 Contacts = new[]
    ///                 {
    ///                     new Opsgenie.Inputs.NotificationRuleStepContactArgs
    ///                     {
    ///                         Method = "email",
    ///                         To = "example@user.com",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Notification policies can be imported using the `user_id/notification_rule_id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import opsgenie:index/notificationRule:NotificationRule test user_id/notification_rule_id`
    /// ```
    /// </summary>
    [OpsgenieResourceType("opsgenie:index/notificationRule:NotificationRule")]
    public partial class NotificationRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Type of the action that notification rule will have. Allowed values: `create-alert`, `acknowledged-alert`, `closed-alert`, `assigned-alert`, `add-note`, `schedule-start`, `schedule-end`, `incoming-call-routing`
        /// </summary>
        [Output("actionType")]
        public Output<string> ActionType { get; private set; } = null!;

        [Output("criterias")]
        public Output<ImmutableArray<Outputs.NotificationRuleCriteria>> Criterias { get; private set; } = null!;

        /// <summary>
        /// If policy should be enabled. Default: `True`
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// Name of the notification policy
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// List of Time Periods that notification for schedule start/end will be sent. Allowed values: `just-before`, `15-minutes-ago`, `1-hour-ago`, `1-day-ago`. If `ActionType` is `schedule-start` or `schedule-end` then it is required.
        /// </summary>
        [Output("notificationTimes")]
        public Output<ImmutableArray<string>> NotificationTimes { get; private set; } = null!;

        [Output("order")]
        public Output<int> Order { get; private set; } = null!;

        [Output("repeats")]
        public Output<ImmutableArray<Outputs.NotificationRuleRepeat>> Repeats { get; private set; } = null!;

        [Output("schedules")]
        public Output<ImmutableArray<Outputs.NotificationRuleSchedule>> Schedules { get; private set; } = null!;

        /// <summary>
        /// Notification rule steps to take (eg. SMS or email message). This is a block, structure is documented below.
        /// </summary>
        [Output("steps")]
        public Output<ImmutableArray<Outputs.NotificationRuleStep>> Steps { get; private set; } = null!;

        [Output("timeRestrictions")]
        public Output<ImmutableArray<Outputs.NotificationRuleTimeRestriction>> TimeRestrictions { get; private set; } = null!;

        /// <summary>
        /// Username of user to which this notification rule belongs to.
        /// </summary>
        [Output("username")]
        public Output<string> Username { get; private set; } = null!;


        /// <summary>
        /// Create a NotificationRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NotificationRule(string name, NotificationRuleArgs args, CustomResourceOptions? options = null)
            : base("opsgenie:index/notificationRule:NotificationRule", name, args ?? new NotificationRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NotificationRule(string name, Input<string> id, NotificationRuleState? state = null, CustomResourceOptions? options = null)
            : base("opsgenie:index/notificationRule:NotificationRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NotificationRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NotificationRule Get(string name, Input<string> id, NotificationRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new NotificationRule(name, id, state, options);
        }
    }

    public sealed class NotificationRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Type of the action that notification rule will have. Allowed values: `create-alert`, `acknowledged-alert`, `closed-alert`, `assigned-alert`, `add-note`, `schedule-start`, `schedule-end`, `incoming-call-routing`
        /// </summary>
        [Input("actionType", required: true)]
        public Input<string> ActionType { get; set; } = null!;

        [Input("criterias")]
        private InputList<Inputs.NotificationRuleCriteriaArgs>? _criterias;
        public InputList<Inputs.NotificationRuleCriteriaArgs> Criterias
        {
            get => _criterias ?? (_criterias = new InputList<Inputs.NotificationRuleCriteriaArgs>());
            set => _criterias = value;
        }

        /// <summary>
        /// If policy should be enabled. Default: `True`
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Name of the notification policy
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notificationTimes")]
        private InputList<string>? _notificationTimes;

        /// <summary>
        /// List of Time Periods that notification for schedule start/end will be sent. Allowed values: `just-before`, `15-minutes-ago`, `1-hour-ago`, `1-day-ago`. If `ActionType` is `schedule-start` or `schedule-end` then it is required.
        /// </summary>
        public InputList<string> NotificationTimes
        {
            get => _notificationTimes ?? (_notificationTimes = new InputList<string>());
            set => _notificationTimes = value;
        }

        [Input("order")]
        public Input<int>? Order { get; set; }

        [Input("repeats")]
        private InputList<Inputs.NotificationRuleRepeatArgs>? _repeats;
        public InputList<Inputs.NotificationRuleRepeatArgs> Repeats
        {
            get => _repeats ?? (_repeats = new InputList<Inputs.NotificationRuleRepeatArgs>());
            set => _repeats = value;
        }

        [Input("schedules")]
        private InputList<Inputs.NotificationRuleScheduleArgs>? _schedules;
        public InputList<Inputs.NotificationRuleScheduleArgs> Schedules
        {
            get => _schedules ?? (_schedules = new InputList<Inputs.NotificationRuleScheduleArgs>());
            set => _schedules = value;
        }

        [Input("steps")]
        private InputList<Inputs.NotificationRuleStepArgs>? _steps;

        /// <summary>
        /// Notification rule steps to take (eg. SMS or email message). This is a block, structure is documented below.
        /// </summary>
        public InputList<Inputs.NotificationRuleStepArgs> Steps
        {
            get => _steps ?? (_steps = new InputList<Inputs.NotificationRuleStepArgs>());
            set => _steps = value;
        }

        [Input("timeRestrictions")]
        private InputList<Inputs.NotificationRuleTimeRestrictionArgs>? _timeRestrictions;
        public InputList<Inputs.NotificationRuleTimeRestrictionArgs> TimeRestrictions
        {
            get => _timeRestrictions ?? (_timeRestrictions = new InputList<Inputs.NotificationRuleTimeRestrictionArgs>());
            set => _timeRestrictions = value;
        }

        /// <summary>
        /// Username of user to which this notification rule belongs to.
        /// </summary>
        [Input("username", required: true)]
        public Input<string> Username { get; set; } = null!;

        public NotificationRuleArgs()
        {
        }
        public static new NotificationRuleArgs Empty => new NotificationRuleArgs();
    }

    public sealed class NotificationRuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Type of the action that notification rule will have. Allowed values: `create-alert`, `acknowledged-alert`, `closed-alert`, `assigned-alert`, `add-note`, `schedule-start`, `schedule-end`, `incoming-call-routing`
        /// </summary>
        [Input("actionType")]
        public Input<string>? ActionType { get; set; }

        [Input("criterias")]
        private InputList<Inputs.NotificationRuleCriteriaGetArgs>? _criterias;
        public InputList<Inputs.NotificationRuleCriteriaGetArgs> Criterias
        {
            get => _criterias ?? (_criterias = new InputList<Inputs.NotificationRuleCriteriaGetArgs>());
            set => _criterias = value;
        }

        /// <summary>
        /// If policy should be enabled. Default: `True`
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Name of the notification policy
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notificationTimes")]
        private InputList<string>? _notificationTimes;

        /// <summary>
        /// List of Time Periods that notification for schedule start/end will be sent. Allowed values: `just-before`, `15-minutes-ago`, `1-hour-ago`, `1-day-ago`. If `ActionType` is `schedule-start` or `schedule-end` then it is required.
        /// </summary>
        public InputList<string> NotificationTimes
        {
            get => _notificationTimes ?? (_notificationTimes = new InputList<string>());
            set => _notificationTimes = value;
        }

        [Input("order")]
        public Input<int>? Order { get; set; }

        [Input("repeats")]
        private InputList<Inputs.NotificationRuleRepeatGetArgs>? _repeats;
        public InputList<Inputs.NotificationRuleRepeatGetArgs> Repeats
        {
            get => _repeats ?? (_repeats = new InputList<Inputs.NotificationRuleRepeatGetArgs>());
            set => _repeats = value;
        }

        [Input("schedules")]
        private InputList<Inputs.NotificationRuleScheduleGetArgs>? _schedules;
        public InputList<Inputs.NotificationRuleScheduleGetArgs> Schedules
        {
            get => _schedules ?? (_schedules = new InputList<Inputs.NotificationRuleScheduleGetArgs>());
            set => _schedules = value;
        }

        [Input("steps")]
        private InputList<Inputs.NotificationRuleStepGetArgs>? _steps;

        /// <summary>
        /// Notification rule steps to take (eg. SMS or email message). This is a block, structure is documented below.
        /// </summary>
        public InputList<Inputs.NotificationRuleStepGetArgs> Steps
        {
            get => _steps ?? (_steps = new InputList<Inputs.NotificationRuleStepGetArgs>());
            set => _steps = value;
        }

        [Input("timeRestrictions")]
        private InputList<Inputs.NotificationRuleTimeRestrictionGetArgs>? _timeRestrictions;
        public InputList<Inputs.NotificationRuleTimeRestrictionGetArgs> TimeRestrictions
        {
            get => _timeRestrictions ?? (_timeRestrictions = new InputList<Inputs.NotificationRuleTimeRestrictionGetArgs>());
            set => _timeRestrictions = value;
        }

        /// <summary>
        /// Username of user to which this notification rule belongs to.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public NotificationRuleState()
        {
        }
        public static new NotificationRuleState Empty => new NotificationRuleState();
    }
}
