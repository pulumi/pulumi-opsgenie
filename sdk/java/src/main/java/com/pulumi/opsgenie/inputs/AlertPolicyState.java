// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.opsgenie.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.opsgenie.inputs.AlertPolicyFilterArgs;
import com.pulumi.opsgenie.inputs.AlertPolicyResponderArgs;
import com.pulumi.opsgenie.inputs.AlertPolicyTimeRestrictionArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AlertPolicyState extends com.pulumi.resources.ResourceArgs {

    public static final AlertPolicyState Empty = new AlertPolicyState();

    /**
     * Actions to add to the alerts original actions value as a list of strings. If `ignoreOriginalActions` field is set to `true`, this will replace the original actions.
     * 
     */
    @Import(name="actions")
    private @Nullable Output<List<String>> actions;

    /**
     * @return Actions to add to the alerts original actions value as a list of strings. If `ignoreOriginalActions` field is set to `true`, this will replace the original actions.
     * 
     */
    public Optional<Output<List<String>>> actions() {
        return Optional.ofNullable(this.actions);
    }

    /**
     * Description of the alert. You can use `{{description}}` to refer to the original alert description. Default: `{{description}}`
     * 
     */
    @Import(name="alertDescription")
    private @Nullable Output<String> alertDescription;

    /**
     * @return Description of the alert. You can use `{{description}}` to refer to the original alert description. Default: `{{description}}`
     * 
     */
    public Optional<Output<String>> alertDescription() {
        return Optional.ofNullable(this.alertDescription);
    }

    /**
     * Alias of the alert. You can use `{{alias}}` to refer to the original alias. Default: `{{alias}}`
     * 
     */
    @Import(name="alias")
    private @Nullable Output<String> alias;

    /**
     * @return Alias of the alert. You can use `{{alias}}` to refer to the original alias. Default: `{{alias}}`
     * 
     */
    public Optional<Output<String>> alias() {
        return Optional.ofNullable(this.alias);
    }

    /**
     * It will trigger other modify policies if set to `true`. Default: `false`
     * 
     */
    @Import(name="continuePolicy")
    private @Nullable Output<Boolean> continuePolicy;

    /**
     * @return It will trigger other modify policies if set to `true`. Default: `false`
     * 
     */
    public Optional<Output<Boolean>> continuePolicy() {
        return Optional.ofNullable(this.continuePolicy);
    }

    /**
     * If policy should be enabled. Default: `true`
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return If policy should be enabled. Default: `true`
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Entity field of the alert. You can use `{{entity}}` to refer to the original entity. Default: `{{entity}}`
     * 
     */
    @Import(name="entity")
    private @Nullable Output<String> entity;

    /**
     * @return Entity field of the alert. You can use `{{entity}}` to refer to the original entity. Default: `{{entity}}`
     * 
     */
    public Optional<Output<String>> entity() {
        return Optional.ofNullable(this.entity);
    }

    /**
     * A alert filter which will be applied. This filter can be empty: `filter {}` - this means `match-all`. This is a block, structure is documented below.
     * 
     */
    @Import(name="filters")
    private @Nullable Output<List<AlertPolicyFilterArgs>> filters;

    /**
     * @return A alert filter which will be applied. This filter can be empty: `filter {}` - this means `match-all`. This is a block, structure is documented below.
     * 
     */
    public Optional<Output<List<AlertPolicyFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * If set to `true`, policy will ignore the original actions of the alert. Default: `false`
     * 
     */
    @Import(name="ignoreOriginalActions")
    private @Nullable Output<Boolean> ignoreOriginalActions;

    /**
     * @return If set to `true`, policy will ignore the original actions of the alert. Default: `false`
     * 
     */
    public Optional<Output<Boolean>> ignoreOriginalActions() {
        return Optional.ofNullable(this.ignoreOriginalActions);
    }

    /**
     * If set to `true`, policy will ignore the original details of the alert. Default: `false`
     * 
     */
    @Import(name="ignoreOriginalDetails")
    private @Nullable Output<Boolean> ignoreOriginalDetails;

    /**
     * @return If set to `true`, policy will ignore the original details of the alert. Default: `false`
     * 
     */
    public Optional<Output<Boolean>> ignoreOriginalDetails() {
        return Optional.ofNullable(this.ignoreOriginalDetails);
    }

    /**
     * If set to `true`, policy will ignore the original responders of the alert. Default: `false`
     * 
     */
    @Import(name="ignoreOriginalResponders")
    private @Nullable Output<Boolean> ignoreOriginalResponders;

    /**
     * @return If set to `true`, policy will ignore the original responders of the alert. Default: `false`
     * 
     */
    public Optional<Output<Boolean>> ignoreOriginalResponders() {
        return Optional.ofNullable(this.ignoreOriginalResponders);
    }

    /**
     * If set to `true`, policy will ignore the original tags of the alert. Default: `false`
     * 
     */
    @Import(name="ignoreOriginalTags")
    private @Nullable Output<Boolean> ignoreOriginalTags;

    /**
     * @return If set to `true`, policy will ignore the original tags of the alert. Default: `false`
     * 
     */
    public Optional<Output<Boolean>> ignoreOriginalTags() {
        return Optional.ofNullable(this.ignoreOriginalTags);
    }

    /**
     * Message of the alerts
     * 
     */
    @Import(name="message")
    private @Nullable Output<String> message;

    /**
     * @return Message of the alerts
     * 
     */
    public Optional<Output<String>> message() {
        return Optional.ofNullable(this.message);
    }

    /**
     * Name of the alert policy
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the alert policy
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Description of the policy. This can be max 512 characters.
     * 
     */
    @Import(name="policyDescription")
    private @Nullable Output<String> policyDescription;

    /**
     * @return Description of the policy. This can be max 512 characters.
     * 
     */
    public Optional<Output<String>> policyDescription() {
        return Optional.ofNullable(this.policyDescription);
    }

    /**
     * Priority of the alert. Should be one of `P1`, `P2`, `P3`, `P4`, or `P5`
     * 
     */
    @Import(name="priority")
    private @Nullable Output<String> priority;

    /**
     * @return Priority of the alert. Should be one of `P1`, `P2`, `P3`, `P4`, or `P5`
     * 
     */
    public Optional<Output<String>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * Responders to add to the alerts original responders value as a list of teams, users or the reserved word none or all. If `ignoreOriginalResponders` field is set to `true`, this will replace the original responders. The possible values for responders are: `user`, `team`, `escalation`, `schedule`. This is a block, structure is documented below.
     * 
     */
    @Import(name="responders")
    private @Nullable Output<List<AlertPolicyResponderArgs>> responders;

    /**
     * @return Responders to add to the alerts original responders value as a list of teams, users or the reserved word none or all. If `ignoreOriginalResponders` field is set to `true`, this will replace the original responders. The possible values for responders are: `user`, `team`, `escalation`, `schedule`. This is a block, structure is documented below.
     * 
     */
    public Optional<Output<List<AlertPolicyResponderArgs>>> responders() {
        return Optional.ofNullable(this.responders);
    }

    /**
     * Source field of the alert. You can use `{{source}}` to refer to the original source. Default: `{{source}}`
     * 
     */
    @Import(name="source")
    private @Nullable Output<String> source;

    /**
     * @return Source field of the alert. You can use `{{source}}` to refer to the original source. Default: `{{source}}`
     * 
     */
    public Optional<Output<String>> source() {
        return Optional.ofNullable(this.source);
    }

    /**
     * Tags to add to the alerts original tags value as a list of strings. If `ignoreOriginalResponders` field is set to `true`, this will replace the original responders.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return Tags to add to the alerts original tags value as a list of strings. If `ignoreOriginalResponders` field is set to `true`, this will replace the original responders.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Id of team that this policy belongs to.
     * 
     */
    @Import(name="teamId")
    private @Nullable Output<String> teamId;

    /**
     * @return Id of team that this policy belongs to.
     * 
     */
    public Optional<Output<String>> teamId() {
        return Optional.ofNullable(this.teamId);
    }

    /**
     * Time restrictions specified in this field must be met for this policy to work. This is a block, structure is documented below.
     * 
     */
    @Import(name="timeRestrictions")
    private @Nullable Output<List<AlertPolicyTimeRestrictionArgs>> timeRestrictions;

    /**
     * @return Time restrictions specified in this field must be met for this policy to work. This is a block, structure is documented below.
     * 
     */
    public Optional<Output<List<AlertPolicyTimeRestrictionArgs>>> timeRestrictions() {
        return Optional.ofNullable(this.timeRestrictions);
    }

    private AlertPolicyState() {}

    private AlertPolicyState(AlertPolicyState $) {
        this.actions = $.actions;
        this.alertDescription = $.alertDescription;
        this.alias = $.alias;
        this.continuePolicy = $.continuePolicy;
        this.enabled = $.enabled;
        this.entity = $.entity;
        this.filters = $.filters;
        this.ignoreOriginalActions = $.ignoreOriginalActions;
        this.ignoreOriginalDetails = $.ignoreOriginalDetails;
        this.ignoreOriginalResponders = $.ignoreOriginalResponders;
        this.ignoreOriginalTags = $.ignoreOriginalTags;
        this.message = $.message;
        this.name = $.name;
        this.policyDescription = $.policyDescription;
        this.priority = $.priority;
        this.responders = $.responders;
        this.source = $.source;
        this.tags = $.tags;
        this.teamId = $.teamId;
        this.timeRestrictions = $.timeRestrictions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AlertPolicyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AlertPolicyState $;

        public Builder() {
            $ = new AlertPolicyState();
        }

        public Builder(AlertPolicyState defaults) {
            $ = new AlertPolicyState(Objects.requireNonNull(defaults));
        }

        /**
         * @param actions Actions to add to the alerts original actions value as a list of strings. If `ignoreOriginalActions` field is set to `true`, this will replace the original actions.
         * 
         * @return builder
         * 
         */
        public Builder actions(@Nullable Output<List<String>> actions) {
            $.actions = actions;
            return this;
        }

        /**
         * @param actions Actions to add to the alerts original actions value as a list of strings. If `ignoreOriginalActions` field is set to `true`, this will replace the original actions.
         * 
         * @return builder
         * 
         */
        public Builder actions(List<String> actions) {
            return actions(Output.of(actions));
        }

        /**
         * @param actions Actions to add to the alerts original actions value as a list of strings. If `ignoreOriginalActions` field is set to `true`, this will replace the original actions.
         * 
         * @return builder
         * 
         */
        public Builder actions(String... actions) {
            return actions(List.of(actions));
        }

        /**
         * @param alertDescription Description of the alert. You can use `{{description}}` to refer to the original alert description. Default: `{{description}}`
         * 
         * @return builder
         * 
         */
        public Builder alertDescription(@Nullable Output<String> alertDescription) {
            $.alertDescription = alertDescription;
            return this;
        }

        /**
         * @param alertDescription Description of the alert. You can use `{{description}}` to refer to the original alert description. Default: `{{description}}`
         * 
         * @return builder
         * 
         */
        public Builder alertDescription(String alertDescription) {
            return alertDescription(Output.of(alertDescription));
        }

        /**
         * @param alias Alias of the alert. You can use `{{alias}}` to refer to the original alias. Default: `{{alias}}`
         * 
         * @return builder
         * 
         */
        public Builder alias(@Nullable Output<String> alias) {
            $.alias = alias;
            return this;
        }

        /**
         * @param alias Alias of the alert. You can use `{{alias}}` to refer to the original alias. Default: `{{alias}}`
         * 
         * @return builder
         * 
         */
        public Builder alias(String alias) {
            return alias(Output.of(alias));
        }

        /**
         * @param continuePolicy It will trigger other modify policies if set to `true`. Default: `false`
         * 
         * @return builder
         * 
         */
        public Builder continuePolicy(@Nullable Output<Boolean> continuePolicy) {
            $.continuePolicy = continuePolicy;
            return this;
        }

        /**
         * @param continuePolicy It will trigger other modify policies if set to `true`. Default: `false`
         * 
         * @return builder
         * 
         */
        public Builder continuePolicy(Boolean continuePolicy) {
            return continuePolicy(Output.of(continuePolicy));
        }

        /**
         * @param enabled If policy should be enabled. Default: `true`
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled If policy should be enabled. Default: `true`
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param entity Entity field of the alert. You can use `{{entity}}` to refer to the original entity. Default: `{{entity}}`
         * 
         * @return builder
         * 
         */
        public Builder entity(@Nullable Output<String> entity) {
            $.entity = entity;
            return this;
        }

        /**
         * @param entity Entity field of the alert. You can use `{{entity}}` to refer to the original entity. Default: `{{entity}}`
         * 
         * @return builder
         * 
         */
        public Builder entity(String entity) {
            return entity(Output.of(entity));
        }

        /**
         * @param filters A alert filter which will be applied. This filter can be empty: `filter {}` - this means `match-all`. This is a block, structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder filters(@Nullable Output<List<AlertPolicyFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        /**
         * @param filters A alert filter which will be applied. This filter can be empty: `filter {}` - this means `match-all`. This is a block, structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder filters(List<AlertPolicyFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        /**
         * @param filters A alert filter which will be applied. This filter can be empty: `filter {}` - this means `match-all`. This is a block, structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder filters(AlertPolicyFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param ignoreOriginalActions If set to `true`, policy will ignore the original actions of the alert. Default: `false`
         * 
         * @return builder
         * 
         */
        public Builder ignoreOriginalActions(@Nullable Output<Boolean> ignoreOriginalActions) {
            $.ignoreOriginalActions = ignoreOriginalActions;
            return this;
        }

        /**
         * @param ignoreOriginalActions If set to `true`, policy will ignore the original actions of the alert. Default: `false`
         * 
         * @return builder
         * 
         */
        public Builder ignoreOriginalActions(Boolean ignoreOriginalActions) {
            return ignoreOriginalActions(Output.of(ignoreOriginalActions));
        }

        /**
         * @param ignoreOriginalDetails If set to `true`, policy will ignore the original details of the alert. Default: `false`
         * 
         * @return builder
         * 
         */
        public Builder ignoreOriginalDetails(@Nullable Output<Boolean> ignoreOriginalDetails) {
            $.ignoreOriginalDetails = ignoreOriginalDetails;
            return this;
        }

        /**
         * @param ignoreOriginalDetails If set to `true`, policy will ignore the original details of the alert. Default: `false`
         * 
         * @return builder
         * 
         */
        public Builder ignoreOriginalDetails(Boolean ignoreOriginalDetails) {
            return ignoreOriginalDetails(Output.of(ignoreOriginalDetails));
        }

        /**
         * @param ignoreOriginalResponders If set to `true`, policy will ignore the original responders of the alert. Default: `false`
         * 
         * @return builder
         * 
         */
        public Builder ignoreOriginalResponders(@Nullable Output<Boolean> ignoreOriginalResponders) {
            $.ignoreOriginalResponders = ignoreOriginalResponders;
            return this;
        }

        /**
         * @param ignoreOriginalResponders If set to `true`, policy will ignore the original responders of the alert. Default: `false`
         * 
         * @return builder
         * 
         */
        public Builder ignoreOriginalResponders(Boolean ignoreOriginalResponders) {
            return ignoreOriginalResponders(Output.of(ignoreOriginalResponders));
        }

        /**
         * @param ignoreOriginalTags If set to `true`, policy will ignore the original tags of the alert. Default: `false`
         * 
         * @return builder
         * 
         */
        public Builder ignoreOriginalTags(@Nullable Output<Boolean> ignoreOriginalTags) {
            $.ignoreOriginalTags = ignoreOriginalTags;
            return this;
        }

        /**
         * @param ignoreOriginalTags If set to `true`, policy will ignore the original tags of the alert. Default: `false`
         * 
         * @return builder
         * 
         */
        public Builder ignoreOriginalTags(Boolean ignoreOriginalTags) {
            return ignoreOriginalTags(Output.of(ignoreOriginalTags));
        }

        /**
         * @param message Message of the alerts
         * 
         * @return builder
         * 
         */
        public Builder message(@Nullable Output<String> message) {
            $.message = message;
            return this;
        }

        /**
         * @param message Message of the alerts
         * 
         * @return builder
         * 
         */
        public Builder message(String message) {
            return message(Output.of(message));
        }

        /**
         * @param name Name of the alert policy
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the alert policy
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param policyDescription Description of the policy. This can be max 512 characters.
         * 
         * @return builder
         * 
         */
        public Builder policyDescription(@Nullable Output<String> policyDescription) {
            $.policyDescription = policyDescription;
            return this;
        }

        /**
         * @param policyDescription Description of the policy. This can be max 512 characters.
         * 
         * @return builder
         * 
         */
        public Builder policyDescription(String policyDescription) {
            return policyDescription(Output.of(policyDescription));
        }

        /**
         * @param priority Priority of the alert. Should be one of `P1`, `P2`, `P3`, `P4`, or `P5`
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<String> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority Priority of the alert. Should be one of `P1`, `P2`, `P3`, `P4`, or `P5`
         * 
         * @return builder
         * 
         */
        public Builder priority(String priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param responders Responders to add to the alerts original responders value as a list of teams, users or the reserved word none or all. If `ignoreOriginalResponders` field is set to `true`, this will replace the original responders. The possible values for responders are: `user`, `team`, `escalation`, `schedule`. This is a block, structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder responders(@Nullable Output<List<AlertPolicyResponderArgs>> responders) {
            $.responders = responders;
            return this;
        }

        /**
         * @param responders Responders to add to the alerts original responders value as a list of teams, users or the reserved word none or all. If `ignoreOriginalResponders` field is set to `true`, this will replace the original responders. The possible values for responders are: `user`, `team`, `escalation`, `schedule`. This is a block, structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder responders(List<AlertPolicyResponderArgs> responders) {
            return responders(Output.of(responders));
        }

        /**
         * @param responders Responders to add to the alerts original responders value as a list of teams, users or the reserved word none or all. If `ignoreOriginalResponders` field is set to `true`, this will replace the original responders. The possible values for responders are: `user`, `team`, `escalation`, `schedule`. This is a block, structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder responders(AlertPolicyResponderArgs... responders) {
            return responders(List.of(responders));
        }

        /**
         * @param source Source field of the alert. You can use `{{source}}` to refer to the original source. Default: `{{source}}`
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable Output<String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source Source field of the alert. You can use `{{source}}` to refer to the original source. Default: `{{source}}`
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            return source(Output.of(source));
        }

        /**
         * @param tags Tags to add to the alerts original tags value as a list of strings. If `ignoreOriginalResponders` field is set to `true`, this will replace the original responders.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags to add to the alerts original tags value as a list of strings. If `ignoreOriginalResponders` field is set to `true`, this will replace the original responders.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Tags to add to the alerts original tags value as a list of strings. If `ignoreOriginalResponders` field is set to `true`, this will replace the original responders.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param teamId Id of team that this policy belongs to.
         * 
         * @return builder
         * 
         */
        public Builder teamId(@Nullable Output<String> teamId) {
            $.teamId = teamId;
            return this;
        }

        /**
         * @param teamId Id of team that this policy belongs to.
         * 
         * @return builder
         * 
         */
        public Builder teamId(String teamId) {
            return teamId(Output.of(teamId));
        }

        /**
         * @param timeRestrictions Time restrictions specified in this field must be met for this policy to work. This is a block, structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder timeRestrictions(@Nullable Output<List<AlertPolicyTimeRestrictionArgs>> timeRestrictions) {
            $.timeRestrictions = timeRestrictions;
            return this;
        }

        /**
         * @param timeRestrictions Time restrictions specified in this field must be met for this policy to work. This is a block, structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder timeRestrictions(List<AlertPolicyTimeRestrictionArgs> timeRestrictions) {
            return timeRestrictions(Output.of(timeRestrictions));
        }

        /**
         * @param timeRestrictions Time restrictions specified in this field must be met for this policy to work. This is a block, structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder timeRestrictions(AlertPolicyTimeRestrictionArgs... timeRestrictions) {
            return timeRestrictions(List.of(timeRestrictions));
        }

        public AlertPolicyState build() {
            return $;
        }
    }

}
