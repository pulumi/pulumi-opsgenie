// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.opsgenie.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.opsgenie.inputs.MaintenanceRuleEntityArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MaintenanceRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final MaintenanceRuleArgs Empty = new MaintenanceRuleArgs();

    /**
     * This field represents the entity that maintenance will be applied. Entity field takes two mandatory fields as id and type.
     * 
     */
    @Import(name="entities", required=true)
    private Output<List<MaintenanceRuleEntityArgs>> entities;

    /**
     * @return This field represents the entity that maintenance will be applied. Entity field takes two mandatory fields as id and type.
     * 
     */
    public Output<List<MaintenanceRuleEntityArgs>> entities() {
        return this.entities;
    }

    /**
     * State of rule that will be defined in maintenance and can take either enabled or disabled for policy type rules. This field has to be disabled for integration type entity rules.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return State of rule that will be defined in maintenance and can take either enabled or disabled for policy type rules. This field has to be disabled for integration type entity rules.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private MaintenanceRuleArgs() {}

    private MaintenanceRuleArgs(MaintenanceRuleArgs $) {
        this.entities = $.entities;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MaintenanceRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MaintenanceRuleArgs $;

        public Builder() {
            $ = new MaintenanceRuleArgs();
        }

        public Builder(MaintenanceRuleArgs defaults) {
            $ = new MaintenanceRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param entities This field represents the entity that maintenance will be applied. Entity field takes two mandatory fields as id and type.
         * 
         * @return builder
         * 
         */
        public Builder entities(Output<List<MaintenanceRuleEntityArgs>> entities) {
            $.entities = entities;
            return this;
        }

        /**
         * @param entities This field represents the entity that maintenance will be applied. Entity field takes two mandatory fields as id and type.
         * 
         * @return builder
         * 
         */
        public Builder entities(List<MaintenanceRuleEntityArgs> entities) {
            return entities(Output.of(entities));
        }

        /**
         * @param entities This field represents the entity that maintenance will be applied. Entity field takes two mandatory fields as id and type.
         * 
         * @return builder
         * 
         */
        public Builder entities(MaintenanceRuleEntityArgs... entities) {
            return entities(List.of(entities));
        }

        /**
         * @param state State of rule that will be defined in maintenance and can take either enabled or disabled for policy type rules. This field has to be disabled for integration type entity rules.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state State of rule that will be defined in maintenance and can take either enabled or disabled for policy type rules. This field has to be disabled for integration type entity rules.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public MaintenanceRuleArgs build() {
            $.entities = Objects.requireNonNull($.entities, "expected parameter 'entities' to be non-null");
            return $;
        }
    }

}
