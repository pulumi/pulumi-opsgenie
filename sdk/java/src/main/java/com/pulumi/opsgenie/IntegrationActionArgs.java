// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.opsgenie;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.opsgenie.inputs.IntegrationActionAcknowledgeArgs;
import com.pulumi.opsgenie.inputs.IntegrationActionAddNoteArgs;
import com.pulumi.opsgenie.inputs.IntegrationActionCloseArgs;
import com.pulumi.opsgenie.inputs.IntegrationActionCreateArgs;
import com.pulumi.opsgenie.inputs.IntegrationActionIgnoreArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IntegrationActionArgs extends com.pulumi.resources.ResourceArgs {

    public static final IntegrationActionArgs Empty = new IntegrationActionArgs();

    @Import(name="acknowledges")
    private @Nullable Output<List<IntegrationActionAcknowledgeArgs>> acknowledges;

    public Optional<Output<List<IntegrationActionAcknowledgeArgs>>> acknowledges() {
        return Optional.ofNullable(this.acknowledges);
    }

    @Import(name="addNotes")
    private @Nullable Output<List<IntegrationActionAddNoteArgs>> addNotes;

    public Optional<Output<List<IntegrationActionAddNoteArgs>>> addNotes() {
        return Optional.ofNullable(this.addNotes);
    }

    @Import(name="closes")
    private @Nullable Output<List<IntegrationActionCloseArgs>> closes;

    public Optional<Output<List<IntegrationActionCloseArgs>>> closes() {
        return Optional.ofNullable(this.closes);
    }

    @Import(name="creates")
    private @Nullable Output<List<IntegrationActionCreateArgs>> creates;

    public Optional<Output<List<IntegrationActionCreateArgs>>> creates() {
        return Optional.ofNullable(this.creates);
    }

    @Import(name="ignores")
    private @Nullable Output<List<IntegrationActionIgnoreArgs>> ignores;

    public Optional<Output<List<IntegrationActionIgnoreArgs>>> ignores() {
        return Optional.ofNullable(this.ignores);
    }

    /**
     * ID of the parent integration resource to bind to.
     * 
     */
    @Import(name="integrationId", required=true)
    private Output<String> integrationId;

    /**
     * @return ID of the parent integration resource to bind to.
     * 
     */
    public Output<String> integrationId() {
        return this.integrationId;
    }

    private IntegrationActionArgs() {}

    private IntegrationActionArgs(IntegrationActionArgs $) {
        this.acknowledges = $.acknowledges;
        this.addNotes = $.addNotes;
        this.closes = $.closes;
        this.creates = $.creates;
        this.ignores = $.ignores;
        this.integrationId = $.integrationId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IntegrationActionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IntegrationActionArgs $;

        public Builder() {
            $ = new IntegrationActionArgs();
        }

        public Builder(IntegrationActionArgs defaults) {
            $ = new IntegrationActionArgs(Objects.requireNonNull(defaults));
        }

        public Builder acknowledges(@Nullable Output<List<IntegrationActionAcknowledgeArgs>> acknowledges) {
            $.acknowledges = acknowledges;
            return this;
        }

        public Builder acknowledges(List<IntegrationActionAcknowledgeArgs> acknowledges) {
            return acknowledges(Output.of(acknowledges));
        }

        public Builder acknowledges(IntegrationActionAcknowledgeArgs... acknowledges) {
            return acknowledges(List.of(acknowledges));
        }

        public Builder addNotes(@Nullable Output<List<IntegrationActionAddNoteArgs>> addNotes) {
            $.addNotes = addNotes;
            return this;
        }

        public Builder addNotes(List<IntegrationActionAddNoteArgs> addNotes) {
            return addNotes(Output.of(addNotes));
        }

        public Builder addNotes(IntegrationActionAddNoteArgs... addNotes) {
            return addNotes(List.of(addNotes));
        }

        public Builder closes(@Nullable Output<List<IntegrationActionCloseArgs>> closes) {
            $.closes = closes;
            return this;
        }

        public Builder closes(List<IntegrationActionCloseArgs> closes) {
            return closes(Output.of(closes));
        }

        public Builder closes(IntegrationActionCloseArgs... closes) {
            return closes(List.of(closes));
        }

        public Builder creates(@Nullable Output<List<IntegrationActionCreateArgs>> creates) {
            $.creates = creates;
            return this;
        }

        public Builder creates(List<IntegrationActionCreateArgs> creates) {
            return creates(Output.of(creates));
        }

        public Builder creates(IntegrationActionCreateArgs... creates) {
            return creates(List.of(creates));
        }

        public Builder ignores(@Nullable Output<List<IntegrationActionIgnoreArgs>> ignores) {
            $.ignores = ignores;
            return this;
        }

        public Builder ignores(List<IntegrationActionIgnoreArgs> ignores) {
            return ignores(Output.of(ignores));
        }

        public Builder ignores(IntegrationActionIgnoreArgs... ignores) {
            return ignores(List.of(ignores));
        }

        /**
         * @param integrationId ID of the parent integration resource to bind to.
         * 
         * @return builder
         * 
         */
        public Builder integrationId(Output<String> integrationId) {
            $.integrationId = integrationId;
            return this;
        }

        /**
         * @param integrationId ID of the parent integration resource to bind to.
         * 
         * @return builder
         * 
         */
        public Builder integrationId(String integrationId) {
            return integrationId(Output.of(integrationId));
        }

        public IntegrationActionArgs build() {
            if ($.integrationId == null) {
                throw new MissingRequiredPropertyException("IntegrationActionArgs", "integrationId");
            }
            return $;
        }
    }

}
