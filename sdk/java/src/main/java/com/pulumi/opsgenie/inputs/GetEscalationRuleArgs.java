// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.opsgenie.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.opsgenie.inputs.GetEscalationRuleRecipientArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetEscalationRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetEscalationRuleArgs Empty = new GetEscalationRuleArgs();

    @Import(name="condition", required=true)
    private Output<String> condition;

    public Output<String> condition() {
        return this.condition;
    }

    @Import(name="delay", required=true)
    private Output<Integer> delay;

    public Output<Integer> delay() {
        return this.delay;
    }

    @Import(name="notifyType", required=true)
    private Output<String> notifyType;

    public Output<String> notifyType() {
        return this.notifyType;
    }

    @Import(name="recipients", required=true)
    private Output<List<GetEscalationRuleRecipientArgs>> recipients;

    public Output<List<GetEscalationRuleRecipientArgs>> recipients() {
        return this.recipients;
    }

    private GetEscalationRuleArgs() {}

    private GetEscalationRuleArgs(GetEscalationRuleArgs $) {
        this.condition = $.condition;
        this.delay = $.delay;
        this.notifyType = $.notifyType;
        this.recipients = $.recipients;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetEscalationRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetEscalationRuleArgs $;

        public Builder() {
            $ = new GetEscalationRuleArgs();
        }

        public Builder(GetEscalationRuleArgs defaults) {
            $ = new GetEscalationRuleArgs(Objects.requireNonNull(defaults));
        }

        public Builder condition(Output<String> condition) {
            $.condition = condition;
            return this;
        }

        public Builder condition(String condition) {
            return condition(Output.of(condition));
        }

        public Builder delay(Output<Integer> delay) {
            $.delay = delay;
            return this;
        }

        public Builder delay(Integer delay) {
            return delay(Output.of(delay));
        }

        public Builder notifyType(Output<String> notifyType) {
            $.notifyType = notifyType;
            return this;
        }

        public Builder notifyType(String notifyType) {
            return notifyType(Output.of(notifyType));
        }

        public Builder recipients(Output<List<GetEscalationRuleRecipientArgs>> recipients) {
            $.recipients = recipients;
            return this;
        }

        public Builder recipients(List<GetEscalationRuleRecipientArgs> recipients) {
            return recipients(Output.of(recipients));
        }

        public Builder recipients(GetEscalationRuleRecipientArgs... recipients) {
            return recipients(List.of(recipients));
        }

        public GetEscalationRuleArgs build() {
            $.condition = Objects.requireNonNull($.condition, "expected parameter 'condition' to be non-null");
            $.delay = Objects.requireNonNull($.delay, "expected parameter 'delay' to be non-null");
            $.notifyType = Objects.requireNonNull($.notifyType, "expected parameter 'notifyType' to be non-null");
            $.recipients = Objects.requireNonNull($.recipients, "expected parameter 'recipients' to be non-null");
            return $;
        }
    }

}
