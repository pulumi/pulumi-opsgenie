// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.opsgenie;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.opsgenie.inputs.EmailIntegrationResponderArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EmailIntegrationArgs extends com.pulumi.resources.ResourceArgs {

    public static final EmailIntegrationArgs Empty = new EmailIntegrationArgs();

    /**
     * The username part of the email address. It must be unique for each integration.
     * 
     */
    @Import(name="emailUsername", required=true)
    private Output<String> emailUsername;

    /**
     * @return The username part of the email address. It must be unique for each integration.
     * 
     */
    public Output<String> emailUsername() {
        return this.emailUsername;
    }

    /**
     * A Member block as documented below.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return A Member block as documented below.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * If enabled, the integration will ignore recipients sent in request payloads. Default: `false`.
     * 
     */
    @Import(name="ignoreRespondersFromPayload")
    private @Nullable Output<Boolean> ignoreRespondersFromPayload;

    /**
     * @return If enabled, the integration will ignore recipients sent in request payloads. Default: `false`.
     * 
     */
    public Optional<Output<Boolean>> ignoreRespondersFromPayload() {
        return Optional.ofNullable(this.ignoreRespondersFromPayload);
    }

    /**
     * Name of the integration. Name must be unique for each integration.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the integration. Name must be unique for each integration.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Owner team id of the integration.
     * 
     */
    @Import(name="ownerTeamId")
    private @Nullable Output<String> ownerTeamId;

    /**
     * @return Owner team id of the integration.
     * 
     */
    public Optional<Output<String>> ownerTeamId() {
        return Optional.ofNullable(this.ownerTeamId);
    }

    @Import(name="responders")
    private @Nullable Output<List<EmailIntegrationResponderArgs>> responders;

    public Optional<Output<List<EmailIntegrationResponderArgs>>> responders() {
        return Optional.ofNullable(this.responders);
    }

    /**
     * If enabled, notifications that come from alerts will be suppressed. Default: `false`.
     * 
     */
    @Import(name="suppressNotifications")
    private @Nullable Output<Boolean> suppressNotifications;

    /**
     * @return If enabled, notifications that come from alerts will be suppressed. Default: `false`.
     * 
     */
    public Optional<Output<Boolean>> suppressNotifications() {
        return Optional.ofNullable(this.suppressNotifications);
    }

    private EmailIntegrationArgs() {}

    private EmailIntegrationArgs(EmailIntegrationArgs $) {
        this.emailUsername = $.emailUsername;
        this.enabled = $.enabled;
        this.ignoreRespondersFromPayload = $.ignoreRespondersFromPayload;
        this.name = $.name;
        this.ownerTeamId = $.ownerTeamId;
        this.responders = $.responders;
        this.suppressNotifications = $.suppressNotifications;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EmailIntegrationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EmailIntegrationArgs $;

        public Builder() {
            $ = new EmailIntegrationArgs();
        }

        public Builder(EmailIntegrationArgs defaults) {
            $ = new EmailIntegrationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param emailUsername The username part of the email address. It must be unique for each integration.
         * 
         * @return builder
         * 
         */
        public Builder emailUsername(Output<String> emailUsername) {
            $.emailUsername = emailUsername;
            return this;
        }

        /**
         * @param emailUsername The username part of the email address. It must be unique for each integration.
         * 
         * @return builder
         * 
         */
        public Builder emailUsername(String emailUsername) {
            return emailUsername(Output.of(emailUsername));
        }

        /**
         * @param enabled A Member block as documented below.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled A Member block as documented below.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param ignoreRespondersFromPayload If enabled, the integration will ignore recipients sent in request payloads. Default: `false`.
         * 
         * @return builder
         * 
         */
        public Builder ignoreRespondersFromPayload(@Nullable Output<Boolean> ignoreRespondersFromPayload) {
            $.ignoreRespondersFromPayload = ignoreRespondersFromPayload;
            return this;
        }

        /**
         * @param ignoreRespondersFromPayload If enabled, the integration will ignore recipients sent in request payloads. Default: `false`.
         * 
         * @return builder
         * 
         */
        public Builder ignoreRespondersFromPayload(Boolean ignoreRespondersFromPayload) {
            return ignoreRespondersFromPayload(Output.of(ignoreRespondersFromPayload));
        }

        /**
         * @param name Name of the integration. Name must be unique for each integration.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the integration. Name must be unique for each integration.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param ownerTeamId Owner team id of the integration.
         * 
         * @return builder
         * 
         */
        public Builder ownerTeamId(@Nullable Output<String> ownerTeamId) {
            $.ownerTeamId = ownerTeamId;
            return this;
        }

        /**
         * @param ownerTeamId Owner team id of the integration.
         * 
         * @return builder
         * 
         */
        public Builder ownerTeamId(String ownerTeamId) {
            return ownerTeamId(Output.of(ownerTeamId));
        }

        public Builder responders(@Nullable Output<List<EmailIntegrationResponderArgs>> responders) {
            $.responders = responders;
            return this;
        }

        public Builder responders(List<EmailIntegrationResponderArgs> responders) {
            return responders(Output.of(responders));
        }

        public Builder responders(EmailIntegrationResponderArgs... responders) {
            return responders(List.of(responders));
        }

        /**
         * @param suppressNotifications If enabled, notifications that come from alerts will be suppressed. Default: `false`.
         * 
         * @return builder
         * 
         */
        public Builder suppressNotifications(@Nullable Output<Boolean> suppressNotifications) {
            $.suppressNotifications = suppressNotifications;
            return this;
        }

        /**
         * @param suppressNotifications If enabled, notifications that come from alerts will be suppressed. Default: `false`.
         * 
         * @return builder
         * 
         */
        public Builder suppressNotifications(Boolean suppressNotifications) {
            return suppressNotifications(Output.of(suppressNotifications));
        }

        public EmailIntegrationArgs build() {
            if ($.emailUsername == null) {
                throw new MissingRequiredPropertyException("EmailIntegrationArgs", "emailUsername");
            }
            return $;
        }
    }

}
