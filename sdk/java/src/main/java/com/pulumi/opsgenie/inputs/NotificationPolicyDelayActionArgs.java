// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.opsgenie.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.opsgenie.inputs.NotificationPolicyDelayActionDurationArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NotificationPolicyDelayActionArgs extends com.pulumi.resources.ResourceArgs {

    public static final NotificationPolicyDelayActionArgs Empty = new NotificationPolicyDelayActionArgs();

    /**
     * Defines until what day to delay or for what duration. Possible values are: `for-duration`, `next-time`, `next-weekday`, `next-monday`, `next-tuesday`, `next-wednesday`, `next-thursday`, `next-friday`, `next-saturday`, `next-sunday`
     * 
     */
    @Import(name="delayOption", required=true)
    private Output<String> delayOption;

    /**
     * @return Defines until what day to delay or for what duration. Possible values are: `for-duration`, `next-time`, `next-weekday`, `next-monday`, `next-tuesday`, `next-wednesday`, `next-thursday`, `next-friday`, `next-saturday`, `next-sunday`
     * 
     */
    public Output<String> delayOption() {
        return this.delayOption;
    }

    /**
     * Duration of this action. If `delay_option` = `for-duration` this has to be set. This is a block, structure is documented below.
     * 
     */
    @Import(name="durations")
    private @Nullable Output<List<NotificationPolicyDelayActionDurationArgs>> durations;

    /**
     * @return Duration of this action. If `delay_option` = `for-duration` this has to be set. This is a block, structure is documented below.
     * 
     */
    public Optional<Output<List<NotificationPolicyDelayActionDurationArgs>>> durations() {
        return Optional.ofNullable(this.durations);
    }

    /**
     * Until what hour notifications will be delayed. If `delay_option` is set to antyhing else then `for-duration` this has to be set.
     * 
     */
    @Import(name="untilHour")
    private @Nullable Output<Integer> untilHour;

    /**
     * @return Until what hour notifications will be delayed. If `delay_option` is set to antyhing else then `for-duration` this has to be set.
     * 
     */
    public Optional<Output<Integer>> untilHour() {
        return Optional.ofNullable(this.untilHour);
    }

    /**
     * Until what minute on `until_hour` notifications will be delayed. If `delay_option` is set to antyhing else then `for-duration` this has to be set.
     * 
     */
    @Import(name="untilMinute")
    private @Nullable Output<Integer> untilMinute;

    /**
     * @return Until what minute on `until_hour` notifications will be delayed. If `delay_option` is set to antyhing else then `for-duration` this has to be set.
     * 
     */
    public Optional<Output<Integer>> untilMinute() {
        return Optional.ofNullable(this.untilMinute);
    }

    private NotificationPolicyDelayActionArgs() {}

    private NotificationPolicyDelayActionArgs(NotificationPolicyDelayActionArgs $) {
        this.delayOption = $.delayOption;
        this.durations = $.durations;
        this.untilHour = $.untilHour;
        this.untilMinute = $.untilMinute;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NotificationPolicyDelayActionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NotificationPolicyDelayActionArgs $;

        public Builder() {
            $ = new NotificationPolicyDelayActionArgs();
        }

        public Builder(NotificationPolicyDelayActionArgs defaults) {
            $ = new NotificationPolicyDelayActionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param delayOption Defines until what day to delay or for what duration. Possible values are: `for-duration`, `next-time`, `next-weekday`, `next-monday`, `next-tuesday`, `next-wednesday`, `next-thursday`, `next-friday`, `next-saturday`, `next-sunday`
         * 
         * @return builder
         * 
         */
        public Builder delayOption(Output<String> delayOption) {
            $.delayOption = delayOption;
            return this;
        }

        /**
         * @param delayOption Defines until what day to delay or for what duration. Possible values are: `for-duration`, `next-time`, `next-weekday`, `next-monday`, `next-tuesday`, `next-wednesday`, `next-thursday`, `next-friday`, `next-saturday`, `next-sunday`
         * 
         * @return builder
         * 
         */
        public Builder delayOption(String delayOption) {
            return delayOption(Output.of(delayOption));
        }

        /**
         * @param durations Duration of this action. If `delay_option` = `for-duration` this has to be set. This is a block, structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder durations(@Nullable Output<List<NotificationPolicyDelayActionDurationArgs>> durations) {
            $.durations = durations;
            return this;
        }

        /**
         * @param durations Duration of this action. If `delay_option` = `for-duration` this has to be set. This is a block, structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder durations(List<NotificationPolicyDelayActionDurationArgs> durations) {
            return durations(Output.of(durations));
        }

        /**
         * @param durations Duration of this action. If `delay_option` = `for-duration` this has to be set. This is a block, structure is documented below.
         * 
         * @return builder
         * 
         */
        public Builder durations(NotificationPolicyDelayActionDurationArgs... durations) {
            return durations(List.of(durations));
        }

        /**
         * @param untilHour Until what hour notifications will be delayed. If `delay_option` is set to antyhing else then `for-duration` this has to be set.
         * 
         * @return builder
         * 
         */
        public Builder untilHour(@Nullable Output<Integer> untilHour) {
            $.untilHour = untilHour;
            return this;
        }

        /**
         * @param untilHour Until what hour notifications will be delayed. If `delay_option` is set to antyhing else then `for-duration` this has to be set.
         * 
         * @return builder
         * 
         */
        public Builder untilHour(Integer untilHour) {
            return untilHour(Output.of(untilHour));
        }

        /**
         * @param untilMinute Until what minute on `until_hour` notifications will be delayed. If `delay_option` is set to antyhing else then `for-duration` this has to be set.
         * 
         * @return builder
         * 
         */
        public Builder untilMinute(@Nullable Output<Integer> untilMinute) {
            $.untilMinute = untilMinute;
            return this;
        }

        /**
         * @param untilMinute Until what minute on `until_hour` notifications will be delayed. If `delay_option` is set to antyhing else then `for-duration` this has to be set.
         * 
         * @return builder
         * 
         */
        public Builder untilMinute(Integer untilMinute) {
            return untilMinute(Output.of(untilMinute));
        }

        public NotificationPolicyDelayActionArgs build() {
            if ($.delayOption == null) {
                throw new MissingRequiredPropertyException("NotificationPolicyDelayActionArgs", "delayOption");
            }
            return $;
        }
    }

}
