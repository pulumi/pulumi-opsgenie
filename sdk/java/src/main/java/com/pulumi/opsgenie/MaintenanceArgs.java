// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.opsgenie;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.opsgenie.inputs.MaintenanceRuleArgs;
import com.pulumi.opsgenie.inputs.MaintenanceTimeArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MaintenanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final MaintenanceArgs Empty = new MaintenanceArgs();

    /**
     * Description for the maintenance.
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return Description for the maintenance.
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * Rules of maintenance, which takes a list of rule objects and defines the maintenance rules over integrations and policies.
     * 
     */
    @Import(name="rules", required=true)
    private Output<List<MaintenanceRuleArgs>> rules;

    /**
     * @return Rules of maintenance, which takes a list of rule objects and defines the maintenance rules over integrations and policies.
     * 
     */
    public Output<List<MaintenanceRuleArgs>> rules() {
        return this.rules;
    }

    /**
     * Time configuration of maintenance. It takes a time object which has type, startDate and endDate fields
     * 
     */
    @Import(name="times")
    private @Nullable Output<List<MaintenanceTimeArgs>> times;

    /**
     * @return Time configuration of maintenance. It takes a time object which has type, startDate and endDate fields
     * 
     */
    public Optional<Output<List<MaintenanceTimeArgs>>> times() {
        return Optional.ofNullable(this.times);
    }

    private MaintenanceArgs() {}

    private MaintenanceArgs(MaintenanceArgs $) {
        this.description = $.description;
        this.rules = $.rules;
        this.times = $.times;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MaintenanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MaintenanceArgs $;

        public Builder() {
            $ = new MaintenanceArgs();
        }

        public Builder(MaintenanceArgs defaults) {
            $ = new MaintenanceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description for the maintenance.
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description for the maintenance.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param rules Rules of maintenance, which takes a list of rule objects and defines the maintenance rules over integrations and policies.
         * 
         * @return builder
         * 
         */
        public Builder rules(Output<List<MaintenanceRuleArgs>> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules Rules of maintenance, which takes a list of rule objects and defines the maintenance rules over integrations and policies.
         * 
         * @return builder
         * 
         */
        public Builder rules(List<MaintenanceRuleArgs> rules) {
            return rules(Output.of(rules));
        }

        /**
         * @param rules Rules of maintenance, which takes a list of rule objects and defines the maintenance rules over integrations and policies.
         * 
         * @return builder
         * 
         */
        public Builder rules(MaintenanceRuleArgs... rules) {
            return rules(List.of(rules));
        }

        /**
         * @param times Time configuration of maintenance. It takes a time object which has type, startDate and endDate fields
         * 
         * @return builder
         * 
         */
        public Builder times(@Nullable Output<List<MaintenanceTimeArgs>> times) {
            $.times = times;
            return this;
        }

        /**
         * @param times Time configuration of maintenance. It takes a time object which has type, startDate and endDate fields
         * 
         * @return builder
         * 
         */
        public Builder times(List<MaintenanceTimeArgs> times) {
            return times(Output.of(times));
        }

        /**
         * @param times Time configuration of maintenance. It takes a time object which has type, startDate and endDate fields
         * 
         * @return builder
         * 
         */
        public Builder times(MaintenanceTimeArgs... times) {
            return times(List.of(times));
        }

        public MaintenanceArgs build() {
            $.description = Objects.requireNonNull($.description, "expected parameter 'description' to be non-null");
            $.rules = Objects.requireNonNull($.rules, "expected parameter 'rules' to be non-null");
            return $;
        }
    }

}
