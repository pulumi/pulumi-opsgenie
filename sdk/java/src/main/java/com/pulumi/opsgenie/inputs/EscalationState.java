// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.opsgenie.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.opsgenie.inputs.EscalationRepeatArgs;
import com.pulumi.opsgenie.inputs.EscalationRuleArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EscalationState extends com.pulumi.resources.ResourceArgs {

    public static final EscalationState Empty = new EscalationState();

    /**
     * Description of the escalation.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the escalation.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Name of the escalation.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the escalation.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Owner team id of the escalation.
     * 
     */
    @Import(name="ownerTeamId")
    private @Nullable Output<String> ownerTeamId;

    /**
     * @return Owner team id of the escalation.
     * 
     */
    public Optional<Output<String>> ownerTeamId() {
        return Optional.ofNullable(this.ownerTeamId);
    }

    /**
     * Repeat preferences of the escalation including repeat interval, count, reverting acknowledge and seen states back and closing an alert automatically as soon as repeats are completed
     * 
     */
    @Import(name="repeats")
    private @Nullable Output<List<EscalationRepeatArgs>> repeats;

    /**
     * @return Repeat preferences of the escalation including repeat interval, count, reverting acknowledge and seen states back and closing an alert automatically as soon as repeats are completed
     * 
     */
    public Optional<Output<List<EscalationRepeatArgs>>> repeats() {
        return Optional.ofNullable(this.repeats);
    }

    /**
     * List of the escalation rules. See below for how rules are defined.
     * 
     */
    @Import(name="rules")
    private @Nullable Output<List<EscalationRuleArgs>> rules;

    /**
     * @return List of the escalation rules. See below for how rules are defined.
     * 
     */
    public Optional<Output<List<EscalationRuleArgs>>> rules() {
        return Optional.ofNullable(this.rules);
    }

    private EscalationState() {}

    private EscalationState(EscalationState $) {
        this.description = $.description;
        this.name = $.name;
        this.ownerTeamId = $.ownerTeamId;
        this.repeats = $.repeats;
        this.rules = $.rules;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EscalationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EscalationState $;

        public Builder() {
            $ = new EscalationState();
        }

        public Builder(EscalationState defaults) {
            $ = new EscalationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description of the escalation.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the escalation.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name Name of the escalation.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the escalation.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param ownerTeamId Owner team id of the escalation.
         * 
         * @return builder
         * 
         */
        public Builder ownerTeamId(@Nullable Output<String> ownerTeamId) {
            $.ownerTeamId = ownerTeamId;
            return this;
        }

        /**
         * @param ownerTeamId Owner team id of the escalation.
         * 
         * @return builder
         * 
         */
        public Builder ownerTeamId(String ownerTeamId) {
            return ownerTeamId(Output.of(ownerTeamId));
        }

        /**
         * @param repeats Repeat preferences of the escalation including repeat interval, count, reverting acknowledge and seen states back and closing an alert automatically as soon as repeats are completed
         * 
         * @return builder
         * 
         */
        public Builder repeats(@Nullable Output<List<EscalationRepeatArgs>> repeats) {
            $.repeats = repeats;
            return this;
        }

        /**
         * @param repeats Repeat preferences of the escalation including repeat interval, count, reverting acknowledge and seen states back and closing an alert automatically as soon as repeats are completed
         * 
         * @return builder
         * 
         */
        public Builder repeats(List<EscalationRepeatArgs> repeats) {
            return repeats(Output.of(repeats));
        }

        /**
         * @param repeats Repeat preferences of the escalation including repeat interval, count, reverting acknowledge and seen states back and closing an alert automatically as soon as repeats are completed
         * 
         * @return builder
         * 
         */
        public Builder repeats(EscalationRepeatArgs... repeats) {
            return repeats(List.of(repeats));
        }

        /**
         * @param rules List of the escalation rules. See below for how rules are defined.
         * 
         * @return builder
         * 
         */
        public Builder rules(@Nullable Output<List<EscalationRuleArgs>> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules List of the escalation rules. See below for how rules are defined.
         * 
         * @return builder
         * 
         */
        public Builder rules(List<EscalationRuleArgs> rules) {
            return rules(Output.of(rules));
        }

        /**
         * @param rules List of the escalation rules. See below for how rules are defined.
         * 
         * @return builder
         * 
         */
        public Builder rules(EscalationRuleArgs... rules) {
            return rules(List.of(rules));
        }

        public EscalationState build() {
            return $;
        }
    }

}
