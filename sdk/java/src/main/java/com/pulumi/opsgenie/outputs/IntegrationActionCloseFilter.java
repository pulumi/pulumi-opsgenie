// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.opsgenie.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.opsgenie.outputs.IntegrationActionCloseFilterCondition;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class IntegrationActionCloseFilter {
    private @Nullable List<IntegrationActionCloseFilterCondition> conditions;
    /**
     * @return The responder type - can be `escalation`, `team` or `user`.
     * 
     */
    private String type;

    private IntegrationActionCloseFilter() {}
    public List<IntegrationActionCloseFilterCondition> conditions() {
        return this.conditions == null ? List.of() : this.conditions;
    }
    /**
     * @return The responder type - can be `escalation`, `team` or `user`.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IntegrationActionCloseFilter defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<IntegrationActionCloseFilterCondition> conditions;
        private String type;
        public Builder() {}
        public Builder(IntegrationActionCloseFilter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.conditions = defaults.conditions;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder conditions(@Nullable List<IntegrationActionCloseFilterCondition> conditions) {

            this.conditions = conditions;
            return this;
        }
        public Builder conditions(IntegrationActionCloseFilterCondition... conditions) {
            return conditions(List.of(conditions));
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("IntegrationActionCloseFilter", "type");
            }
            this.type = type;
            return this;
        }
        public IntegrationActionCloseFilter build() {
            final var _resultValue = new IntegrationActionCloseFilter();
            _resultValue.conditions = conditions;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
