// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.opsgenie.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EscalationRepeatArgs extends com.pulumi.resources.ResourceArgs {

    public static final EscalationRepeatArgs Empty = new EscalationRepeatArgs();

    @Import(name="closeAlertAfterAll")
    private @Nullable Output<Boolean> closeAlertAfterAll;

    public Optional<Output<Boolean>> closeAlertAfterAll() {
        return Optional.ofNullable(this.closeAlertAfterAll);
    }

    @Import(name="count")
    private @Nullable Output<Integer> count;

    public Optional<Output<Integer>> count() {
        return Optional.ofNullable(this.count);
    }

    @Import(name="resetRecipientStates")
    private @Nullable Output<Boolean> resetRecipientStates;

    public Optional<Output<Boolean>> resetRecipientStates() {
        return Optional.ofNullable(this.resetRecipientStates);
    }

    @Import(name="waitInterval")
    private @Nullable Output<Integer> waitInterval;

    public Optional<Output<Integer>> waitInterval() {
        return Optional.ofNullable(this.waitInterval);
    }

    private EscalationRepeatArgs() {}

    private EscalationRepeatArgs(EscalationRepeatArgs $) {
        this.closeAlertAfterAll = $.closeAlertAfterAll;
        this.count = $.count;
        this.resetRecipientStates = $.resetRecipientStates;
        this.waitInterval = $.waitInterval;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EscalationRepeatArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EscalationRepeatArgs $;

        public Builder() {
            $ = new EscalationRepeatArgs();
        }

        public Builder(EscalationRepeatArgs defaults) {
            $ = new EscalationRepeatArgs(Objects.requireNonNull(defaults));
        }

        public Builder closeAlertAfterAll(@Nullable Output<Boolean> closeAlertAfterAll) {
            $.closeAlertAfterAll = closeAlertAfterAll;
            return this;
        }

        public Builder closeAlertAfterAll(Boolean closeAlertAfterAll) {
            return closeAlertAfterAll(Output.of(closeAlertAfterAll));
        }

        public Builder count(@Nullable Output<Integer> count) {
            $.count = count;
            return this;
        }

        public Builder count(Integer count) {
            return count(Output.of(count));
        }

        public Builder resetRecipientStates(@Nullable Output<Boolean> resetRecipientStates) {
            $.resetRecipientStates = resetRecipientStates;
            return this;
        }

        public Builder resetRecipientStates(Boolean resetRecipientStates) {
            return resetRecipientStates(Output.of(resetRecipientStates));
        }

        public Builder waitInterval(@Nullable Output<Integer> waitInterval) {
            $.waitInterval = waitInterval;
            return this;
        }

        public Builder waitInterval(Integer waitInterval) {
            return waitInterval(Output.of(waitInterval));
        }

        public EscalationRepeatArgs build() {
            return $;
        }
    }

}
