// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.opsgenie.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AlertPolicyResponderArgs extends com.pulumi.resources.ResourceArgs {

    public static final AlertPolicyResponderArgs Empty = new AlertPolicyResponderArgs();

    /**
     * ID of the responder
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return ID of the responder
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * Name of the responder
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the responder
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Type of responder. Acceptable values are: `user`, `team`, `escalation` or `schedule`
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of responder. Acceptable values are: `user`, `team`, `escalation` or `schedule`
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * Username of the responder
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return Username of the responder
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private AlertPolicyResponderArgs() {}

    private AlertPolicyResponderArgs(AlertPolicyResponderArgs $) {
        this.id = $.id;
        this.name = $.name;
        this.type = $.type;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AlertPolicyResponderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AlertPolicyResponderArgs $;

        public Builder() {
            $ = new AlertPolicyResponderArgs();
        }

        public Builder(AlertPolicyResponderArgs defaults) {
            $ = new AlertPolicyResponderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param id ID of the responder
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id ID of the responder
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param name Name of the responder
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the responder
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param type Type of responder. Acceptable values are: `user`, `team`, `escalation` or `schedule`
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of responder. Acceptable values are: `user`, `team`, `escalation` or `schedule`
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param username Username of the responder
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username Username of the responder
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public AlertPolicyResponderArgs build() {
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
