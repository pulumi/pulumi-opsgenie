// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.opsgenie.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.opsgenie.inputs.TeamRoutingRuleCriteriaConditionArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TeamRoutingRuleCriteriaArgs extends com.pulumi.resources.ResourceArgs {

    public static final TeamRoutingRuleCriteriaArgs Empty = new TeamRoutingRuleCriteriaArgs();

    /**
     * List of conditions will be checked before applying team routing rule. This field declaration should be omitted if the criteria type is set to match-all.
     * 
     */
    @Import(name="conditions")
    private @Nullable Output<List<TeamRoutingRuleCriteriaConditionArgs>> conditions;

    /**
     * @return List of conditions will be checked before applying team routing rule. This field declaration should be omitted if the criteria type is set to match-all.
     * 
     */
    public Optional<Output<List<TeamRoutingRuleCriteriaConditionArgs>>> conditions() {
        return Optional.ofNullable(this.conditions);
    }

    /**
     * Type of the operation will be applied on conditions. Should be one of `match-all`, `match-any-condition` or `match-all-conditions`.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of the operation will be applied on conditions. Should be one of `match-all`, `match-any-condition` or `match-all-conditions`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private TeamRoutingRuleCriteriaArgs() {}

    private TeamRoutingRuleCriteriaArgs(TeamRoutingRuleCriteriaArgs $) {
        this.conditions = $.conditions;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TeamRoutingRuleCriteriaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TeamRoutingRuleCriteriaArgs $;

        public Builder() {
            $ = new TeamRoutingRuleCriteriaArgs();
        }

        public Builder(TeamRoutingRuleCriteriaArgs defaults) {
            $ = new TeamRoutingRuleCriteriaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param conditions List of conditions will be checked before applying team routing rule. This field declaration should be omitted if the criteria type is set to match-all.
         * 
         * @return builder
         * 
         */
        public Builder conditions(@Nullable Output<List<TeamRoutingRuleCriteriaConditionArgs>> conditions) {
            $.conditions = conditions;
            return this;
        }

        /**
         * @param conditions List of conditions will be checked before applying team routing rule. This field declaration should be omitted if the criteria type is set to match-all.
         * 
         * @return builder
         * 
         */
        public Builder conditions(List<TeamRoutingRuleCriteriaConditionArgs> conditions) {
            return conditions(Output.of(conditions));
        }

        /**
         * @param conditions List of conditions will be checked before applying team routing rule. This field declaration should be omitted if the criteria type is set to match-all.
         * 
         * @return builder
         * 
         */
        public Builder conditions(TeamRoutingRuleCriteriaConditionArgs... conditions) {
            return conditions(List.of(conditions));
        }

        /**
         * @param type Type of the operation will be applied on conditions. Should be one of `match-all`, `match-any-condition` or `match-all-conditions`.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of the operation will be applied on conditions. Should be one of `match-all`, `match-any-condition` or `match-all-conditions`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public TeamRoutingRuleCriteriaArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
