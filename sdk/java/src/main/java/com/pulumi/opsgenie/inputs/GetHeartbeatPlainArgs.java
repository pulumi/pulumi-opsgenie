// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.opsgenie.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetHeartbeatPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetHeartbeatPlainArgs Empty = new GetHeartbeatPlainArgs();

    /**
     * Specifies the alert message for heartbeat expiration alert. If this is not provided, default alert message is &#34;HeartbeatName is expired&#34;.
     * 
     */
    @Import(name="alertMessage")
    private @Nullable String alertMessage;

    /**
     * @return Specifies the alert message for heartbeat expiration alert. If this is not provided, default alert message is &#34;HeartbeatName is expired&#34;.
     * 
     */
    public Optional<String> alertMessage() {
        return Optional.ofNullable(this.alertMessage);
    }

    /**
     * Specifies the alert priority for heartbeat expiration alert. If this is not provided, default priority is P3.
     * 
     */
    @Import(name="alertPriority")
    private @Nullable String alertPriority;

    /**
     * @return Specifies the alert priority for heartbeat expiration alert. If this is not provided, default priority is P3.
     * 
     */
    public Optional<String> alertPriority() {
        return Optional.ofNullable(this.alertPriority);
    }

    /**
     * Specifies the alert tags for heartbeat expiration alert.
     * 
     */
    @Import(name="alertTags")
    private @Nullable List<String> alertTags;

    /**
     * @return Specifies the alert tags for heartbeat expiration alert.
     * 
     */
    public Optional<List<String>> alertTags() {
        return Optional.ofNullable(this.alertTags);
    }

    /**
     * An optional description of the heartbeat
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return An optional description of the heartbeat
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Enable/disable heartbeat monitoring.
     * 
     */
    @Import(name="enabled")
    private @Nullable Boolean enabled;

    /**
     * @return Enable/disable heartbeat monitoring.
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Specifies how often a heartbeat message should be expected.
     * 
     */
    @Import(name="interval")
    private @Nullable Integer interval;

    /**
     * @return Specifies how often a heartbeat message should be expected.
     * 
     */
    public Optional<Integer> interval() {
        return Optional.ofNullable(this.interval);
    }

    /**
     * Interval specified as minutes, hours or days.
     * 
     */
    @Import(name="intervalUnit")
    private @Nullable String intervalUnit;

    /**
     * @return Interval specified as minutes, hours or days.
     * 
     */
    public Optional<String> intervalUnit() {
        return Optional.ofNullable(this.intervalUnit);
    }

    /**
     * Name of the heartbeat
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return Name of the heartbeat
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * Owner team of the heartbeat.
     * 
     */
    @Import(name="ownerTeamId")
    private @Nullable String ownerTeamId;

    /**
     * @return Owner team of the heartbeat.
     * 
     */
    public Optional<String> ownerTeamId() {
        return Optional.ofNullable(this.ownerTeamId);
    }

    private GetHeartbeatPlainArgs() {}

    private GetHeartbeatPlainArgs(GetHeartbeatPlainArgs $) {
        this.alertMessage = $.alertMessage;
        this.alertPriority = $.alertPriority;
        this.alertTags = $.alertTags;
        this.description = $.description;
        this.enabled = $.enabled;
        this.interval = $.interval;
        this.intervalUnit = $.intervalUnit;
        this.name = $.name;
        this.ownerTeamId = $.ownerTeamId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetHeartbeatPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetHeartbeatPlainArgs $;

        public Builder() {
            $ = new GetHeartbeatPlainArgs();
        }

        public Builder(GetHeartbeatPlainArgs defaults) {
            $ = new GetHeartbeatPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param alertMessage Specifies the alert message for heartbeat expiration alert. If this is not provided, default alert message is &#34;HeartbeatName is expired&#34;.
         * 
         * @return builder
         * 
         */
        public Builder alertMessage(@Nullable String alertMessage) {
            $.alertMessage = alertMessage;
            return this;
        }

        /**
         * @param alertPriority Specifies the alert priority for heartbeat expiration alert. If this is not provided, default priority is P3.
         * 
         * @return builder
         * 
         */
        public Builder alertPriority(@Nullable String alertPriority) {
            $.alertPriority = alertPriority;
            return this;
        }

        /**
         * @param alertTags Specifies the alert tags for heartbeat expiration alert.
         * 
         * @return builder
         * 
         */
        public Builder alertTags(@Nullable List<String> alertTags) {
            $.alertTags = alertTags;
            return this;
        }

        /**
         * @param alertTags Specifies the alert tags for heartbeat expiration alert.
         * 
         * @return builder
         * 
         */
        public Builder alertTags(String... alertTags) {
            return alertTags(List.of(alertTags));
        }

        /**
         * @param description An optional description of the heartbeat
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param enabled Enable/disable heartbeat monitoring.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Boolean enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param interval Specifies how often a heartbeat message should be expected.
         * 
         * @return builder
         * 
         */
        public Builder interval(@Nullable Integer interval) {
            $.interval = interval;
            return this;
        }

        /**
         * @param intervalUnit Interval specified as minutes, hours or days.
         * 
         * @return builder
         * 
         */
        public Builder intervalUnit(@Nullable String intervalUnit) {
            $.intervalUnit = intervalUnit;
            return this;
        }

        /**
         * @param name Name of the heartbeat
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param ownerTeamId Owner team of the heartbeat.
         * 
         * @return builder
         * 
         */
        public Builder ownerTeamId(@Nullable String ownerTeamId) {
            $.ownerTeamId = ownerTeamId;
            return this;
        }

        public GetHeartbeatPlainArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
