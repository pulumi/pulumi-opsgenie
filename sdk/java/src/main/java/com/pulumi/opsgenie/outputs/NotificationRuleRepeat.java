// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.opsgenie.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class NotificationRuleRepeat {
    /**
     * @return Defined if this step is enabled. Default: `true`
     * 
     */
    private final @Nullable Boolean enabled;
    private final Integer loopAfter;

    @CustomType.Constructor
    private NotificationRuleRepeat(
        @CustomType.Parameter("enabled") @Nullable Boolean enabled,
        @CustomType.Parameter("loopAfter") Integer loopAfter) {
        this.enabled = enabled;
        this.loopAfter = loopAfter;
    }

    /**
     * @return Defined if this step is enabled. Default: `true`
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    public Integer loopAfter() {
        return this.loopAfter;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NotificationRuleRepeat defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean enabled;
        private Integer loopAfter;

        public Builder() {
    	      // Empty
        }

        public Builder(NotificationRuleRepeat defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enabled = defaults.enabled;
    	      this.loopAfter = defaults.loopAfter;
        }

        public Builder enabled(@Nullable Boolean enabled) {
            this.enabled = enabled;
            return this;
        }
        public Builder loopAfter(Integer loopAfter) {
            this.loopAfter = Objects.requireNonNull(loopAfter);
            return this;
        }        public NotificationRuleRepeat build() {
            return new NotificationRuleRepeat(enabled, loopAfter);
        }
    }
}
