// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.opsgenie.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.util.Objects;


public final class ScheduleRotationTimeRestrictionRestrictionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScheduleRotationTimeRestrictionRestrictionArgs Empty = new ScheduleRotationTimeRestrictionRestrictionArgs();

    /**
     * Value of the hour that frame will end.
     * 
     */
    @Import(name="endHour", required=true)
    private Output<Integer> endHour;

    /**
     * @return Value of the hour that frame will end.
     * 
     */
    public Output<Integer> endHour() {
        return this.endHour;
    }

    /**
     * Value of the minute that frame will end. Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically.
     * 
     */
    @Import(name="endMin", required=true)
    private Output<Integer> endMin;

    /**
     * @return Value of the minute that frame will end. Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically.
     * 
     */
    public Output<Integer> endMin() {
        return this.endMin;
    }

    /**
     * Value of the hour that frame will start.
     * 
     */
    @Import(name="startHour", required=true)
    private Output<Integer> startHour;

    /**
     * @return Value of the hour that frame will start.
     * 
     */
    public Output<Integer> startHour() {
        return this.startHour;
    }

    /**
     * Value of the minute that frame will start. Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically.
     * 
     */
    @Import(name="startMin", required=true)
    private Output<Integer> startMin;

    /**
     * @return Value of the minute that frame will start. Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically.
     * 
     */
    public Output<Integer> startMin() {
        return this.startMin;
    }

    private ScheduleRotationTimeRestrictionRestrictionArgs() {}

    private ScheduleRotationTimeRestrictionRestrictionArgs(ScheduleRotationTimeRestrictionRestrictionArgs $) {
        this.endHour = $.endHour;
        this.endMin = $.endMin;
        this.startHour = $.startHour;
        this.startMin = $.startMin;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScheduleRotationTimeRestrictionRestrictionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScheduleRotationTimeRestrictionRestrictionArgs $;

        public Builder() {
            $ = new ScheduleRotationTimeRestrictionRestrictionArgs();
        }

        public Builder(ScheduleRotationTimeRestrictionRestrictionArgs defaults) {
            $ = new ScheduleRotationTimeRestrictionRestrictionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param endHour Value of the hour that frame will end.
         * 
         * @return builder
         * 
         */
        public Builder endHour(Output<Integer> endHour) {
            $.endHour = endHour;
            return this;
        }

        /**
         * @param endHour Value of the hour that frame will end.
         * 
         * @return builder
         * 
         */
        public Builder endHour(Integer endHour) {
            return endHour(Output.of(endHour));
        }

        /**
         * @param endMin Value of the minute that frame will end. Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically.
         * 
         * @return builder
         * 
         */
        public Builder endMin(Output<Integer> endMin) {
            $.endMin = endMin;
            return this;
        }

        /**
         * @param endMin Value of the minute that frame will end. Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically.
         * 
         * @return builder
         * 
         */
        public Builder endMin(Integer endMin) {
            return endMin(Output.of(endMin));
        }

        /**
         * @param startHour Value of the hour that frame will start.
         * 
         * @return builder
         * 
         */
        public Builder startHour(Output<Integer> startHour) {
            $.startHour = startHour;
            return this;
        }

        /**
         * @param startHour Value of the hour that frame will start.
         * 
         * @return builder
         * 
         */
        public Builder startHour(Integer startHour) {
            return startHour(Output.of(startHour));
        }

        /**
         * @param startMin Value of the minute that frame will start. Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically.
         * 
         * @return builder
         * 
         */
        public Builder startMin(Output<Integer> startMin) {
            $.startMin = startMin;
            return this;
        }

        /**
         * @param startMin Value of the minute that frame will start. Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically.
         * 
         * @return builder
         * 
         */
        public Builder startMin(Integer startMin) {
            return startMin(Output.of(startMin));
        }

        public ScheduleRotationTimeRestrictionRestrictionArgs build() {
            if ($.endHour == null) {
                throw new MissingRequiredPropertyException("ScheduleRotationTimeRestrictionRestrictionArgs", "endHour");
            }
            if ($.endMin == null) {
                throw new MissingRequiredPropertyException("ScheduleRotationTimeRestrictionRestrictionArgs", "endMin");
            }
            if ($.startHour == null) {
                throw new MissingRequiredPropertyException("ScheduleRotationTimeRestrictionRestrictionArgs", "startHour");
            }
            if ($.startMin == null) {
                throw new MissingRequiredPropertyException("ScheduleRotationTimeRestrictionRestrictionArgs", "startMin");
            }
            return $;
        }
    }

}
