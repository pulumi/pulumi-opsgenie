// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.opsgenie.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.opsgenie.outputs.EscalationRuleRecipient;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class EscalationRule {
    /**
     * @return The condition for notifying the recipient of escalation rule that is based on the alert state. Possible values are: `if-not-acked` and `if-not-closed`. Default: `if-not-acked`
     * 
     */
    private final String condition;
    /**
     * @return Time delay of the escalation rule, in minutes.
     * 
     */
    private final Integer delay;
    /**
     * @return Recipient calculation logic for schedules. Possible values are:
     * 
     */
    private final String notifyType;
    /**
     * @return Object of schedule, team, or users which will be notified in escalation. The possible values for participants are: `user`, `schedule`, `team`.
     * 
     */
    private final List<EscalationRuleRecipient> recipients;

    @CustomType.Constructor
    private EscalationRule(
        @CustomType.Parameter("condition") String condition,
        @CustomType.Parameter("delay") Integer delay,
        @CustomType.Parameter("notifyType") String notifyType,
        @CustomType.Parameter("recipients") List<EscalationRuleRecipient> recipients) {
        this.condition = condition;
        this.delay = delay;
        this.notifyType = notifyType;
        this.recipients = recipients;
    }

    /**
     * @return The condition for notifying the recipient of escalation rule that is based on the alert state. Possible values are: `if-not-acked` and `if-not-closed`. Default: `if-not-acked`
     * 
     */
    public String condition() {
        return this.condition;
    }
    /**
     * @return Time delay of the escalation rule, in minutes.
     * 
     */
    public Integer delay() {
        return this.delay;
    }
    /**
     * @return Recipient calculation logic for schedules. Possible values are:
     * 
     */
    public String notifyType() {
        return this.notifyType;
    }
    /**
     * @return Object of schedule, team, or users which will be notified in escalation. The possible values for participants are: `user`, `schedule`, `team`.
     * 
     */
    public List<EscalationRuleRecipient> recipients() {
        return this.recipients;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EscalationRule defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String condition;
        private Integer delay;
        private String notifyType;
        private List<EscalationRuleRecipient> recipients;

        public Builder() {
    	      // Empty
        }

        public Builder(EscalationRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.condition = defaults.condition;
    	      this.delay = defaults.delay;
    	      this.notifyType = defaults.notifyType;
    	      this.recipients = defaults.recipients;
        }

        public Builder condition(String condition) {
            this.condition = Objects.requireNonNull(condition);
            return this;
        }
        public Builder delay(Integer delay) {
            this.delay = Objects.requireNonNull(delay);
            return this;
        }
        public Builder notifyType(String notifyType) {
            this.notifyType = Objects.requireNonNull(notifyType);
            return this;
        }
        public Builder recipients(List<EscalationRuleRecipient> recipients) {
            this.recipients = Objects.requireNonNull(recipients);
            return this;
        }
        public Builder recipients(EscalationRuleRecipient... recipients) {
            return recipients(List.of(recipients));
        }        public EscalationRule build() {
            return new EscalationRule(condition, delay, notifyType, recipients);
        }
    }
}
