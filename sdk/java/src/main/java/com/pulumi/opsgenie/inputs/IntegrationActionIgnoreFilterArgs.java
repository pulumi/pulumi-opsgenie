// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.opsgenie.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.opsgenie.inputs.IntegrationActionIgnoreFilterConditionArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IntegrationActionIgnoreFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final IntegrationActionIgnoreFilterArgs Empty = new IntegrationActionIgnoreFilterArgs();

    @Import(name="conditions")
    private @Nullable Output<List<IntegrationActionIgnoreFilterConditionArgs>> conditions;

    public Optional<Output<List<IntegrationActionIgnoreFilterConditionArgs>>> conditions() {
        return Optional.ofNullable(this.conditions);
    }

    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    private IntegrationActionIgnoreFilterArgs() {}

    private IntegrationActionIgnoreFilterArgs(IntegrationActionIgnoreFilterArgs $) {
        this.conditions = $.conditions;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IntegrationActionIgnoreFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IntegrationActionIgnoreFilterArgs $;

        public Builder() {
            $ = new IntegrationActionIgnoreFilterArgs();
        }

        public Builder(IntegrationActionIgnoreFilterArgs defaults) {
            $ = new IntegrationActionIgnoreFilterArgs(Objects.requireNonNull(defaults));
        }

        public Builder conditions(@Nullable Output<List<IntegrationActionIgnoreFilterConditionArgs>> conditions) {
            $.conditions = conditions;
            return this;
        }

        public Builder conditions(List<IntegrationActionIgnoreFilterConditionArgs> conditions) {
            return conditions(Output.of(conditions));
        }

        public Builder conditions(IntegrationActionIgnoreFilterConditionArgs... conditions) {
            return conditions(List.of(conditions));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public IntegrationActionIgnoreFilterArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("IntegrationActionIgnoreFilterArgs", "type");
            }
            return $;
        }
    }

}
