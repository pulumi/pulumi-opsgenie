# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['IncidentTemplate']


class IncidentTemplate(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 details: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 impacted_services: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 stakeholder_properties: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IncidentTemplateStakeholderPropertyArgs']]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Manages an Incident Template within Opsgenie.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_opsgenie as opsgenie

        test_team = opsgenie.Team("testTeam", description="This team deals with all the things")
        test_service = opsgenie.Service("testService", team_id=test_team.id)
        test_incident_template = opsgenie.IncidentTemplate("testIncidentTemplate",
            message="Incident Message",
            priority="P2",
            stakeholder_properties=[opsgenie.IncidentTemplateStakeholderPropertyArgs(
                enable=True,
                message="Stakeholder Message",
                description="Stakeholder Description",
            )],
            tags=[
                "tag1",
                "tag2",
            ],
            description="Incident Description",
            details={
                "key1": "value1",
                "key2": "value2",
            },
            impacted_services=[test_service.id])
        ```

        ## Import

        Service can be imported using the `id`, e.g.

        ```sh
         $ pulumi import opsgenie:index/incidentTemplate:IncidentTemplate test 812be1a1-32c8-4666-a7fb-03ecc385106c`
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description that is generally used to provide a detailed information about the alert. This field must not be longer than 15000 characters.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] details: Map of key-value pairs to use as custom properties of the incident template. This field must not be longer than 8000 characters.
        :param pulumi.Input[str] message: Message that is to be passed to audience that is generally used to provide a content information about the alert.
        :param pulumi.Input[str] name: Name of the incident template.
        :param pulumi.Input[str] priority: Priority level of the incident. Possible values are P1, P2, P3, P4 and P5.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: Tags of the incident template.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['description'] = description
            __props__['details'] = details
            __props__['impacted_services'] = impacted_services
            if message is None and not opts.urn:
                raise TypeError("Missing required property 'message'")
            __props__['message'] = message
            __props__['name'] = name
            if priority is None and not opts.urn:
                raise TypeError("Missing required property 'priority'")
            __props__['priority'] = priority
            if stakeholder_properties is None and not opts.urn:
                raise TypeError("Missing required property 'stakeholder_properties'")
            __props__['stakeholder_properties'] = stakeholder_properties
            __props__['tags'] = tags
        super(IncidentTemplate, __self__).__init__(
            'opsgenie:index/incidentTemplate:IncidentTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            details: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            impacted_services: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            message: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            priority: Optional[pulumi.Input[str]] = None,
            stakeholder_properties: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IncidentTemplateStakeholderPropertyArgs']]]]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'IncidentTemplate':
        """
        Get an existing IncidentTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description that is generally used to provide a detailed information about the alert. This field must not be longer than 15000 characters.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] details: Map of key-value pairs to use as custom properties of the incident template. This field must not be longer than 8000 characters.
        :param pulumi.Input[str] message: Message that is to be passed to audience that is generally used to provide a content information about the alert.
        :param pulumi.Input[str] name: Name of the incident template.
        :param pulumi.Input[str] priority: Priority level of the incident. Possible values are P1, P2, P3, P4 and P5.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: Tags of the incident template.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["description"] = description
        __props__["details"] = details
        __props__["impacted_services"] = impacted_services
        __props__["message"] = message
        __props__["name"] = name
        __props__["priority"] = priority
        __props__["stakeholder_properties"] = stakeholder_properties
        __props__["tags"] = tags
        return IncidentTemplate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description that is generally used to provide a detailed information about the alert. This field must not be longer than 15000 characters.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def details(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Map of key-value pairs to use as custom properties of the incident template. This field must not be longer than 8000 characters.
        """
        return pulumi.get(self, "details")

    @property
    @pulumi.getter(name="impactedServices")
    def impacted_services(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "impacted_services")

    @property
    @pulumi.getter
    def message(self) -> pulumi.Output[str]:
        """
        Message that is to be passed to audience that is generally used to provide a content information about the alert.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the incident template.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Output[str]:
        """
        Priority level of the incident. Possible values are P1, P2, P3, P4 and P5.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="stakeholderProperties")
    def stakeholder_properties(self) -> pulumi.Output[Sequence['outputs.IncidentTemplateStakeholderProperty']]:
        return pulumi.get(self, "stakeholder_properties")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Tags of the incident template.
        """
        return pulumi.get(self, "tags")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

