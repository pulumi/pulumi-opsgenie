# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['NotificationRule']


class NotificationRule(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action_type: Optional[pulumi.Input[str]] = None,
                 criterias: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NotificationRuleCriteriaArgs']]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notification_times: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 order: Optional[pulumi.Input[int]] = None,
                 repeats: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NotificationRuleRepeatArgs']]]]] = None,
                 schedules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NotificationRuleScheduleArgs']]]]] = None,
                 steps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NotificationRuleStepArgs']]]]] = None,
                 time_restrictions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NotificationRuleTimeRestrictionArgs']]]]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Manages a Notification Rule within Opsgenie.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_opsgenie as opsgenie

        test_user = opsgenie.User("testUser",
            username="Example user",
            full_name="Name Lastname",
            role="User")
        test_notification_rule = opsgenie.NotificationRule("testNotificationRule",
            username=test_user.username,
            action_type="schedule-end",
            notification_times=[
                "just-before",
                "15-minutes-ago",
            ],
            steps=[opsgenie.NotificationRuleStepArgs(
                contacts=[opsgenie.NotificationRuleStepContactArgs(
                    method="email",
                    to="example@user.com",
                )],
            )])
        ```

        ## Import

        Notification policies can be imported using the `user id` and `id`, e.g.

        ```sh
         $ pulumi import opsgenie:index/notificationRule:NotificationRule test userId/Id`
        ```

         For this example- User Id = `c827c472-31f2-497b-9ec6-8ec855d7d94c`

        - Notification Rule Id = `2d1a78d0-c13e-47d3-af0a-8b6d0cc2b7b1`

        ```sh
         $ pulumi import opsgenie:index/notificationRule:NotificationRule test c827c472-31f2-497b-9ec6-8ec855d7d94c/2d1a78d0-c13e-47d3-af0a-8b6d0cc2b7b1`
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] action_type: Type of the action that notification rule will have. Allowed values: "create-alert", "acknowledged-alert", "closed-alert", "assigned-alert", "add-note", "schedule-start", "schedule-end", "incoming-call-routing"
        :param pulumi.Input[bool] enabled: Defined if this step is enabled. Default: true
        :param pulumi.Input[str] name: Name of the notification policy
        :param pulumi.Input[Sequence[pulumi.Input[str]]] notification_times: List of Time Periods that notification for schedule start/end will be sent. Allowed values: "just-before", "15-minutes-ago", "1-hour-ago", "1-day-ago". If `action_type` is "schedule-start" or "schedule-end" then it is required.
        :param pulumi.Input[int] order: Order of the condition in conditions list
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NotificationRuleStepArgs']]]] steps: Notification rule steps to take (eg. SMS or email message). This is a block, structure is documented below.
        :param pulumi.Input[str] username: Username of user to which this notification rule belongs to.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if action_type is None and not opts.urn:
                raise TypeError("Missing required property 'action_type'")
            __props__['action_type'] = action_type
            __props__['criterias'] = criterias
            __props__['enabled'] = enabled
            __props__['name'] = name
            __props__['notification_times'] = notification_times
            __props__['order'] = order
            __props__['repeats'] = repeats
            __props__['schedules'] = schedules
            __props__['steps'] = steps
            __props__['time_restrictions'] = time_restrictions
            if username is None and not opts.urn:
                raise TypeError("Missing required property 'username'")
            __props__['username'] = username
        super(NotificationRule, __self__).__init__(
            'opsgenie:index/notificationRule:NotificationRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action_type: Optional[pulumi.Input[str]] = None,
            criterias: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NotificationRuleCriteriaArgs']]]]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            notification_times: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            order: Optional[pulumi.Input[int]] = None,
            repeats: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NotificationRuleRepeatArgs']]]]] = None,
            schedules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NotificationRuleScheduleArgs']]]]] = None,
            steps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NotificationRuleStepArgs']]]]] = None,
            time_restrictions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NotificationRuleTimeRestrictionArgs']]]]] = None,
            username: Optional[pulumi.Input[str]] = None) -> 'NotificationRule':
        """
        Get an existing NotificationRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] action_type: Type of the action that notification rule will have. Allowed values: "create-alert", "acknowledged-alert", "closed-alert", "assigned-alert", "add-note", "schedule-start", "schedule-end", "incoming-call-routing"
        :param pulumi.Input[bool] enabled: Defined if this step is enabled. Default: true
        :param pulumi.Input[str] name: Name of the notification policy
        :param pulumi.Input[Sequence[pulumi.Input[str]]] notification_times: List of Time Periods that notification for schedule start/end will be sent. Allowed values: "just-before", "15-minutes-ago", "1-hour-ago", "1-day-ago". If `action_type` is "schedule-start" or "schedule-end" then it is required.
        :param pulumi.Input[int] order: Order of the condition in conditions list
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NotificationRuleStepArgs']]]] steps: Notification rule steps to take (eg. SMS or email message). This is a block, structure is documented below.
        :param pulumi.Input[str] username: Username of user to which this notification rule belongs to.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["action_type"] = action_type
        __props__["criterias"] = criterias
        __props__["enabled"] = enabled
        __props__["name"] = name
        __props__["notification_times"] = notification_times
        __props__["order"] = order
        __props__["repeats"] = repeats
        __props__["schedules"] = schedules
        __props__["steps"] = steps
        __props__["time_restrictions"] = time_restrictions
        __props__["username"] = username
        return NotificationRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> pulumi.Output[str]:
        """
        Type of the action that notification rule will have. Allowed values: "create-alert", "acknowledged-alert", "closed-alert", "assigned-alert", "add-note", "schedule-start", "schedule-end", "incoming-call-routing"
        """
        return pulumi.get(self, "action_type")

    @property
    @pulumi.getter
    def criterias(self) -> pulumi.Output[Optional[Sequence['outputs.NotificationRuleCriteria']]]:
        return pulumi.get(self, "criterias")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Defined if this step is enabled. Default: true
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the notification policy
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="notificationTimes")
    def notification_times(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of Time Periods that notification for schedule start/end will be sent. Allowed values: "just-before", "15-minutes-ago", "1-hour-ago", "1-day-ago". If `action_type` is "schedule-start" or "schedule-end" then it is required.
        """
        return pulumi.get(self, "notification_times")

    @property
    @pulumi.getter
    def order(self) -> pulumi.Output[int]:
        """
        Order of the condition in conditions list
        """
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def repeats(self) -> pulumi.Output[Optional[Sequence['outputs.NotificationRuleRepeat']]]:
        return pulumi.get(self, "repeats")

    @property
    @pulumi.getter
    def schedules(self) -> pulumi.Output[Optional[Sequence['outputs.NotificationRuleSchedule']]]:
        return pulumi.get(self, "schedules")

    @property
    @pulumi.getter
    def steps(self) -> pulumi.Output[Optional[Sequence['outputs.NotificationRuleStep']]]:
        """
        Notification rule steps to take (eg. SMS or email message). This is a block, structure is documented below.
        """
        return pulumi.get(self, "steps")

    @property
    @pulumi.getter(name="timeRestrictions")
    def time_restrictions(self) -> pulumi.Output[Optional[Sequence['outputs.NotificationRuleTimeRestriction']]]:
        return pulumi.get(self, "time_restrictions")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[str]:
        """
        Username of user to which this notification rule belongs to.
        """
        return pulumi.get(self, "username")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

