# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables

__all__ = ['Heartbeat']


class Heartbeat(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alert_message: Optional[pulumi.Input[str]] = None,
                 alert_priority: Optional[pulumi.Input[str]] = None,
                 alert_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 interval: Optional[pulumi.Input[int]] = None,
                 interval_unit: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner_team_id: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Manages heartbeat within Opsgenie.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_opsgenie as opsgenie

        test = opsgenie.Heartbeat("test",
            alert_message="Test",
            alert_priority="P3",
            alert_tags=[
                "test",
                "fahri",
            ],
            description="test opsgenie heartbeat terraform",
            enabled=False,
            interval=10,
            interval_unit="minutes",
            owner_team_id=opsgenie_team["test"]["id"])
        ```

        ## Import

        Heartbeat Integrations can be imported using the `name`, e.g.

        ```sh
         $ pulumi import opsgenie:index/heartbeat:Heartbeat test geniehearbeat-%s`
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] alert_message: Specifies the alert message for heartbeat expiration alert. If this is not provided, default alert message is "HeartbeatName is expired".
        :param pulumi.Input[str] alert_priority: Specifies the alert priority for heartbeat expiration alert. If this is not provided, default priority is P3.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] alert_tags: Specifies the alert tags for heartbeat expiration alert.
        :param pulumi.Input[str] description: An optional description of the heartbeat
        :param pulumi.Input[bool] enabled: Enable/disable heartbeat monitoring.
        :param pulumi.Input[int] interval: Specifies how often a heartbeat message should be expected.
        :param pulumi.Input[str] interval_unit: Interval specified as minutes, hours or days.
        :param pulumi.Input[str] name: Name of the heartbeat
        :param pulumi.Input[str] owner_team_id: Owner team of the heartbeat.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['alert_message'] = alert_message
            __props__['alert_priority'] = alert_priority
            __props__['alert_tags'] = alert_tags
            __props__['description'] = description
            if enabled is None and not opts.urn:
                raise TypeError("Missing required property 'enabled'")
            __props__['enabled'] = enabled
            if interval is None and not opts.urn:
                raise TypeError("Missing required property 'interval'")
            __props__['interval'] = interval
            if interval_unit is None and not opts.urn:
                raise TypeError("Missing required property 'interval_unit'")
            __props__['interval_unit'] = interval_unit
            __props__['name'] = name
            __props__['owner_team_id'] = owner_team_id
        super(Heartbeat, __self__).__init__(
            'opsgenie:index/heartbeat:Heartbeat',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alert_message: Optional[pulumi.Input[str]] = None,
            alert_priority: Optional[pulumi.Input[str]] = None,
            alert_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            interval: Optional[pulumi.Input[int]] = None,
            interval_unit: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            owner_team_id: Optional[pulumi.Input[str]] = None) -> 'Heartbeat':
        """
        Get an existing Heartbeat resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] alert_message: Specifies the alert message for heartbeat expiration alert. If this is not provided, default alert message is "HeartbeatName is expired".
        :param pulumi.Input[str] alert_priority: Specifies the alert priority for heartbeat expiration alert. If this is not provided, default priority is P3.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] alert_tags: Specifies the alert tags for heartbeat expiration alert.
        :param pulumi.Input[str] description: An optional description of the heartbeat
        :param pulumi.Input[bool] enabled: Enable/disable heartbeat monitoring.
        :param pulumi.Input[int] interval: Specifies how often a heartbeat message should be expected.
        :param pulumi.Input[str] interval_unit: Interval specified as minutes, hours or days.
        :param pulumi.Input[str] name: Name of the heartbeat
        :param pulumi.Input[str] owner_team_id: Owner team of the heartbeat.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["alert_message"] = alert_message
        __props__["alert_priority"] = alert_priority
        __props__["alert_tags"] = alert_tags
        __props__["description"] = description
        __props__["enabled"] = enabled
        __props__["interval"] = interval
        __props__["interval_unit"] = interval_unit
        __props__["name"] = name
        __props__["owner_team_id"] = owner_team_id
        return Heartbeat(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="alertMessage")
    def alert_message(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the alert message for heartbeat expiration alert. If this is not provided, default alert message is "HeartbeatName is expired".
        """
        return pulumi.get(self, "alert_message")

    @property
    @pulumi.getter(name="alertPriority")
    def alert_priority(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the alert priority for heartbeat expiration alert. If this is not provided, default priority is P3.
        """
        return pulumi.get(self, "alert_priority")

    @property
    @pulumi.getter(name="alertTags")
    def alert_tags(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Specifies the alert tags for heartbeat expiration alert.
        """
        return pulumi.get(self, "alert_tags")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        An optional description of the heartbeat
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[bool]:
        """
        Enable/disable heartbeat monitoring.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def interval(self) -> pulumi.Output[int]:
        """
        Specifies how often a heartbeat message should be expected.
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="intervalUnit")
    def interval_unit(self) -> pulumi.Output[str]:
        """
        Interval specified as minutes, hours or days.
        """
        return pulumi.get(self, "interval_unit")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the heartbeat
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerTeamId")
    def owner_team_id(self) -> pulumi.Output[Optional[str]]:
        """
        Owner team of the heartbeat.
        """
        return pulumi.get(self, "owner_team_id")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

