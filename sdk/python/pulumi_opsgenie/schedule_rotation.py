# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['ScheduleRotation']


class ScheduleRotation(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 end_date: Optional[pulumi.Input[str]] = None,
                 length: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 participants: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScheduleRotationParticipantArgs']]]]] = None,
                 schedule_id: Optional[pulumi.Input[str]] = None,
                 start_date: Optional[pulumi.Input[str]] = None,
                 time_restrictions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScheduleRotationTimeRestrictionArgs']]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Manages a Schedule Rotation within Opsgenie.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_opsgenie as opsgenie

        test = opsgenie.ScheduleRotation("test",
            end_date="2019-06-20T17:30:00Z",
            length=6,
            participants=[opsgenie.ScheduleRotationParticipantArgs(
                id=opsgenie_user["test"]["id"],
                type="user",
            )],
            schedule_id=opsgenie_schedule["test"]["id"],
            start_date="2019-06-18T17:00:00Z",
            time_restrictions=[opsgenie.ScheduleRotationTimeRestrictionArgs(
                restrictions=[opsgenie.ScheduleRotationTimeRestrictionRestrictionArgs(
                    end_hour=10,
                    end_min=1,
                    start_hour=1,
                    start_min=1,
                )],
                type="time-of-day",
            )],
            type="hourly")
        ```

        ## Import

        Schedule Rotations can be imported using the `id` and `schedule_id`, e.g.

        ```sh
         $ pulumi import opsgenie:index/scheduleRotation:ScheduleRotation * `opsgenie_schedule_rotation.test schedule_id/id`
        ```

         For this example- Schedule Id = `c827c472-31f2-497b-9ec6-8ec855d7d94c`

        - Rotation Id = `2d1a78d0-c13e-47d3-af0a-8b6d0cc2b7b1`

        ```sh
         $ pulumi import opsgenie:index/scheduleRotation:ScheduleRotation test c827c472-31f2-497b-9ec6-8ec855d7d94c/2d1a78d0-c13e-47d3-af0a-8b6d0cc2b7b1`
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] end_date: This parameter takes a date format as (yyyy-MM-dd'T'HH:mm:ssZ) (e.g. 2019-06-11T08:00:00+02:00). Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically
        :param pulumi.Input[int] length: Length of the rotation with default value 1.
        :param pulumi.Input[str] name: Name of rotation.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScheduleRotationParticipantArgs']]]] participants: List of escalations, teams, users or the reserved word none which will be used in schedule. Each of them can be used multiple times and will be rotated in the order they given. "user,escalation,team,none"
        :param pulumi.Input[str] schedule_id: Identifier of the schedule.
        :param pulumi.Input[str] start_date: This parameter takes a date format as (yyyy-MM-dd'T'HH:mm:ssZ) (e.g. 2019-06-11T08:00:00+02:00). Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically
        :param pulumi.Input[str] type: Type of rotation. May be one of daily, weekly and hourly.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['end_date'] = end_date
            __props__['length'] = length
            __props__['name'] = name
            if participants is None and not opts.urn:
                raise TypeError("Missing required property 'participants'")
            __props__['participants'] = participants
            if schedule_id is None and not opts.urn:
                raise TypeError("Missing required property 'schedule_id'")
            __props__['schedule_id'] = schedule_id
            if start_date is None and not opts.urn:
                raise TypeError("Missing required property 'start_date'")
            __props__['start_date'] = start_date
            __props__['time_restrictions'] = time_restrictions
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__['type'] = type
        super(ScheduleRotation, __self__).__init__(
            'opsgenie:index/scheduleRotation:ScheduleRotation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            end_date: Optional[pulumi.Input[str]] = None,
            length: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            participants: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScheduleRotationParticipantArgs']]]]] = None,
            schedule_id: Optional[pulumi.Input[str]] = None,
            start_date: Optional[pulumi.Input[str]] = None,
            time_restrictions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScheduleRotationTimeRestrictionArgs']]]]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'ScheduleRotation':
        """
        Get an existing ScheduleRotation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] end_date: This parameter takes a date format as (yyyy-MM-dd'T'HH:mm:ssZ) (e.g. 2019-06-11T08:00:00+02:00). Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically
        :param pulumi.Input[int] length: Length of the rotation with default value 1.
        :param pulumi.Input[str] name: Name of rotation.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScheduleRotationParticipantArgs']]]] participants: List of escalations, teams, users or the reserved word none which will be used in schedule. Each of them can be used multiple times and will be rotated in the order they given. "user,escalation,team,none"
        :param pulumi.Input[str] schedule_id: Identifier of the schedule.
        :param pulumi.Input[str] start_date: This parameter takes a date format as (yyyy-MM-dd'T'HH:mm:ssZ) (e.g. 2019-06-11T08:00:00+02:00). Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically
        :param pulumi.Input[str] type: Type of rotation. May be one of daily, weekly and hourly.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["end_date"] = end_date
        __props__["length"] = length
        __props__["name"] = name
        __props__["participants"] = participants
        __props__["schedule_id"] = schedule_id
        __props__["start_date"] = start_date
        __props__["time_restrictions"] = time_restrictions
        __props__["type"] = type
        return ScheduleRotation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> pulumi.Output[Optional[str]]:
        """
        This parameter takes a date format as (yyyy-MM-dd'T'HH:mm:ssZ) (e.g. 2019-06-11T08:00:00+02:00). Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically
        """
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter
    def length(self) -> pulumi.Output[Optional[int]]:
        """
        Length of the rotation with default value 1.
        """
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of rotation.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def participants(self) -> pulumi.Output[Sequence['outputs.ScheduleRotationParticipant']]:
        """
        List of escalations, teams, users or the reserved word none which will be used in schedule. Each of them can be used multiple times and will be rotated in the order they given. "user,escalation,team,none"
        """
        return pulumi.get(self, "participants")

    @property
    @pulumi.getter(name="scheduleId")
    def schedule_id(self) -> pulumi.Output[str]:
        """
        Identifier of the schedule.
        """
        return pulumi.get(self, "schedule_id")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Output[str]:
        """
        This parameter takes a date format as (yyyy-MM-dd'T'HH:mm:ssZ) (e.g. 2019-06-11T08:00:00+02:00). Minutes may take 0 or 30 as value. Otherwise they will be converted to nearest 0 or 30 automatically
        """
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="timeRestrictions")
    def time_restrictions(self) -> pulumi.Output[Optional[Sequence['outputs.ScheduleRotationTimeRestriction']]]:
        return pulumi.get(self, "time_restrictions")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Type of rotation. May be one of daily, weekly and hourly.
        """
        return pulumi.get(self, "type")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

