# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['NotificationPolicy']


class NotificationPolicy(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_close_actions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NotificationPolicyAutoCloseActionArgs']]]]] = None,
                 auto_restart_actions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NotificationPolicyAutoRestartActionArgs']]]]] = None,
                 de_duplication_actions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NotificationPolicyDeDuplicationActionArgs']]]]] = None,
                 delay_actions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NotificationPolicyDelayActionArgs']]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NotificationPolicyFilterArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 policy_description: Optional[pulumi.Input[str]] = None,
                 suppress: Optional[pulumi.Input[bool]] = None,
                 team_id: Optional[pulumi.Input[str]] = None,
                 time_restrictions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NotificationPolicyTimeRestrictionArgs']]]]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Manages a Notification Policy within Opsgenie.

        ## Import

        Notification policies can be imported using the `team id` and `id`, e.g.

        ```sh
         $ pulumi import opsgenie:index/notificationPolicy:NotificationPolicy test teamId/Id`
        ```

         For this example- Team Id = `c827c472-31f2-497b-9ec6-8ec855d7d94c`

        - Notification Policy Id = `2d1a78d0-c13e-47d3-af0a-8b6d0cc2b7b1`

        ```sh
         $ pulumi import opsgenie:index/notificationPolicy:NotificationPolicy test c827c472-31f2-497b-9ec6-8ec855d7d94c/2d1a78d0-c13e-47d3-af0a-8b6d0cc2b7b1`
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NotificationPolicyAutoCloseActionArgs']]]] auto_close_actions: Auto Restart Action of the policy. This is a block, structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NotificationPolicyAutoRestartActionArgs']]]] auto_restart_actions: Auto Restart Action of the policy. This is a block, structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NotificationPolicyDeDuplicationActionArgs']]]] de_duplication_actions: Deduplication Action of the policy. This is a block, structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NotificationPolicyDelayActionArgs']]]] delay_actions: Delay notifications. This is a block, structure is documented below.
        :param pulumi.Input[bool] enabled: If policy should be enabled. Default: true
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NotificationPolicyFilterArgs']]]] filters: A notification filter which will be applied. This filter can be empty: filter {} - this means 'match-all'. This is a block, structure is documented below.
        :param pulumi.Input[str] name: Name of the notification policy
        :param pulumi.Input[str] policy_description: Description of the policy. This can be max 512 characters.
        :param pulumi.Input[bool] suppress: Suppress value of the policy. Values are: true, false. Default: false
        :param pulumi.Input[str] team_id: Id of team that this policy belons to.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NotificationPolicyTimeRestrictionArgs']]]] time_restrictions: Time restrictions specified in this field must be met for this policy to work. This is a block, structure is documented below.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['auto_close_actions'] = auto_close_actions
            __props__['auto_restart_actions'] = auto_restart_actions
            __props__['de_duplication_actions'] = de_duplication_actions
            __props__['delay_actions'] = delay_actions
            __props__['enabled'] = enabled
            if filters is None and not opts.urn:
                raise TypeError("Missing required property 'filters'")
            __props__['filters'] = filters
            __props__['name'] = name
            __props__['policy_description'] = policy_description
            __props__['suppress'] = suppress
            if team_id is None and not opts.urn:
                raise TypeError("Missing required property 'team_id'")
            __props__['team_id'] = team_id
            __props__['time_restrictions'] = time_restrictions
        super(NotificationPolicy, __self__).__init__(
            'opsgenie:index/notificationPolicy:NotificationPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_close_actions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NotificationPolicyAutoCloseActionArgs']]]]] = None,
            auto_restart_actions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NotificationPolicyAutoRestartActionArgs']]]]] = None,
            de_duplication_actions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NotificationPolicyDeDuplicationActionArgs']]]]] = None,
            delay_actions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NotificationPolicyDelayActionArgs']]]]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            filters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NotificationPolicyFilterArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            policy_description: Optional[pulumi.Input[str]] = None,
            suppress: Optional[pulumi.Input[bool]] = None,
            team_id: Optional[pulumi.Input[str]] = None,
            time_restrictions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NotificationPolicyTimeRestrictionArgs']]]]] = None) -> 'NotificationPolicy':
        """
        Get an existing NotificationPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NotificationPolicyAutoCloseActionArgs']]]] auto_close_actions: Auto Restart Action of the policy. This is a block, structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NotificationPolicyAutoRestartActionArgs']]]] auto_restart_actions: Auto Restart Action of the policy. This is a block, structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NotificationPolicyDeDuplicationActionArgs']]]] de_duplication_actions: Deduplication Action of the policy. This is a block, structure is documented below.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NotificationPolicyDelayActionArgs']]]] delay_actions: Delay notifications. This is a block, structure is documented below.
        :param pulumi.Input[bool] enabled: If policy should be enabled. Default: true
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NotificationPolicyFilterArgs']]]] filters: A notification filter which will be applied. This filter can be empty: filter {} - this means 'match-all'. This is a block, structure is documented below.
        :param pulumi.Input[str] name: Name of the notification policy
        :param pulumi.Input[str] policy_description: Description of the policy. This can be max 512 characters.
        :param pulumi.Input[bool] suppress: Suppress value of the policy. Values are: true, false. Default: false
        :param pulumi.Input[str] team_id: Id of team that this policy belons to.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NotificationPolicyTimeRestrictionArgs']]]] time_restrictions: Time restrictions specified in this field must be met for this policy to work. This is a block, structure is documented below.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["auto_close_actions"] = auto_close_actions
        __props__["auto_restart_actions"] = auto_restart_actions
        __props__["de_duplication_actions"] = de_duplication_actions
        __props__["delay_actions"] = delay_actions
        __props__["enabled"] = enabled
        __props__["filters"] = filters
        __props__["name"] = name
        __props__["policy_description"] = policy_description
        __props__["suppress"] = suppress
        __props__["team_id"] = team_id
        __props__["time_restrictions"] = time_restrictions
        return NotificationPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoCloseActions")
    def auto_close_actions(self) -> pulumi.Output[Optional[Sequence['outputs.NotificationPolicyAutoCloseAction']]]:
        """
        Auto Restart Action of the policy. This is a block, structure is documented below.
        """
        return pulumi.get(self, "auto_close_actions")

    @property
    @pulumi.getter(name="autoRestartActions")
    def auto_restart_actions(self) -> pulumi.Output[Optional[Sequence['outputs.NotificationPolicyAutoRestartAction']]]:
        """
        Auto Restart Action of the policy. This is a block, structure is documented below.
        """
        return pulumi.get(self, "auto_restart_actions")

    @property
    @pulumi.getter(name="deDuplicationActions")
    def de_duplication_actions(self) -> pulumi.Output[Optional[Sequence['outputs.NotificationPolicyDeDuplicationAction']]]:
        """
        Deduplication Action of the policy. This is a block, structure is documented below.
        """
        return pulumi.get(self, "de_duplication_actions")

    @property
    @pulumi.getter(name="delayActions")
    def delay_actions(self) -> pulumi.Output[Optional[Sequence['outputs.NotificationPolicyDelayAction']]]:
        """
        Delay notifications. This is a block, structure is documented below.
        """
        return pulumi.get(self, "delay_actions")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        If policy should be enabled. Default: true
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def filters(self) -> pulumi.Output[Sequence['outputs.NotificationPolicyFilter']]:
        """
        A notification filter which will be applied. This filter can be empty: filter {} - this means 'match-all'. This is a block, structure is documented below.
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the notification policy
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="policyDescription")
    def policy_description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of the policy. This can be max 512 characters.
        """
        return pulumi.get(self, "policy_description")

    @property
    @pulumi.getter
    def suppress(self) -> pulumi.Output[Optional[bool]]:
        """
        Suppress value of the policy. Values are: true, false. Default: false
        """
        return pulumi.get(self, "suppress")

    @property
    @pulumi.getter(name="teamId")
    def team_id(self) -> pulumi.Output[str]:
        """
        Id of team that this policy belons to.
        """
        return pulumi.get(self, "team_id")

    @property
    @pulumi.getter(name="timeRestrictions")
    def time_restrictions(self) -> pulumi.Output[Optional[Sequence['outputs.NotificationPolicyTimeRestriction']]]:
        """
        Time restrictions specified in this field must be met for this policy to work. This is a block, structure is documented below.
        """
        return pulumi.get(self, "time_restrictions")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

