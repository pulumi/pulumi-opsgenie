// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class TeamRoutingRule extends pulumi.CustomResource {
    /**
     * Get an existing TeamRoutingRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TeamRoutingRuleState, opts?: pulumi.CustomResourceOptions): TeamRoutingRule {
        return new TeamRoutingRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'opsgenie:index/teamRoutingRule:TeamRoutingRule';

    /**
     * Returns true if the given object is an instance of TeamRoutingRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TeamRoutingRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TeamRoutingRule.__pulumiType;
    }

    public readonly criterias!: pulumi.Output<outputs.TeamRoutingRuleCriteria[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly notifies!: pulumi.Output<outputs.TeamRoutingRuleNotify[]>;
    public readonly order!: pulumi.Output<number | undefined>;
    public readonly teamId!: pulumi.Output<string>;
    public readonly timeRestrictions!: pulumi.Output<outputs.TeamRoutingRuleTimeRestriction[] | undefined>;
    public readonly timezone!: pulumi.Output<string | undefined>;

    /**
     * Create a TeamRoutingRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TeamRoutingRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TeamRoutingRuleArgs | TeamRoutingRuleState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as TeamRoutingRuleState | undefined;
            inputs["criterias"] = state ? state.criterias : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["notifies"] = state ? state.notifies : undefined;
            inputs["order"] = state ? state.order : undefined;
            inputs["teamId"] = state ? state.teamId : undefined;
            inputs["timeRestrictions"] = state ? state.timeRestrictions : undefined;
            inputs["timezone"] = state ? state.timezone : undefined;
        } else {
            const args = argsOrState as TeamRoutingRuleArgs | undefined;
            if (!args || args.notifies === undefined) {
                throw new Error("Missing required property 'notifies'");
            }
            if (!args || args.teamId === undefined) {
                throw new Error("Missing required property 'teamId'");
            }
            inputs["criterias"] = args ? args.criterias : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["notifies"] = args ? args.notifies : undefined;
            inputs["order"] = args ? args.order : undefined;
            inputs["teamId"] = args ? args.teamId : undefined;
            inputs["timeRestrictions"] = args ? args.timeRestrictions : undefined;
            inputs["timezone"] = args ? args.timezone : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(TeamRoutingRule.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TeamRoutingRule resources.
 */
export interface TeamRoutingRuleState {
    readonly criterias?: pulumi.Input<pulumi.Input<inputs.TeamRoutingRuleCriteria>[]>;
    readonly name?: pulumi.Input<string>;
    readonly notifies?: pulumi.Input<pulumi.Input<inputs.TeamRoutingRuleNotify>[]>;
    readonly order?: pulumi.Input<number>;
    readonly teamId?: pulumi.Input<string>;
    readonly timeRestrictions?: pulumi.Input<pulumi.Input<inputs.TeamRoutingRuleTimeRestriction>[]>;
    readonly timezone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TeamRoutingRule resource.
 */
export interface TeamRoutingRuleArgs {
    readonly criterias?: pulumi.Input<pulumi.Input<inputs.TeamRoutingRuleCriteria>[]>;
    readonly name?: pulumi.Input<string>;
    readonly notifies: pulumi.Input<pulumi.Input<inputs.TeamRoutingRuleNotify>[]>;
    readonly order?: pulumi.Input<number>;
    readonly teamId: pulumi.Input<string>;
    readonly timeRestrictions?: pulumi.Input<pulumi.Input<inputs.TeamRoutingRuleTimeRestriction>[]>;
    readonly timezone?: pulumi.Input<string>;
}
