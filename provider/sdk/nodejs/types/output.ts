// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AlertPolicyFilter {
    conditions?: outputs.AlertPolicyFilterCondition[];
    type?: string;
}

export interface AlertPolicyFilterCondition {
    expectedValue?: string;
    field: string;
    key?: string;
    not?: boolean;
    operation: string;
    order?: number;
}

export interface AlertPolicyResponder {
    id: string;
    name?: string;
    type: string;
    username?: string;
}

export interface AlertPolicyTimeRestriction {
    restrictions?: outputs.AlertPolicyTimeRestrictionRestriction[];
    type: string;
}

export interface AlertPolicyTimeRestrictionRestriction {
    endDay: string;
    endHour: number;
    endMin: number;
    startDay: string;
    startHour: number;
    startMin: number;
}

export interface ApiIntegrationResponder {
    id?: string;
    type?: string;
}

export interface EmailIntegrationResponder {
    id?: string;
    type?: string;
}

export interface EscalationRepeat {
    closeAlertAfterAll?: boolean;
    count?: number;
    resetRecipientStates?: boolean;
    waitInterval?: number;
}

export interface EscalationRule {
    condition: string;
    delay: number;
    notifyType: string;
    recipients: outputs.EscalationRuleRecipient[];
}

export interface EscalationRuleRecipient {
    id?: string;
    type?: string;
}

export interface GetEscalationRepeat {
    closeAlertAfterAll?: boolean;
    count?: number;
    resetRecipientStates?: boolean;
    waitInterval?: number;
}

export interface GetEscalationRule {
    condition: string;
    delay: number;
    notifyType: string;
    recipients: outputs.GetEscalationRuleRecipient[];
}

export interface GetEscalationRuleRecipient {
    id?: string;
    type?: string;
}

export interface GetTeamMember {
    id?: string;
    role?: string;
}

export interface IncidentTemplateStakeholderProperty {
    description?: string;
    enable?: boolean;
    message: string;
}

export interface IntegrationActionAcknowledge {
    alias?: string;
    filters?: outputs.IntegrationActionAcknowledgeFilter[];
    name: string;
    note?: string;
    order?: number;
    type?: string;
    user?: string;
}

export interface IntegrationActionAcknowledgeFilter {
    conditions?: outputs.IntegrationActionAcknowledgeFilterCondition[];
    type: string;
}

export interface IntegrationActionAcknowledgeFilterCondition {
    expectedValue?: string;
    field: string;
    key?: string;
    not?: boolean;
    operation: string;
    order?: number;
}

export interface IntegrationActionAddNote {
    alias?: string;
    filters?: outputs.IntegrationActionAddNoteFilter[];
    name: string;
    note?: string;
    order?: number;
    type?: string;
    user?: string;
}

export interface IntegrationActionAddNoteFilter {
    conditions?: outputs.IntegrationActionAddNoteFilterCondition[];
    type: string;
}

export interface IntegrationActionAddNoteFilterCondition {
    expectedValue?: string;
    field: string;
    key?: string;
    not?: boolean;
    operation: string;
    order?: number;
}

export interface IntegrationActionClose {
    alias?: string;
    filters?: outputs.IntegrationActionCloseFilter[];
    name: string;
    note?: string;
    order?: number;
    type?: string;
    user?: string;
}

export interface IntegrationActionCloseFilter {
    conditions?: outputs.IntegrationActionCloseFilterCondition[];
    type: string;
}

export interface IntegrationActionCloseFilterCondition {
    expectedValue?: string;
    field: string;
    key?: string;
    not?: boolean;
    operation: string;
    order?: number;
}

export interface IntegrationActionCreate {
    alertActions?: string[];
    alias?: string;
    appendAttachments?: boolean;
    description?: string;
    entity?: string;
    extraProperties?: {[key: string]: string};
    filters?: outputs.IntegrationActionCreateFilter[];
    ignoreAlertActionsFromPayload?: boolean;
    ignoreExtraPropertiesFromPayload?: boolean;
    ignoreRespondersFromPayload?: boolean;
    ignoreTagsFromPayload?: boolean;
    ignoreTeamsFromPayload?: boolean;
    message?: string;
    name: string;
    note?: string;
    order?: number;
    priority?: string;
    responders?: outputs.IntegrationActionCreateResponder[];
    source?: string;
    tags?: string[];
    type?: string;
    user?: string;
}

export interface IntegrationActionCreateFilter {
    conditions?: outputs.IntegrationActionCreateFilterCondition[];
    type: string;
}

export interface IntegrationActionCreateFilterCondition {
    expectedValue?: string;
    field: string;
    key?: string;
    not?: boolean;
    operation: string;
    order?: number;
}

export interface IntegrationActionCreateResponder {
    id: string;
    type: string;
}

export interface MaintenanceRule {
    entities: outputs.MaintenanceRuleEntity[];
    state?: string;
}

export interface MaintenanceRuleEntity {
    id?: string;
    type?: string;
}

export interface MaintenanceTime {
    endDate?: string;
    startDate?: string;
    type: string;
}

export interface NotificationPolicyAutoCloseAction {
    durations: outputs.NotificationPolicyAutoCloseActionDuration[];
}

export interface NotificationPolicyAutoCloseActionDuration {
    timeAmount: number;
    timeUnit?: string;
}

export interface NotificationPolicyAutoRestartAction {
    durations: outputs.NotificationPolicyAutoRestartActionDuration[];
    maxRepeatCount: number;
}

export interface NotificationPolicyAutoRestartActionDuration {
    timeAmount: number;
    timeUnit?: string;
}

export interface NotificationPolicyDeDuplicationAction {
    count: number;
    deDuplicationActionType: string;
    durations?: outputs.NotificationPolicyDeDuplicationActionDuration[];
}

export interface NotificationPolicyDeDuplicationActionDuration {
    timeAmount: number;
    timeUnit?: string;
}

export interface NotificationPolicyDelayAction {
    delayOption: string;
    durations?: outputs.NotificationPolicyDelayActionDuration[];
    untilHour?: number;
    untilMinute?: number;
}

export interface NotificationPolicyDelayActionDuration {
    timeAmount: number;
    timeUnit?: string;
}

export interface NotificationPolicyFilter {
    conditions?: outputs.NotificationPolicyFilterCondition[];
    type?: string;
}

export interface NotificationPolicyFilterCondition {
    expectedValue?: string;
    field: string;
    key?: string;
    not?: boolean;
    operation: string;
    order?: number;
}

export interface NotificationPolicyTimeRestriction {
    restrictions?: outputs.NotificationPolicyTimeRestrictionRestriction[];
    type: string;
}

export interface NotificationPolicyTimeRestrictionRestriction {
    endDay: string;
    endHour: number;
    endMin: number;
    startDay: string;
    startHour: number;
    startMin: number;
}

export interface NotificationRuleCriteria {
    conditions?: outputs.NotificationRuleCriteriaCondition[];
    type: string;
}

export interface NotificationRuleCriteriaCondition {
    expectedValue?: string;
    field: string;
    key?: string;
    not?: boolean;
    operation: string;
    order?: number;
}

export interface NotificationRuleRepeat {
    enabled?: boolean;
    loopAfter: number;
}

export interface NotificationRuleSchedule {
    name?: string;
    type: string;
}

export interface NotificationRuleStep {
    contacts: outputs.NotificationRuleStepContact[];
    enabled?: boolean;
    sendAfter?: number;
}

export interface NotificationRuleStepContact {
    method: string;
    to: string;
}

export interface NotificationRuleTimeRestriction {
    restrictions?: outputs.NotificationRuleTimeRestrictionRestriction[];
    type: string;
}

export interface NotificationRuleTimeRestrictionRestriction {
    endDay: string;
    endHour: number;
    endMin: number;
    startDay: string;
    startHour: number;
    startMin: number;
}

export interface ScheduleRotationParticipant {
    id?: string;
    type: string;
}

export interface ScheduleRotationTimeRestriction {
    restrictions?: outputs.ScheduleRotationTimeRestrictionRestriction[];
    type: string;
}

export interface ScheduleRotationTimeRestrictionRestriction {
    endDay: string;
    endHour: number;
    endMin: number;
    startDay: string;
    startHour: number;
    startMin: number;
}

export interface ServiceIncidentRuleIncidentRule {
    conditionMatchType?: string;
    conditions?: outputs.ServiceIncidentRuleIncidentRuleCondition[];
    incidentProperties: outputs.ServiceIncidentRuleIncidentRuleIncidentProperty[];
}

export interface ServiceIncidentRuleIncidentRuleCondition {
    expectedValue?: string;
    field: string;
    key?: string;
    not?: boolean;
    operation: string;
}

export interface ServiceIncidentRuleIncidentRuleIncidentProperty {
    description?: string;
    details?: string[];
    message: string;
    priority: string;
    stakeholderProperties: outputs.ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderProperty[];
    tags?: string[];
}

export interface ServiceIncidentRuleIncidentRuleIncidentPropertyStakeholderProperty {
    description?: string;
    enable?: boolean;
    message: string;
}

export interface TeamMember {
    id: string;
    role?: string;
}

export interface TeamRoutingRuleCriteria {
    conditions?: outputs.TeamRoutingRuleCriteriaCondition[];
    type: string;
}

export interface TeamRoutingRuleCriteriaCondition {
    expectedValue?: string;
    field: string;
    key?: string;
    not?: boolean;
    operation: string;
    order?: number;
}

export interface TeamRoutingRuleNotify {
    id: string;
    name: string;
    type: string;
}

export interface TeamRoutingRuleTimeRestriction {
    restrictions?: outputs.TeamRoutingRuleTimeRestrictionRestriction[];
    type: string;
}

export interface TeamRoutingRuleTimeRestrictionRestriction {
    endDay: string;
    endHour: number;
    endMin: number;
    startDay: string;
    startHour: number;
    startMin: number;
}

export interface UserUserAddress {
    city: string;
    country: string;
    line: string;
    state: string;
    zipcode: string;
}
