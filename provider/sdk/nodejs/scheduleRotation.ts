// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ScheduleRotation extends pulumi.CustomResource {
    /**
     * Get an existing ScheduleRotation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ScheduleRotationState, opts?: pulumi.CustomResourceOptions): ScheduleRotation {
        return new ScheduleRotation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'opsgenie:index/scheduleRotation:ScheduleRotation';

    /**
     * Returns true if the given object is an instance of ScheduleRotation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ScheduleRotation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ScheduleRotation.__pulumiType;
    }

    public readonly endDate!: pulumi.Output<string | undefined>;
    public readonly length!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly participants!: pulumi.Output<outputs.ScheduleRotationParticipant[]>;
    public readonly scheduleId!: pulumi.Output<string>;
    public readonly startDate!: pulumi.Output<string>;
    public readonly timeRestrictions!: pulumi.Output<outputs.ScheduleRotationTimeRestriction[] | undefined>;
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a ScheduleRotation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScheduleRotationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ScheduleRotationArgs | ScheduleRotationState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ScheduleRotationState | undefined;
            inputs["endDate"] = state ? state.endDate : undefined;
            inputs["length"] = state ? state.length : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["participants"] = state ? state.participants : undefined;
            inputs["scheduleId"] = state ? state.scheduleId : undefined;
            inputs["startDate"] = state ? state.startDate : undefined;
            inputs["timeRestrictions"] = state ? state.timeRestrictions : undefined;
            inputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as ScheduleRotationArgs | undefined;
            if (!args || args.participants === undefined) {
                throw new Error("Missing required property 'participants'");
            }
            if (!args || args.scheduleId === undefined) {
                throw new Error("Missing required property 'scheduleId'");
            }
            if (!args || args.startDate === undefined) {
                throw new Error("Missing required property 'startDate'");
            }
            if (!args || args.type === undefined) {
                throw new Error("Missing required property 'type'");
            }
            inputs["endDate"] = args ? args.endDate : undefined;
            inputs["length"] = args ? args.length : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["participants"] = args ? args.participants : undefined;
            inputs["scheduleId"] = args ? args.scheduleId : undefined;
            inputs["startDate"] = args ? args.startDate : undefined;
            inputs["timeRestrictions"] = args ? args.timeRestrictions : undefined;
            inputs["type"] = args ? args.type : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(ScheduleRotation.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ScheduleRotation resources.
 */
export interface ScheduleRotationState {
    readonly endDate?: pulumi.Input<string>;
    readonly length?: pulumi.Input<number>;
    readonly name?: pulumi.Input<string>;
    readonly participants?: pulumi.Input<pulumi.Input<inputs.ScheduleRotationParticipant>[]>;
    readonly scheduleId?: pulumi.Input<string>;
    readonly startDate?: pulumi.Input<string>;
    readonly timeRestrictions?: pulumi.Input<pulumi.Input<inputs.ScheduleRotationTimeRestriction>[]>;
    readonly type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ScheduleRotation resource.
 */
export interface ScheduleRotationArgs {
    readonly endDate?: pulumi.Input<string>;
    readonly length?: pulumi.Input<number>;
    readonly name?: pulumi.Input<string>;
    readonly participants: pulumi.Input<pulumi.Input<inputs.ScheduleRotationParticipant>[]>;
    readonly scheduleId: pulumi.Input<string>;
    readonly startDate: pulumi.Input<string>;
    readonly timeRestrictions?: pulumi.Input<pulumi.Input<inputs.ScheduleRotationTimeRestriction>[]>;
    readonly type: pulumi.Input<string>;
}
