// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AlertPolicy extends pulumi.CustomResource {
    /**
     * Get an existing AlertPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlertPolicyState, opts?: pulumi.CustomResourceOptions): AlertPolicy {
        return new AlertPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'opsgenie:index/alertPolicy:AlertPolicy';

    /**
     * Returns true if the given object is an instance of AlertPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AlertPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AlertPolicy.__pulumiType;
    }

    public readonly actions!: pulumi.Output<string[] | undefined>;
    public readonly alertDescription!: pulumi.Output<string | undefined>;
    public readonly alias!: pulumi.Output<string | undefined>;
    public readonly continuePolicy!: pulumi.Output<boolean | undefined>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly entity!: pulumi.Output<string | undefined>;
    public readonly filters!: pulumi.Output<outputs.AlertPolicyFilter[] | undefined>;
    public readonly ignoreOriginalActions!: pulumi.Output<boolean | undefined>;
    public readonly ignoreOriginalDetails!: pulumi.Output<boolean | undefined>;
    public readonly ignoreOriginalResponders!: pulumi.Output<boolean | undefined>;
    public readonly ignoreOriginalTags!: pulumi.Output<boolean | undefined>;
    public readonly message!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly policyDescription!: pulumi.Output<string | undefined>;
    public readonly priority!: pulumi.Output<string | undefined>;
    public readonly responders!: pulumi.Output<outputs.AlertPolicyResponder[] | undefined>;
    public readonly source!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly teamId!: pulumi.Output<string | undefined>;
    public readonly timeRestrictions!: pulumi.Output<outputs.AlertPolicyTimeRestriction[] | undefined>;

    /**
     * Create a AlertPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AlertPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlertPolicyArgs | AlertPolicyState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as AlertPolicyState | undefined;
            inputs["actions"] = state ? state.actions : undefined;
            inputs["alertDescription"] = state ? state.alertDescription : undefined;
            inputs["alias"] = state ? state.alias : undefined;
            inputs["continuePolicy"] = state ? state.continuePolicy : undefined;
            inputs["enabled"] = state ? state.enabled : undefined;
            inputs["entity"] = state ? state.entity : undefined;
            inputs["filters"] = state ? state.filters : undefined;
            inputs["ignoreOriginalActions"] = state ? state.ignoreOriginalActions : undefined;
            inputs["ignoreOriginalDetails"] = state ? state.ignoreOriginalDetails : undefined;
            inputs["ignoreOriginalResponders"] = state ? state.ignoreOriginalResponders : undefined;
            inputs["ignoreOriginalTags"] = state ? state.ignoreOriginalTags : undefined;
            inputs["message"] = state ? state.message : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["policyDescription"] = state ? state.policyDescription : undefined;
            inputs["priority"] = state ? state.priority : undefined;
            inputs["responders"] = state ? state.responders : undefined;
            inputs["source"] = state ? state.source : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["teamId"] = state ? state.teamId : undefined;
            inputs["timeRestrictions"] = state ? state.timeRestrictions : undefined;
        } else {
            const args = argsOrState as AlertPolicyArgs | undefined;
            if (!args || args.message === undefined) {
                throw new Error("Missing required property 'message'");
            }
            inputs["actions"] = args ? args.actions : undefined;
            inputs["alertDescription"] = args ? args.alertDescription : undefined;
            inputs["alias"] = args ? args.alias : undefined;
            inputs["continuePolicy"] = args ? args.continuePolicy : undefined;
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["entity"] = args ? args.entity : undefined;
            inputs["filters"] = args ? args.filters : undefined;
            inputs["ignoreOriginalActions"] = args ? args.ignoreOriginalActions : undefined;
            inputs["ignoreOriginalDetails"] = args ? args.ignoreOriginalDetails : undefined;
            inputs["ignoreOriginalResponders"] = args ? args.ignoreOriginalResponders : undefined;
            inputs["ignoreOriginalTags"] = args ? args.ignoreOriginalTags : undefined;
            inputs["message"] = args ? args.message : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["policyDescription"] = args ? args.policyDescription : undefined;
            inputs["priority"] = args ? args.priority : undefined;
            inputs["responders"] = args ? args.responders : undefined;
            inputs["source"] = args ? args.source : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["teamId"] = args ? args.teamId : undefined;
            inputs["timeRestrictions"] = args ? args.timeRestrictions : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(AlertPolicy.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AlertPolicy resources.
 */
export interface AlertPolicyState {
    readonly actions?: pulumi.Input<pulumi.Input<string>[]>;
    readonly alertDescription?: pulumi.Input<string>;
    readonly alias?: pulumi.Input<string>;
    readonly continuePolicy?: pulumi.Input<boolean>;
    readonly enabled?: pulumi.Input<boolean>;
    readonly entity?: pulumi.Input<string>;
    readonly filters?: pulumi.Input<pulumi.Input<inputs.AlertPolicyFilter>[]>;
    readonly ignoreOriginalActions?: pulumi.Input<boolean>;
    readonly ignoreOriginalDetails?: pulumi.Input<boolean>;
    readonly ignoreOriginalResponders?: pulumi.Input<boolean>;
    readonly ignoreOriginalTags?: pulumi.Input<boolean>;
    readonly message?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly policyDescription?: pulumi.Input<string>;
    readonly priority?: pulumi.Input<string>;
    readonly responders?: pulumi.Input<pulumi.Input<inputs.AlertPolicyResponder>[]>;
    readonly source?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
    readonly teamId?: pulumi.Input<string>;
    readonly timeRestrictions?: pulumi.Input<pulumi.Input<inputs.AlertPolicyTimeRestriction>[]>;
}

/**
 * The set of arguments for constructing a AlertPolicy resource.
 */
export interface AlertPolicyArgs {
    readonly actions?: pulumi.Input<pulumi.Input<string>[]>;
    readonly alertDescription?: pulumi.Input<string>;
    readonly alias?: pulumi.Input<string>;
    readonly continuePolicy?: pulumi.Input<boolean>;
    readonly enabled?: pulumi.Input<boolean>;
    readonly entity?: pulumi.Input<string>;
    readonly filters?: pulumi.Input<pulumi.Input<inputs.AlertPolicyFilter>[]>;
    readonly ignoreOriginalActions?: pulumi.Input<boolean>;
    readonly ignoreOriginalDetails?: pulumi.Input<boolean>;
    readonly ignoreOriginalResponders?: pulumi.Input<boolean>;
    readonly ignoreOriginalTags?: pulumi.Input<boolean>;
    readonly message: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly policyDescription?: pulumi.Input<string>;
    readonly priority?: pulumi.Input<string>;
    readonly responders?: pulumi.Input<pulumi.Input<inputs.AlertPolicyResponder>[]>;
    readonly source?: pulumi.Input<string>;
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
    readonly teamId?: pulumi.Input<string>;
    readonly timeRestrictions?: pulumi.Input<pulumi.Input<inputs.AlertPolicyTimeRestriction>[]>;
}
