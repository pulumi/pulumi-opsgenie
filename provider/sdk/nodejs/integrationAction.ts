// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IntegrationAction extends pulumi.CustomResource {
    /**
     * Get an existing IntegrationAction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IntegrationActionState, opts?: pulumi.CustomResourceOptions): IntegrationAction {
        return new IntegrationAction(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'opsgenie:index/integrationAction:IntegrationAction';

    /**
     * Returns true if the given object is an instance of IntegrationAction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IntegrationAction {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IntegrationAction.__pulumiType;
    }

    public readonly acknowledges!: pulumi.Output<outputs.IntegrationActionAcknowledge[] | undefined>;
    public readonly addNotes!: pulumi.Output<outputs.IntegrationActionAddNote[] | undefined>;
    public readonly closes!: pulumi.Output<outputs.IntegrationActionClose[] | undefined>;
    public readonly creates!: pulumi.Output<outputs.IntegrationActionCreate[] | undefined>;
    public readonly integrationId!: pulumi.Output<string>;

    /**
     * Create a IntegrationAction resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IntegrationActionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IntegrationActionArgs | IntegrationActionState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as IntegrationActionState | undefined;
            inputs["acknowledges"] = state ? state.acknowledges : undefined;
            inputs["addNotes"] = state ? state.addNotes : undefined;
            inputs["closes"] = state ? state.closes : undefined;
            inputs["creates"] = state ? state.creates : undefined;
            inputs["integrationId"] = state ? state.integrationId : undefined;
        } else {
            const args = argsOrState as IntegrationActionArgs | undefined;
            if (!args || args.integrationId === undefined) {
                throw new Error("Missing required property 'integrationId'");
            }
            inputs["acknowledges"] = args ? args.acknowledges : undefined;
            inputs["addNotes"] = args ? args.addNotes : undefined;
            inputs["closes"] = args ? args.closes : undefined;
            inputs["creates"] = args ? args.creates : undefined;
            inputs["integrationId"] = args ? args.integrationId : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(IntegrationAction.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IntegrationAction resources.
 */
export interface IntegrationActionState {
    readonly acknowledges?: pulumi.Input<pulumi.Input<inputs.IntegrationActionAcknowledge>[]>;
    readonly addNotes?: pulumi.Input<pulumi.Input<inputs.IntegrationActionAddNote>[]>;
    readonly closes?: pulumi.Input<pulumi.Input<inputs.IntegrationActionClose>[]>;
    readonly creates?: pulumi.Input<pulumi.Input<inputs.IntegrationActionCreate>[]>;
    readonly integrationId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IntegrationAction resource.
 */
export interface IntegrationActionArgs {
    readonly acknowledges?: pulumi.Input<pulumi.Input<inputs.IntegrationActionAcknowledge>[]>;
    readonly addNotes?: pulumi.Input<pulumi.Input<inputs.IntegrationActionAddNote>[]>;
    readonly closes?: pulumi.Input<pulumi.Input<inputs.IntegrationActionClose>[]>;
    readonly creates?: pulumi.Input<pulumi.Input<inputs.IntegrationActionCreate>[]>;
    readonly integrationId: pulumi.Input<string>;
}
