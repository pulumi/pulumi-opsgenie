// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NotificationPolicy extends pulumi.CustomResource {
    /**
     * Get an existing NotificationPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NotificationPolicyState, opts?: pulumi.CustomResourceOptions): NotificationPolicy {
        return new NotificationPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'opsgenie:index/notificationPolicy:NotificationPolicy';

    /**
     * Returns true if the given object is an instance of NotificationPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NotificationPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NotificationPolicy.__pulumiType;
    }

    public readonly autoCloseActions!: pulumi.Output<outputs.NotificationPolicyAutoCloseAction[] | undefined>;
    public readonly autoRestartActions!: pulumi.Output<outputs.NotificationPolicyAutoRestartAction[] | undefined>;
    public readonly deDuplicationActions!: pulumi.Output<outputs.NotificationPolicyDeDuplicationAction[] | undefined>;
    public readonly delayActions!: pulumi.Output<outputs.NotificationPolicyDelayAction[] | undefined>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly filters!: pulumi.Output<outputs.NotificationPolicyFilter[]>;
    public readonly name!: pulumi.Output<string>;
    public readonly policyDescription!: pulumi.Output<string | undefined>;
    public readonly suppress!: pulumi.Output<boolean | undefined>;
    public readonly teamId!: pulumi.Output<string>;
    public readonly timeRestrictions!: pulumi.Output<outputs.NotificationPolicyTimeRestriction[] | undefined>;

    /**
     * Create a NotificationPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NotificationPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NotificationPolicyArgs | NotificationPolicyState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as NotificationPolicyState | undefined;
            inputs["autoCloseActions"] = state ? state.autoCloseActions : undefined;
            inputs["autoRestartActions"] = state ? state.autoRestartActions : undefined;
            inputs["deDuplicationActions"] = state ? state.deDuplicationActions : undefined;
            inputs["delayActions"] = state ? state.delayActions : undefined;
            inputs["enabled"] = state ? state.enabled : undefined;
            inputs["filters"] = state ? state.filters : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["policyDescription"] = state ? state.policyDescription : undefined;
            inputs["suppress"] = state ? state.suppress : undefined;
            inputs["teamId"] = state ? state.teamId : undefined;
            inputs["timeRestrictions"] = state ? state.timeRestrictions : undefined;
        } else {
            const args = argsOrState as NotificationPolicyArgs | undefined;
            if (!args || args.filters === undefined) {
                throw new Error("Missing required property 'filters'");
            }
            if (!args || args.teamId === undefined) {
                throw new Error("Missing required property 'teamId'");
            }
            inputs["autoCloseActions"] = args ? args.autoCloseActions : undefined;
            inputs["autoRestartActions"] = args ? args.autoRestartActions : undefined;
            inputs["deDuplicationActions"] = args ? args.deDuplicationActions : undefined;
            inputs["delayActions"] = args ? args.delayActions : undefined;
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["filters"] = args ? args.filters : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["policyDescription"] = args ? args.policyDescription : undefined;
            inputs["suppress"] = args ? args.suppress : undefined;
            inputs["teamId"] = args ? args.teamId : undefined;
            inputs["timeRestrictions"] = args ? args.timeRestrictions : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(NotificationPolicy.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NotificationPolicy resources.
 */
export interface NotificationPolicyState {
    readonly autoCloseActions?: pulumi.Input<pulumi.Input<inputs.NotificationPolicyAutoCloseAction>[]>;
    readonly autoRestartActions?: pulumi.Input<pulumi.Input<inputs.NotificationPolicyAutoRestartAction>[]>;
    readonly deDuplicationActions?: pulumi.Input<pulumi.Input<inputs.NotificationPolicyDeDuplicationAction>[]>;
    readonly delayActions?: pulumi.Input<pulumi.Input<inputs.NotificationPolicyDelayAction>[]>;
    readonly enabled?: pulumi.Input<boolean>;
    readonly filters?: pulumi.Input<pulumi.Input<inputs.NotificationPolicyFilter>[]>;
    readonly name?: pulumi.Input<string>;
    readonly policyDescription?: pulumi.Input<string>;
    readonly suppress?: pulumi.Input<boolean>;
    readonly teamId?: pulumi.Input<string>;
    readonly timeRestrictions?: pulumi.Input<pulumi.Input<inputs.NotificationPolicyTimeRestriction>[]>;
}

/**
 * The set of arguments for constructing a NotificationPolicy resource.
 */
export interface NotificationPolicyArgs {
    readonly autoCloseActions?: pulumi.Input<pulumi.Input<inputs.NotificationPolicyAutoCloseAction>[]>;
    readonly autoRestartActions?: pulumi.Input<pulumi.Input<inputs.NotificationPolicyAutoRestartAction>[]>;
    readonly deDuplicationActions?: pulumi.Input<pulumi.Input<inputs.NotificationPolicyDeDuplicationAction>[]>;
    readonly delayActions?: pulumi.Input<pulumi.Input<inputs.NotificationPolicyDelayAction>[]>;
    readonly enabled?: pulumi.Input<boolean>;
    readonly filters: pulumi.Input<pulumi.Input<inputs.NotificationPolicyFilter>[]>;
    readonly name?: pulumi.Input<string>;
    readonly policyDescription?: pulumi.Input<string>;
    readonly suppress?: pulumi.Input<boolean>;
    readonly teamId: pulumi.Input<string>;
    readonly timeRestrictions?: pulumi.Input<pulumi.Input<inputs.NotificationPolicyTimeRestriction>[]>;
}
